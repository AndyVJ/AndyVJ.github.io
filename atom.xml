<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡搅蛮缠</title>
  
  <subtitle>AndyVJ 的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.andyvj.com/"/>
  <updated>2019-07-27T06:48:26.134Z</updated>
  <id>https://www.andyvj.com/</id>
  
  <author>
    <name>AndyVJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>英语：关于thing的表达</title>
    <link href="https://www.andyvj.com/2019/07/27/190727N01/"/>
    <id>https://www.andyvj.com/2019/07/27/190727N01/</id>
    <published>2019-07-27T06:37:22.000Z</published>
    <updated>2019-07-27T06:48:26.134Z</updated>
    
    <content type="html"><![CDATA[<embed height="50" width="100%" autostart="false" loop="false" src="http://image.huvjie.com/190727N01_img01.mp3"><ul><li>It’s my thing.   // 是我擅长的。</li></ul><a id="more"></a><ul><li>I know a thing or two. //  略知一二。</li><li>I have a thing for you. //  我喜欢你</li><li>Sure thing!  //  没问题</li></ul><p><hr><br><span style="color:gray;font-size:12px"><br>参考： 抖音 -&gt; @斑马英语ZebraEnglish<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;embed height=&quot;50&quot; width=&quot;100%&quot; autostart=&quot;false&quot; loop=&quot;false&quot; src=&quot;http://image.huvjie.com/190727N01_img01.mp3&quot;&gt;

&lt;ul&gt;
&lt;li&gt;It’s my thing.   // 是我擅长的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="基础学科" scheme="https://www.andyvj.com/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="英语" scheme="https://www.andyvj.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语：你能明白我的意思吗</title>
    <link href="https://www.andyvj.com/2019/07/26/190726N01/"/>
    <id>https://www.andyvj.com/2019/07/26/190726N01/</id>
    <published>2019-07-26T11:56:07.000Z</published>
    <updated>2019-07-26T13:24:49.737Z</updated>
    
    <content type="html"><![CDATA[<embed height="50" width="100%" autostart="false" loop="false" src="http://image.huvjie.com/190726N01_img01.mp3"><p><a href="http://image.huvjie.com/190726N01_img01.mp3" target="_blank" rel="noopener">音频</a>。</p><p>你能明白我的意思吗？千万不要说，<code>Can you understand me?</code>，这句话一般用于比自己地位低的人，否则不太礼貌，虽然语法没有错误。有一点，表达别人的理解能力有点问题的意思。</p><a id="more"></a><p>也不要说，<code>Do you know my meaning?</code> 中式英语。</p><p>应该说：</p><ul><li>Do you get what I’m saying?</li><li>Are you with me?</li><li>Got it?</li><li>Do you get/see/know what I mean?</li></ul><h2 id="网页插入音频"><a href="#网页插入音频" class="headerlink" title="网页插入音频"></a>网页插入音频</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">autostart</span>=<span class="string">"false"</span> <span class="attr">loop</span>=<span class="string">"false"</span> <span class="attr">src</span>=<span class="string">"x.mp3"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把 <code>src</code>地址换掉。<a href="https://www.runoob.com/html/html-sounds.html" target="_blank" rel="noopener">参考</a>。</p><p><hr><br><span style="color:gray;font-size:12px"><br>参考： 抖音 -&gt; @英国小克里<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;embed height=&quot;50&quot; width=&quot;100%&quot; autostart=&quot;false&quot; loop=&quot;false&quot; src=&quot;http://image.huvjie.com/190726N01_img01.mp3&quot;&gt;

&lt;p&gt;&lt;a href=&quot;http://image.huvjie.com/190726N01_img01.mp3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;音频&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你能明白我的意思吗？千万不要说，&lt;code&gt;Can you understand me?&lt;/code&gt;，这句话一般用于比自己地位低的人，否则不太礼貌，虽然语法没有错误。有一点，表达别人的理解能力有点问题的意思。&lt;/p&gt;
    
    </summary>
    
      <category term="基础学科" scheme="https://www.andyvj.com/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="英语" scheme="https://www.andyvj.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>C# StopWatch</title>
    <link href="https://www.andyvj.com/2019/07/24/190724N01/"/>
    <id>https://www.andyvj.com/2019/07/24/190724N01/</id>
    <published>2019-07-24T12:54:07.000Z</published>
    <updated>2019-07-24T13:03:58.912Z</updated>
    
    <content type="html"><![CDATA[<p><code>StopWatch</code> 在 <code>using System.Diagnostics</code> 命名空间，需先引用。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line">namespace StopWatch计时</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//▼ 创建一个Stopwatch实例</span></span><br><span class="line">            Stopwatch stopWatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">            stopWatch.Start(); <span class="comment">//开始计时</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                Console.Write(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"></span><br><span class="line">            stopWatch.Stop();  <span class="comment">//停止计时</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"耗时："</span> + stopWatch.ElapsedMilliseconds + <span class="string">" ms  "</span>);</span><br><span class="line">            stopWatch.Reset();   <span class="comment">//重置StopWatch</span></span><br><span class="line">            Console.WriteLine(<span class="string">"耗时："</span> + stopWatch.ElapsedMilliseconds + <span class="string">" ms  "</span>);</span><br><span class="line">            stopWatch.Restart();  <span class="comment">//重新启动被停止的StopWatch</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                Console.Write(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            stopWatch.Stop();</span><br><span class="line">            <span class="comment">// ▼ 获取stopWatch从开始到现在的时间差，单位是毫秒 -&gt; stopWatch.ElapsedMilliseconds</span></span><br><span class="line">            Console.WriteLine(<span class="string">"耗时："</span> + stopWatch.ElapsedMilliseconds + <span class="string">" ms  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</span><br><span class="line">30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56</span><br><span class="line"> 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 8</span><br><span class="line">3 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 10</span><br><span class="line">7 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 12</span><br><span class="line">7 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 14</span><br><span class="line">7 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 16</span><br><span class="line">7 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 18</span><br><span class="line">7 188 189 190 191 192 193 194 195 196 197 198 199</span><br><span class="line">耗时：11 ms</span><br><span class="line">耗时：0 ms</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</span><br><span class="line">30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56</span><br><span class="line"> 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 8</span><br><span class="line">3 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99</span><br><span class="line">耗时：3 ms</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.cnblogs.com/yunfeifei/p/3993401.html" target="_blank" rel="noopener">link-01</a>  // 博客园：5天玩转C#并行和多线程编程 —— 第一天 认识Parallel<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;StopWatch&lt;/code&gt; 在 &lt;code&gt;using System.Diagnostics&lt;/code&gt; 命名空间，需先引用。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#读写配置文件</title>
    <link href="https://www.andyvj.com/2019/07/19/190719N01/"/>
    <id>https://www.andyvj.com/2019/07/19/190719N01/</id>
    <published>2019-07-19T14:08:13.000Z</published>
    <updated>2019-07-19T15:19:27.934Z</updated>
    
    <content type="html"><![CDATA[<p>利用 Windows API 读写配置文件。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line">namespace CS读写配置文件</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">"kernel32"</span>)</span>]<span class="comment">//读配置文件方法的6个参数：所在的分区（section）、 键值、     初始缺省值、   StringBuilder、  参数长度上限 、配置文件路径</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">long</span> <span class="title">GetPrivateProfileString</span>(<span class="params"><span class="keyword">string</span> section, <span class="keyword">string</span> key, <span class="keyword">string</span> defaultValue, StringBuilder retVal, <span class="keyword">int</span> size, <span class="keyword">string</span> filePath</span>)</span>;</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">"kernel32"</span>)</span>]<span class="comment">//配置文件方法的4个参数：  所在的分区（section）、  键值、     参数值、       配置文件路径</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">long</span> <span class="title">WritePrivateProfileString</span>(<span class="params"><span class="keyword">string</span> section, <span class="keyword">string</span> key, <span class="keyword">string</span> <span class="keyword">value</span>, <span class="keyword">string</span> filePath</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*读配置文件*/</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetValue</span>(<span class="params"><span class="keyword">string</span> section, <span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// ▼ 获取当前程序启动目录</span></span><br><span class="line">            <span class="keyword">string</span> strPath = Application.StartupPath + <span class="string">@"/config.ini"</span>;</span><br><span class="line">            <span class="keyword">if</span> (File.Exists(strPath)) &#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">255</span>);</span><br><span class="line">                GetPrivateProfileString(section, key, <span class="string">"配置文件不存在，读取未成功!"</span>, sb, <span class="number">255</span>, strPath);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> sb.ToString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">string</span>.Empty;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*写配置文件*/</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="keyword">string</span> section, <span class="keyword">string</span> key, <span class="keyword">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// ▼ 获取当前程序启动目录</span></span><br><span class="line">            <span class="keyword">string</span> strPath = Application.StartupPath + <span class="string">@"/config.ini"</span>;</span><br><span class="line">            WritePrivateProfileString(section, key, <span class="keyword">value</span>, strPath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SetValue(<span class="string">"参数"</span>, <span class="string">"波特率"</span>, <span class="string">"9600"</span>); <span class="comment">// 都是字符串类型</span></span><br><span class="line">            SetValue(<span class="string">"参数"</span>, <span class="string">"率特波"</span>, <span class="string">"110"</span>); <span class="comment">// 都是字符串类型</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            richTextBox1.Text += GetValue(<span class="string">"参数"</span>, <span class="string">"波特率"</span>);</span><br><span class="line">            richTextBox1.Text += <span class="string">"\n"</span>;</span><br><span class="line">            richTextBox1.Text += GetValue(<span class="string">"参数"</span>, <span class="string">"率特波"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>界面：</p><p><img src="http://image.huvjie.com/190719N01_img01.jpg" alt=""></p><p>运行，点击 button：</p><p><img src="http://image.huvjie.com/190719N01_img02.jpg" alt=""></p><p><code>config,ini</code>配置文件内容如下：<br><img src="http://image.huvjie.com/190719N01_img03.jpg" alt=""></p><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.cnblogs.com/xh6300/p/5895759.html" target="_blank" rel="noopener">link-01</a>  // Windows API 读写配置文件<br>2.<a href="https://www.cnblogs.com/itgmhujia/archive/2008/02/26/1082179.html" target="_blank" rel="noopener">link-02</a> // 在C#中读写INI配置文件<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用 Windows API 读写配置文件。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>路漫漫</title>
    <link href="https://www.andyvj.com/2019/07/19/190719N/"/>
    <id>https://www.andyvj.com/2019/07/19/190719N/</id>
    <published>2019-07-19T05:28:37.000Z</published>
    <updated>2019-07-19T11:30:40.140Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.huvjie.com/190719N_img01.jpg" alt=""></p><a id="more"></a><p>路漫漫…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/190719N_img01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://www.andyvj.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="点滴" scheme="https://www.andyvj.com/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>C# 匿名方法 和 lambda 表达式</title>
    <link href="https://www.andyvj.com/2019/07/16/190716N01/"/>
    <id>https://www.andyvj.com/2019/07/16/190716N01/</id>
    <published>2019-07-16T04:46:01.000Z</published>
    <updated>2019-07-19T11:30:40.135Z</updated>
    
    <content type="html"><![CDATA[<p>匿名只是用一次。以后用的都是 lambda 表达式，一般很少会用匿名方法。</p><p>给委托赋值的时候才会用到它。有<span style="color:blue">委托变量</span>时才会用。</p><p><span style="color:red">匿名方法不能直接在类中定义</span>，而是在给委托变量赋值的时候，需要赋值一个方法，此时可以“现做现卖”，定义一个匿名方法传递给该委托。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ProcessWordDelegate p = <span class="keyword">delegate</span>(<span class="keyword">string</span> s)</span><br><span class="line">    Console. WriteLine(s);</span><br><span class="line">&#125;; <span class="comment">// 注意这里有分号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">ProcessWordDelegate</span>(<span class="params"><span class="keyword">string</span> s</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="无参数无返回值"><a href="#无参数无返回值" class="headerlink" title="无参数无返回值"></a>无参数无返回值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Action Test = <span class="keyword">delegate</span> () &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"匿名方法:无参数无返回值。"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    Test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成 lambda 表达式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Action Test =  () =&gt; &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"匿名方法:无参数无返回值。"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    Test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匿名方法:无参数无返回值。</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p><h2 id="有参数无返回值"><a href="#有参数无返回值" class="headerlink" title="有参数无返回值"></a>有参数无返回值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Action&lt;<span class="keyword">string</span>&gt; Test = <span class="keyword">delegate</span> (<span class="keyword">string</span> msg) &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"匿名方法:"</span> + msg);</span><br><span class="line">    &#125;;</span><br><span class="line">    Test(<span class="string">"有参数无返回值"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成 lambda 表达式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Action&lt;<span class="keyword">string</span>&gt; Test =  (<span class="keyword">string</span> msg) =&gt; &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"匿名方法:"</span> + msg);</span><br><span class="line">    &#125;;</span><br><span class="line">    Test(<span class="string">"有参数无返回值"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匿名方法:有参数无返回值</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="带参数带返回值"><a href="#带参数带返回值" class="headerlink" title="带参数带返回值"></a>带参数带返回值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Test = <span class="keyword">delegate</span> (<span class="keyword">int</span> a) &#123; <span class="keyword">return</span> a; &#125;;</span><br><span class="line">    Console.WriteLine(Test(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    Func&lt;<span class="keyword">int</span>&gt; Test1 = <span class="keyword">delegate</span> &#123; <span class="keyword">return</span> <span class="number">200</span>; &#125;;</span><br><span class="line">    Console.WriteLine(Test1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成 lambda 表达式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Test =  (<span class="keyword">int</span> a) =&gt; &#123; <span class="keyword">return</span> a; &#125;;</span><br><span class="line">    Console.WriteLine(Test(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    Func&lt;<span class="keyword">int</span>&gt; Test1 = ()=&gt; &#123; <span class="keyword">return</span> <span class="number">200</span>; &#125;;</span><br><span class="line">    Console.WriteLine(Test1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">200</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.bilibili.com/video/av24227074?p=2" target="_blank" rel="noopener">link-01</a> // B 站传智播客<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;匿名只是用一次。以后用的都是 lambda 表达式，一般很少会用匿名方法。&lt;/p&gt;
&lt;p&gt;给委托赋值的时候才会用到它。有&lt;span style=&quot;color:blue&quot;&gt;委托变量&lt;/span&gt;时才会用。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;匿名方法不能直接在类中定义&lt;/span&gt;，而是在给委托变量赋值的时候，需要赋值一个方法，此时可以“现做现卖”，定义一个匿名方法传递给该委托。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 结构</title>
    <link href="https://www.andyvj.com/2019/07/14/190714N01/"/>
    <id>https://www.andyvj.com/2019/07/14/190714N01/</id>
    <published>2019-07-14T12:56:33.000Z</published>
    <updated>2019-07-14T13:03:01.202Z</updated>
    
    <content type="html"><![CDATA[<p>结构就是几个数据组成的数据结构，<strong>它与类共享几乎所有相同的语法</strong>，但结构比类受<strong>到的限制更多</strong>。</p><a id="more"></a><p>结构是一种<strong>值的类型</strong>，通常用来封装一组相关的变量，结构中可以包括构造函数、常量、字段、方法、属性、运算符、事件和嵌套类型等。但如果要同时包括上述几种成员，则应该考虑使用类。结构实际是将多个相关的变量包装成为一个整体使用。在结构体中的变量，可以是相同、部分相同，或完全不同的数据类型。例如，把公司里的职员看作一个结构体，可以将个人信息放入结构体中，主要包含姓名、年龄、出生年月、性别、籍贯、婚否、职务。</p><p>在 C# 中的结构与传统的 C 或 C++ 中的结构不同。结构具有以下特点：</p><ul><li>结构是<strong>值</strong>的类型。</li><li>向方法传递结构时，结构是通过传值方式传递的，而不是作为引用传递的。</li><li>结构的实例化可以不使用new运算符。结构可以<strong>声明构造函数，但它们必须带参数。</strong>当您使用 New 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。</li><li>如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。</li><li>一个结构<span style="color:red">不能</span>从另一个结构或类继承。所有结构都直接继承自<code>System.ValueType</code>，后者继承自<code>System.Object</code>。</li><li>结构可以实现接口。接口可实现一个或多个接口。</li><li>在结构中初始化实例字段是错误的。<span style="color:blue">// 不能在结构中初始化字段。</span></li><li>结构成员不能指定为 <code>abstract</code>、<code>virtual</code> 或<code>protected</code>。</li></ul><p>说明:</p><p>在结构声明中，除非字段被声明为<code>const或static</code>，否则无法初始化。</p><p>实例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">struct</span> Rect<span class="comment">//定义一个矩形结构</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> width;<span class="comment">//矩形的宽</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> height;<span class="comment">//矩形的高</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rect</span>(<span class="params"><span class="keyword">double</span> x, <span class="keyword">double</span> y</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            width = x;</span><br><span class="line">            height = y;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Area</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> width * height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Rect rect1;<span class="comment">//创建矩形结构</span></span><br><span class="line">        rect1.width = <span class="number">5</span>;<span class="comment">//为矩形宽赋值</span></span><br><span class="line">        rect1.height = <span class="number">3</span>;<span class="comment">//为矩形高赋值</span></span><br><span class="line">        Console.WriteLine(<span class="string">"矩形面积为："</span> + rect1.Area());</span><br><span class="line">        Rect rect2 = <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">4</span>);<span class="comment">//使用构造函数实例化矩形结构</span></span><br><span class="line">        Console.WriteLine(<span class="string">"矩形面积为："</span> + rect2.Area());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">矩形面积为：15</span><br><span class="line">矩形面积为：24</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><strong>类</strong>和<strong>结构</strong>有以下几个基本的不同点：</p><ul><li>类是引用类型，结构是值类型。</li><li>结构不支持继承。</li><li>结构不能声明默认的构造函数。</li></ul><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.runoob.com/csharp/csharp-struct.html" target="_blank" rel="noopener">link-01</a>  // 菜鸟教程<br>《入门到精通》 -&gt; P142<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结构就是几个数据组成的数据结构，&lt;strong&gt;它与类共享几乎所有相同的语法&lt;/strong&gt;，但结构比类受&lt;strong&gt;到的限制更多&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 数组的声明和初始化</title>
    <link href="https://www.andyvj.com/2019/07/12/190712N03/"/>
    <id>https://www.andyvj.com/2019/07/12/190712N03/</id>
    <published>2019-07-12T10:43:29.000Z</published>
    <updated>2019-07-21T01:03:47.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; <span class="comment">// 默认初始化为 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.Length; i++) &#123;</span><br><span class="line">        arr1[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">int</span> a <span class="keyword">in</span> arr1) &#123;</span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><code>int[]</code>这样一起可以看成是一个类型。</p><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">int</span> a <span class="keyword">in</span> arr1) &#123;</span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p><p>数组声明定义时，也可以写两行。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1;</span><br><span class="line">arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：<br>数组大小必须与大括号中的元素个数相匹配，否则会产生编辑错误。</p><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>不使用<code>new</code>运算符，直接初始化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;  <span class="comment">// 直接初始化。能自己推断出数组长度。</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">int</span> a <span class="keyword">in</span> arr1) &#123;</span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>类似一维数组。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个二行二列的数组</span></span><br><span class="line"><span class="keyword">int</span>[,] arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>,<span class="number">2</span>];</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 new 运算符对其进行初始化</span></span><br><span class="line"><span class="keyword">int</span>[,]arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>,<span class="number">2</span>]&#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不指定行数和列数，用new运算符直接初始化</span></span><br><span class="line"><span class="keyword">int</span>[,]arr=<span class="keyword">new</span> <span class="keyword">int</span>[,]&#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不使用 new 直接初始化</span></span><br><span class="line"><span class="keyword">int</span>[,] arr =  &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><p>上面如果不指定维度，要用<code>{}</code>分组；上面的如果写成<code>{ 1, 2 , 3, 4 };</code>会报错。<span style="color:red">C# 二维(多维)数组内需要用<code>{}</code>进行分组，不然语法错误。</span></p><p>二维数组下标访问的形式是：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[i, j];  <span class="comment">// 下标访问形式</span></span><br></pre></td></tr></table></figure><p>不能在声明中指定大小，下面这种方式是<span style="color:red">错误的：</span><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[<span class="number">2</span>, <span class="number">3</span>] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>, <span class="number">3</span>] &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// ▲ int[2, 3] arr = …… 这样是错误的。</span></span><br></pre></td></tr></table></figure></p><!--<hr/><span style="color:gray;font-size:12px">参考：1.[link-01]()2.[link-02]()3.[link-03]()4.[link-04]()5.[link-05]()</span>-->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一维数组&quot;&gt;&lt;a href=&quot;#一维数组&quot; class=&quot;headerlink&quot; title=&quot;一维数组&quot;&gt;&lt;/a&gt;一维数组&lt;/h2&gt;&lt;h3 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h3&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arr1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 默认初始化为 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr1.Length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arr1[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; arr1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Console.WriteLine(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 关于继承和多态</title>
    <link href="https://www.andyvj.com/2019/07/12/190712N02/"/>
    <id>https://www.andyvj.com/2019/07/12/190712N02/</id>
    <published>2019-07-12T05:32:32.000Z</published>
    <updated>2019-07-21T01:14:45.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承一个类时，类成员的可访问性是一个重要的问题。子类（派生类）不能访问基类的私有成员，但是可以访问其公共成员。这就是说，只要使用public声明类成员，就可以让一个类成员被基类和子类（派生类）同时访问，同时也可以被外部的代码访问。</p><a id="more"></a><p>为了解决基类成员访问问题，C# 还提供了另外一种可访问性：<code>protected</code>，只有子类（派生类）才能访问<code>protected</code>成员，<span style="color:red">基类和外部代码</span>都不能访问<code>protected</code>成员。</p><p>除了成员的保护级别外，还可以为成员定义其继承行为。基类的成员可以是<strong>虚拟</strong>的，成员可以由继承它的类<strong>重写</strong>。子类（派生类）可以提供成员的其他执行代码，这种执行代码<strong>不会删除原来的代码，仍可以在类中访问原来的代码</strong>，但<span style="color:red">外部代码不能访问它们</span>。如果没有提供其他执行方式，外部代码就直接访问基类中成员的执行代码。</p><p>另外，基类还可以定义为<strong>抽象类</strong>。<u>抽象类不能直接实例化，要使用抽象类就必须继承这个类，然后再实例化。</u></p><p><strong>说明：</strong><br>继承类时，需要使用冒号加类名。当对一个类应用<code>sealed</code>修饰符时，该修饰符会阻止其他类从该类继承。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>当然如果它们都继承自某个类，可以把这些子类（派生类）<strong>都放到一个数组中</strong>。如果这些对象都有同名方法，就可以<span style="color:red">调用每个对象的同名方法</span>。</p><p>C# 中，类的<strong>多态性</strong>是通过在子类（派生类）中<strong>重载基类的虚方法或函数成员</strong>来实现的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace 多态小练习</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> X &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123;</span><br><span class="line">                x = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Y &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123;</span><br><span class="line">                y = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> X + Y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass2</span> : <span class="title">MyClass1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            X = <span class="number">10</span>;</span><br><span class="line">            Y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> X + Y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MyClass2 mc2 = <span class="keyword">new</span> MyClass2();</span><br><span class="line">            Console.WriteLine(mc2.Add());</span><br><span class="line"></span><br><span class="line">            MyClass1 mc1 = mc2;  <span class="comment">// 基类可以直接用派生类赋值</span></span><br><span class="line">            mc1.X = <span class="number">1</span>;</span><br><span class="line">            mc1.Y = <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 上面着两行赋值没有，基类Add()函数已经不复存在了，被重写掉了？？？</span></span><br><span class="line">            Console.WriteLine(mc1.Add());</span><br><span class="line"></span><br><span class="line">            MyClass1 mc1_1 = <span class="keyword">new</span> MyClass1();</span><br><span class="line">            Console.WriteLine(mc1_1.Add());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><strong>说明：</strong><br>当子类（派生类）从基类继承时，它会获得基类的所有方法、字段、属性和事件。若要<strong>更改基类的数据和行为，有两种选择</strong>：可以使用新的派生成员替换基成员，或者可以重写虚拟的基成员。上面的实例重写了基类中的虚方法，另外，开发人员还可以使用新的派生成员替换基类的成员，这时需要使用<code>new</code>关键字。如果基类定义了一个方法、字段或属性，则<code>new</code>关键字用于在子类（派生类）中创建该方法、字段或属性的新定义。<code>new</code>关键字放置在要替换的类成员的返回类型之前，例如，上面实例中重写基类中虚方法的代码也可以替换为下面的形式。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass2</span>: <span class="title">MyClass1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> new <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"></span>)  <span class="comment">// 这里改成 new</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        X = <span class="number">10</span>;</span><br><span class="line">        Y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> X + Y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>new</code> 基类中不需要 <code>virtual</code> 来表示，<code>override</code> 只能重写 <code>virtual</code> 标识的虚方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">3</span>    <span class="comment">// 不一样了，new 的两个没关系了？？</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>注意：<br>① <code>virtual</code>修饰符不能与<code>private、static、abstract</code>或者<code>override</code>修饰符同时使用。<br>② <code>override</code>修饰符不能与<code>new、static</code>或者<code>virtual</code>修饰符同时使用，并且重写方法只能用于重写基类中的虚方法。<br>③ C# 中，继承、虚方法和重写方法组合在一起才能实现多态性。  </p><p><hr><br><span style="color:gray;font-size:12px"><br>参考：入门到精通 -&gt; P144<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;p&gt;继承一个类时，类成员的可访问性是一个重要的问题。子类（派生类）不能访问基类的私有成员，但是可以访问其公共成员。这就是说，只要使用public声明类成员，就可以让一个类成员被基类和子类（派生类）同时访问，同时也可以被外部的代码访问。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>英语口语｜怎样找一份有意义的工作</title>
    <link href="https://www.andyvj.com/2019/07/12/190712N01/"/>
    <id>https://www.andyvj.com/2019/07/12/190712N01/</id>
    <published>2019-07-12T04:39:21.000Z</published>
    <updated>2019-07-23T14:57:31.279Z</updated>
    
    <content type="html"><![CDATA[<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=49495791&cid=86666505&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><a id="more"></a><p><strong>字幕：</strong></p><ul><li>The first requirement of any job is that it should pay.</li><li>But almost as important yet much less commonly recognized,is that a job should feel full of meaning.</li><li>Yet, how does a job get to feel meaningful?</li><li>What even does it mean to say that a job has meaning?</li><li>There seem to be three things that imbue work with meaning.</li><li>Firstly,a meaningful job taps into the deepest, most sincere and talented parts of us.</li><li>So different people will necessarily find different sorts of work meaningful according to what’s inside their deeper self.</li><li>For some, meaning might emerge from baking bread.</li><li>Others will feel their deep self engaged by computer science.</li><li>For others still,they’ll feel most fully themselves, most fully alive when investing money or teaching kids a foreign language.</li><li>Secondly,a meaningful job is one which to some extent helps others, which fixes a problem that humans have.</li><li>A job which in ways, large and small, serves humanity.</li><li>Meaningful work provides a service to others.</li><li>And thirdly,a job feels meaningful when the person doing it can viscerally sense, day to day, the impact of their work upon an audience.</li><li>Not only is the job theoretically meaningful, it actually feels meaningful as one does it in a course of an average day.</li><li>Why should it be so hard to find meaningful work?</li><li>Why are we in such a danger of doing work that brings in money but doesn’t fulfill the meaning side of us?</li><li>Three big reasons stand out.</li><li>Firstly,because it’s perilously hard for us to locate our true interests in the time we have,before simply paying the bills becomes the imperative.</li><li>Our interests don’t manifest themselves spontaneously.</li><li>They require us to paftiently analyze ourselves, and try out a range of options to see what feels as if it might have the best fit for us.</li><li>But unfortunately,schools and universities, as well as society at large,doesn’t place much emphasis on this stage of educatilon, on helping people to understand their authentic working identities.</li><li>There’s far more emphasis on simply getting ready for any job than a job that would particularly well-suited to us, which is a pity not just for individuals but for the economy as a whole, because pedple would always work better, harder and more fruitfully when their deep selves are engaged.</li><li>Secondly,many jobs are relatively meaningless because it’s very possible, in the current economy,to generate profits from selling people things that aren’t really helping them in any way, but are more hoodwinking them, or preying on their lack of self-command.</li><li>Most of us have a dangerously loose hold on what really brings us satisfaction long-term, to build huge and profitable businesses selling stuff which no one’s particularly proud of at the end an average day.</li><li>Those working in these businesses know in their hearts that they haven’t really helped anyone have a better life. </li><li>The job pays. That’s why they keep doing it, but there’s sadly very little meaning.</li><li>Thirdly,a job may have real meaning may genuinely be helping others,but it may not feel like this day to day, because many organizations are so large, so slow-moving, so split up over so many continents that the purpose of everyone’s workday gets lost amidst endless meetings,memoso, conference calls and admin.</li><li>If you’re one of the 10,000 people on four continents working towards a product that will help humanity in 2022, you may well lose the thread of what the real purpose of it all is.</li><li>No wonder people wtho work in large organizations often fantasize/ about throwing it all in and working in a job with more tangible sense of the end result.</li><li>For example,running a smal B&amp;B or landscape gardening firm.</li><li>The very scale of modern enterprise has sapped a lot of work of a sense of meaning.</li><li>This diagnosis helps to point the way to what we might begin to do to make work more meaningful for people.</li><li>Firstly, pay a lot more attention to helping people find their vocation, their reall working authentic selves through moves like career psychotherapy, extended work placements and changes to school and university curricula, so as to allow students to start to analyze their identities and aptitudes from a much younger age.</li><li>Secondly,the more we as customers can support businesses engaged in meaningful work, the more meaningful jobs there will be.</li><li>Consumers have an enormous power over what kind of lives we can have as producers.</li><li>By raising the quality off our demand, we raise the number of jobs there are which can ans wer to mankind’s deeperneeds.</li><li>Thirdly,in businesses which should do meaningful work but on too large a scale over too long a period for it to feel meaningful day to day, we need to get better at telling stories of what the business is up to. </li><li>We need to give work some of the intimacy of a small B&amp;B even if it’s a giant multinational. </li><li>Ensuring that work is meaningful is vital. It’s not a luxury.</li><li>It determines the greatest issue of all in modern economics and politics: how hard and well people will work, and therefore, how successful and wealthy our societies can be. </li></ul><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.bilibili.com/video/av49495791/" target="_blank" rel="noopener">link-01</a>  // B 站连接<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=49495791&amp;cid=86666505&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; style=&quot;position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="基础学科" scheme="https://www.andyvj.com/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="英语" scheme="https://www.andyvj.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>C# switch 语句</title>
    <link href="https://www.andyvj.com/2019/07/10/190710N02/"/>
    <id>https://www.andyvj.com/2019/07/10/190710N02/</id>
    <published>2019-07-10T09:37:00.000Z</published>
    <updated>2019-07-11T12:30:45.194Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>([表达式]) &#123;</span><br><span class="line">    <span class="keyword">case</span>[常量表达式]:</span><br><span class="line">        [<span class="meta">语句块</span>]</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span>[常量表达式]:</span><br><span class="line">        [<span class="meta">语句块</span>]</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span>[常量表达式]:</span><br><span class="line">        [<span class="meta">语句块</span>]</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        [<span class="meta">语句块</span>]</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>【表达式】：的类型必须是<code>sbyte、byte、short、ushort、int、uint、long、ulong、char、string</code>和<code>枚举类</code>型中的一种。<strong><code>string</code>类型也是可以的。</strong></p><p>【说明】：<code>switch</code>语句可以包括任意数目的<code>case</code>实例，但是任何两个<code>case</code>语句都不能具有相同的值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test04</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"请您输入一个月份："</span>);<span class="comment">//输出提示信息</span></span><br><span class="line">            <span class="keyword">int</span> MyMouth = <span class="keyword">int</span>.Parse(Console.ReadLine());<span class="comment">//声明一个int类型变量用于获取用户输入的数据</span></span><br><span class="line">            <span class="keyword">string</span> MySeason;<span class="comment">//声明一个字符串变量</span></span><br><span class="line">            <span class="keyword">switch</span> (MyMouth)<span class="comment">//调用switch语句</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    MySeason = <span class="string">"您输入的月份属于冬季！"</span>;<span class="comment">//如果输入的数据是1、2或者12则执行此分支</span></span><br><span class="line">                    <span class="keyword">break</span>;    <span class="comment">//跳出switch语句</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    MySeason = <span class="string">"您输入的月份属于春季！"</span>;<span class="comment">//如果输入的数据是3、4或5则执行此分支</span></span><br><span class="line">                    <span class="keyword">break</span>;    <span class="comment">//跳出switch语句</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:  </span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    MySeason = <span class="string">"您输入的月份属于夏季！"</span>;<span class="comment">//如果输入的数据是6、7或8则执行此分支</span></span><br><span class="line">                    <span class="keyword">break</span>;    <span class="comment">//跳出switch语句</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                    MySeason = <span class="string">"您输入的月份属于秋季！"</span>;<span class="comment">//如果输入的数据是9、10或11则执行此分支</span></span><br><span class="line">                    <span class="keyword">break</span>;    <span class="comment">//跳出switch语句</span></span><br><span class="line">                <span class="comment">//如果输入的数据不满足以上4个分支的内容则执行default语句</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    MySeason = <span class="string">"月份输入错误！"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;    <span class="comment">//跳出switch语句</span></span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(MySeason);<span class="comment">//输出字符串MySeason </span></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>来自： 《入门到精通》 -&gt; P86<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;([表达式]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;[常量表达式]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;语句块&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;[常量表达式]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;语句块&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;[常量表达式]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;语句块&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;语句块&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 枚举类型</title>
    <link href="https://www.andyvj.com/2019/07/10/190710N01/"/>
    <id>https://www.andyvj.com/2019/07/10/190710N01/</id>
    <published>2019-07-10T05:39:15.000Z</published>
    <updated>2019-07-11T12:30:45.188Z</updated>
    
    <content type="html"><![CDATA[<p>枚举类型是一种独特的值类型，它用于声明一组具有相同性质的常量。</p><p><strong>说明：</strong>在定义枚举类型时，如果不对其进行赋值，默认情况下，第一个枚举数的值为0，后面每个枚举数的值依次递增1。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> 枚举名 </span><br><span class="line">&#123;</span><br><span class="line">    list1=value1,</span><br><span class="line">    list2=value2,</span><br><span class="line">    list3=value3,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    listN=valueN,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">namespace CSharp枚举类型</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">enum</span> Mydate</span><br><span class="line">        &#123;</span><br><span class="line">            Sun,<span class="comment">// 这里逗号</span></span><br><span class="line">            Mon, </span><br><span class="line">            Tu,</span><br><span class="line">            Wen,</span><br><span class="line">            Thi,</span><br><span class="line">            Fri,</span><br><span class="line">            Sat</span><br><span class="line">        &#125; <span class="comment">// 这里没有分号</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span> d = (<span class="keyword">int</span>)DateTime.Now.DayOfWeek;</span><br><span class="line">            <span class="keyword">switch</span>(d) &#123;</span><br><span class="line">                <span class="keyword">case</span> (<span class="keyword">int</span>)Mydate.Sun:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期天"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> (<span class="keyword">int</span>)Mydate.Mon:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期一"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> (<span class="keyword">int</span>)Mydate.Tu:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期二"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> (<span class="keyword">int</span>)Mydate.Wen:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期三"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> (<span class="keyword">int</span>)Mydate.Thi:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期四"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> (<span class="keyword">int</span>)Mydate.Fri:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期五"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> (<span class="keyword">int</span>)Mydate.Sat:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期六"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">namespace CSharp枚举类型</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">enum</span> Mydate</span><br><span class="line">        &#123;</span><br><span class="line">            Sun,<span class="comment">// 这里逗号</span></span><br><span class="line">            Mon, </span><br><span class="line">            Tu,</span><br><span class="line">            Wen,</span><br><span class="line">            Thi,</span><br><span class="line">            Fri,</span><br><span class="line">            Sat</span><br><span class="line">        &#125; <span class="comment">// 这里没有分号</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Mydate d = (Mydate)DateTime.Now.DayOfWeek;</span><br><span class="line">            <span class="keyword">switch</span> (d) &#123;</span><br><span class="line">                <span class="keyword">case</span> Mydate.Sun:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期天"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Mydate.Mon:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期一"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Mydate.Tu:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期二"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Mydate.Wen:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期三"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Mydate.Thi:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期四"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Mydate.Fri:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期五"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Mydate.Sat:</span><br><span class="line">                    Console.WriteLine(<span class="string">"今天是星期六"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>参考：《入门到精通》 -&gt; P38<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;枚举类型是一种独特的值类型，它用于声明一组具有相同性质的常量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;在定义枚举类型时，如果不对其进行赋值，默认情况下，第一个枚举数的值为0，后面每个枚举数的值依次递增1。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# base 和 this 在构造函数中的运用</title>
    <link href="https://www.andyvj.com/2019/07/09/190709N03/"/>
    <id>https://www.andyvj.com/2019/07/09/190709N03/</id>
    <published>2019-07-09T05:57:30.000Z</published>
    <updated>2019-07-09T11:59:10.844Z</updated>
    
    <content type="html"><![CDATA[<p><code>public DerivedClass(): this (100){}</code>  // 像这样的构造函数。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Base用法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"基类，无参构造函数。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span>(<span class="params"><span class="keyword">int</span> pars</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"基类，带参数<span class="subst">&#123;pars&#125;</span>的构造函数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DerivedClass</span>(<span class="params"><span class="keyword">int</span> a</span>): <span class="title">base</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"派生类，带有一个参数的构造函数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DerivedClass</span>(<span class="params"></span>): <span class="title">this</span> (<span class="params"><span class="number">100</span></span>)  <span class="comment">// 实际上调用的是上面那个构造函数。没有上面的构造函数，这里的this(100)会出错。</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"派生类，没有参数的构造函数，但带this的构造函数。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DerivedClass</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>):<span class="title">base</span>(<span class="params">b</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"派生类，带有&#123;0&#125;的参数的构造函数。"</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DerivedClass test = <span class="keyword">new</span> DerivedClass(); <span class="comment">// 派生类，无参。带this。</span></span><br><span class="line">            Console.WriteLine(<span class="string">"========================"</span>);</span><br><span class="line">            DerivedClass test1 = <span class="keyword">new</span> DerivedClass(<span class="number">66</span>, <span class="number">88</span>);<span class="comment">// 派生类，常规参数。</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">基类，带参数100的构造函数</span><br><span class="line">派生类，带有一个参数的构造函数</span><br><span class="line">派生类，没有参数的构造函数，但带this的构造函数。</span><br><span class="line">========================</span><br><span class="line">基类，带参数88的构造函数</span><br><span class="line">派生类，带有66的参数的构造函数。</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>通过输出结果，可以很清楚的看到程序构造函数的执行前后顺序。</p><p><hr><br><span style="color:gray;font-size:12px"><br>还有：<br>1.<a href="https://www.andyvj.com/2019/07/09/190709N01/">link-01</a><br>2.<a href="https://www.andyvj.com/2019/07/09/190709N02/">link-02</a><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;public DerivedClass(): this (100){}&lt;/code&gt;  // 像这样的构造函数。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# base 调用基类方法</title>
    <link href="https://www.andyvj.com/2019/07/09/190709N02/"/>
    <id>https://www.andyvj.com/2019/07/09/190709N02/</id>
    <published>2019-07-09T05:53:23.000Z</published>
    <updated>2019-07-09T11:59:10.842Z</updated>
    
    <content type="html"><![CDATA[<p><code>base.TestInfo(); // 调用基类的方法。</code>像这样调用基类的方法。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Base用法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">TestInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"基类，虚函数…"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">TestInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.TestInfo(); <span class="comment">// 调用基类的方法。</span></span><br><span class="line">            Console.WriteLine(<span class="string">"派生类，重写…"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DerivedClass a = <span class="keyword">new</span> DerivedClass();</span><br><span class="line">            a.TestInfo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基类，虚函数…</span><br><span class="line">派生类，重写…</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>还有：<br>1.<a href="https://www.andyvj.com/2019/07/09/190709N01/">上一篇：base 访问构造函数</a><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;base.TestInfo(); // 调用基类的方法。&lt;/code&gt;像这样调用基类的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#  base 调用基类构造函数</title>
    <link href="https://www.andyvj.com/2019/07/09/190709N01/"/>
    <id>https://www.andyvj.com/2019/07/09/190709N01/</id>
    <published>2019-07-09T04:40:16.000Z</published>
    <updated>2019-07-09T11:59:10.838Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>1）在实例方法中，通过base关键字可以显示的访问子类对象中的非私有的父类成员。<br>2）调用父类的构造函数。在子类的构造函数的后面的base代表调用父类的构造函数。<br><a href="https://www.cnblogs.com/chenweifeng/p/4753421.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenweifeng/p/4753421.html</a></p></blockquote><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Base用法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"基类，无参数构造函数…"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span>(<span class="params"><span class="keyword">string</span> msg</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"基类，有参数<span class="subst">&#123;msg&#125;</span>构造函数…"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DerivedClass</span>: <span class="title">BaseClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DerivedClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"派生类，无参数构造函数…"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DerivedClass</span>(<span class="params"><span class="keyword">string</span> msg, <span class="keyword">string</span> msg1</span>):<span class="title">base</span> (<span class="params">msg</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"派生类，有参数<span class="subst">&#123;msg1&#125;</span>构造函数…"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DerivedClass a = <span class="keyword">new</span> DerivedClass();</span><br><span class="line">            Consoles.WriteLine(<span class="string">"============"</span>);</span><br><span class="line">            DerivedClass b = <span class="keyword">new</span> DerivedClass(<span class="string">"Andy"</span>, <span class="string">"Hu"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">基类，无参数构造函数…</span><br><span class="line">派生类，无参数构造函数…</span><br><span class="line">======================</span><br><span class="line">基类，有参数Andy构造函数…</span><br><span class="line">派生类，有参数Hu构造函数…</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>可见，先调用基类的构造函数，后调用继承类的构造函数。</p><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.cnblogs.com/AndyChen2015/p/7927575.html" target="_blank" rel="noopener">C# base和this的用法</a><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;1）在实例方法中，通过base关键字可以显示的访问子类对象中的非私有的父类成员。&lt;br&gt;2）调用父类的构造函数。在子类的构造函数的后面的base代表调用父类的构造函数。&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/chenweifeng/p/4753421.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/chenweifeng/p/4753421.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 属性</title>
    <link href="https://www.andyvj.com/2019/07/06/190706N01/"/>
    <id>https://www.andyvj.com/2019/07/06/190706N01/</id>
    <published>2019-07-06T05:55:46.000Z</published>
    <updated>2019-07-06T10:46:25.459Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 数据类型 属性名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> 变量名;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">        变量名 = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>访问修饰符用来确定属性的可用范围，下面介绍常用的几个访问修饰符。</p><p><code>public</code>：不限制对该属性的访问。<br><code>protected</code>：只能从其所在类和所在类的子类（派生类）进行访问。<br><code>internal</code>：只有其所在类才能访问。<br><code>private</code>：私有访问修饰符，只能在其声明类中使用。</p><p>换一种说法：</p><p><code>public</code>：对任何类和成员都公开，无限制访问；<br><code>protected</code>：仅仅对该类以及该类的派生类公开：<br><code>private</code>：仅仅对该类公开；<br><code>internal</code>：只能值包含该类的程序集中访问该类；  <span style="color:blue"><em>// 同一命名空间</em> </span><br><code>protected internal</code>：只能在本类，派生类或者包含该类的程序集中访问  </p><p>测试：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">PTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Program test = <span class="keyword">new</span> Program();</span><br><span class="line">        test.Day = <span class="number">5</span>;</span><br><span class="line">        Console.WriteLine(test.Day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Day &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> day;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; <span class="comment">// 只能传 0~8 的值</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">value</span> &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">value</span> &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                day = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line"></span><br><span class="line">如果超出范围，其输出的是默认值 0。</span><br></pre></td></tr></table></figure></p><p><hr><br><span style="color:gray;font-size:12px"><br>另外：<br>1.<a href="http://www.360doc.com/content/15/0813/14/26127157_491390317.shtml" target="_blank" rel="noopener">关于访问修饰符</a><br>2.<a href="https://blog.csdn.net/lym940928/article/details/79809769" target="_blank" rel="noopener">关于属性</a><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;访问修饰符 数据类型 属性名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; 变量名;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        变量名 = &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 命名空间</title>
    <link href="https://www.andyvj.com/2019/06/14/190614-01/"/>
    <id>https://www.andyvj.com/2019/06/14/190614-01/</id>
    <published>2019-06-14T15:00:56.000Z</published>
    <updated>2019-06-20T11:25:20.379Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个控制台应用程序，建立一个命名空间 N1，在命名空间 N1 中有一个类 A，在项目中使用 using 指令引入命名空间 N1，然后在命名空间 LianXi 中即可实例化命名空间 N1 中的类，此类中的 Myls 方法，代码如下。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> N1;  <span class="comment">// 引入命名空间，如果不引入 </span></span><br><span class="line">           <span class="comment">// 下面的 Mian 函数内的 A 类会报错报红。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">LianXi</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            A oa = <span class="keyword">new</span> A();</span><br><span class="line">            oa.Myls();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">N1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Myls</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"这是命名空间 N1 中的 Myls() 方法。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是命名空间 N1 中的 Myls() 方法。</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p><p><hr><br><span style="color:gray;font-size:12px"><br>笔记：<br>《C# 入门到精通》 P18。<br><!--1.[link-01]()2.[link-02]()3.[link-03]()4.[link-04]()5.[link-05]()--><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建一个控制台应用程序，建立一个命名空间 N1，在命名空间 N1 中有一个类 A，在项目中使用 using 指令引入命名空间 N1，然后在命名空间 LianXi 中即可实例化命名空间 N1 中的类，此类中的 Myls 方法，代码如下。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>英语口语｜不开心的时候就默念</title>
    <link href="https://www.andyvj.com/2019/04/16/190416-01/"/>
    <id>https://www.andyvj.com/2019/04/16/190416-01/</id>
    <published>2019-04-15T23:54:15.000Z</published>
    <updated>2019-05-08T12:44:27.615Z</updated>
    
    <content type="html"><![CDATA[<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=49493792&cid=86662748&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><a id="more"></a><ul><li>So, where’re you from?</li><li>Who cares? I can’t go back.</li><li>you’re an outcast(美 /‘aʊtkæst/adj. 被遗弃的；无家可归的；被逐出的). That great. So are we.</li><li>What’d you do, kid?</li><li>Something terrible.But I don’t want to talk about it.</li><li>Good! We don’t want to hear about it.</li><li>Come on, Timon. Anything we can do?</li><li>Not unless you can change the past.</li><li>You know, kid, in times like this, my buddy(美 /‘bʌdi/n. 伙伴，好朋友；)Timon here says, “You got to put your behind in your past.”</li><li>No, no, no..</li><li>I mean… -Amateur(美 /‘æmə.tʃʊr/n. 爱好者adj. 业余的).</li><li>Lie down before you hurt yourself.</li><li>It’s “You got to put your past behind you.”</li><li>Look, kid, bad things happen, and you can’t do anything about it, right?</li><li>Right.</li><li>Wrong!</li><li>When the world turns its back on you, you turn your back on the world.</li><li>Well, that’s not what I was taught(美 /tɔt/).</li><li>Then maybe you need a new lesson.</li><li>Repeat after me.</li><li>Hakuna matata.</li><li>What?</li><li>Hakuna matata </li><li>It means “No worries”.</li><li>Hakuna matata </li><li>What a wonderful phrase(美 /frez/n. 短语).</li><li>Hakuna matata </li><li>Ain’t(prep. 不是) no passing craze.</li><li>It means no worries.</li><li>For the rest of your days.</li><li>It’s our problem-free(一切顺利的) philosophy(英 /fɪ’lɒsəfɪ/n. 哲学；哲理；).</li><li>Hakuna matata</li><li>Hakuna matata?</li><li>Yeah, It’s our motto(美 /‘mɑto/n. 座右铭，).</li></ul><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://weibo.com/tv/v/FgA1W338j?fid=1034:2842570db38e192d32fad55f99501879" target="_blank" rel="noopener">原始地址。</a><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=49493792&amp;cid=86662748&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; style=&quot;position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="基础学科" scheme="https://www.andyvj.com/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="英语" scheme="https://www.andyvj.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语动词时态语态知识点详解</title>
    <link href="https://www.andyvj.com/2019/03/30/190330-01/"/>
    <id>https://www.andyvj.com/2019/03/30/190330-01/</id>
    <published>2019-03-30T02:06:55.000Z</published>
    <updated>2019-03-31T01:53:31.409Z</updated>
    
    <content type="html"><![CDATA[<p>汉语的时态大多是通过副词来表达的，而<strong>英语</strong>的时态是靠<strong>动词的变化和时间状语</strong>来表达的。英语中的时态共有十六种，但是常考的或较常用的只有 9 种，而且重点测试完成时态。要掌握英语的时态和语态，必须掌握好英语中的助动词(do, be, have)和时间状语这两个核心问题。</p><a id="more"></a><h1 id="一般现在时"><a href="#一般现在时" class="headerlink" title="一般现在时"></a>一般现在时</h1><p>主要用来表示人、事物的现在状况和特点；表示经常或习惯性的动作，句子中常有often, always, from time to time 等时间状语；表示客观规律和永恒真理等。</p><p>例句：</p><p>He usually goes to work at 7 o’clock every morning.<br>She has a brother who lives in New York.<br>The earth goes around the sun.<br>Guangzhou is situated in the south of China. </p><p>考点一：表示永恒的真理，即使出现在过去的语境中，仍用一般现在时。</p><p>I learned that the earth goes around the sun when I was in  primary<br>school.</p><p>考点二：在时间和条件状语从句中，代替一般将来时；常用的引导词有：</p><p>时间：when, until, after, before, as soon as, once, the moment/<br>the minute, the day; </p><p>条件：if, unless, provided.</p><p>If he accepts the job, he will get  more money soon.</p><p>考点三：在make sure (certain), see to it, mind, care, matter+宾语从句中，从句用一般现在时代替一般将来时。</p><p>So long as he works hard, I don’t mind when he  finishes the experiment.</p><p>只要他努力工作，我不介意他什么时候做完试验。</p><p>考点四：在the more… the more… (越……越……) 的句型中, 若主句是一般将来时, 从句通常用一般现在时。<br>The harder you study, the better results you will get.</p><h1 id="现在进行时"><a href="#现在进行时" class="headerlink" title="现在进行时"></a>现在进行时</h1><p>表说话时或目前一段时间内正在进行的活动：表感情色彩，加强语气。与频率副词，如always，constantly，continually，again等连用表示说话人的某种感情色彩（赞叹、厌烦、埋怨等）。</p><p>例句：</p><p>We are having English class.<br>The house is being  built these days.<br>The little boy is always making  trouble.</p><p>考点一：在时间状语或条件状语从句中表示将来正在进行的动作。　</p><p>Look out when you are crossing the street.<br>Don’t wake him up  if he is still sleeping at 7 tomorrow morning.</p><p>考点二：  表示在最近按计划或安排要进行的动作（这时多有表示将来的时间状语）。</p><p>Marry is leaving on Friday.</p><h1 id="现在完成时"><a href="#现在完成时" class="headerlink" title="现在完成时"></a>现在完成时</h1><p>表示动作发生在过去，完成在过去，但强调与现在情况仍有联系，其结果或影响仍存在。<br>现在完成时有一些标志性的时间状语</p><p>考点一：for + 时间段；since + 时间点</p><p>They have lived in Beijing for five years.<br>They  have lived in Beijing since 1995.<br>I have learned English for ten  years.  </p><p>考点二：常见的不确定的时间状语：lately; recently, just, already, yet,up to now; till now; so  far, these days,</p><p>Has it stopped raining yet ?</p><p>考点三：在表示“最近几世纪/ 年/ 月以来……”时间状语中，谓语动词用现在完成时。</p><p>in the past few years/months/weeks/days；over the past few years; during the last three months; for the  last few centuries, through centuries; throughout history 等</p><p>考点四：表示“第几次做某事，”或在 “It is the best (worst, most interesting ) +名词+that” 后面跟现在完成时。</p><p>This is my first time that I have visited China.<br>This is the most interesting film I have ever seen.<br>That is the only book that he has written.  </p><h1 id="一般过去时"><a href="#一般过去时" class="headerlink" title="一般过去时"></a>一般过去时</h1><p>表在过去某个特定时间发生且完成的动作，或过去习惯性动作，不强调对现在的影响，只说明过去。常跟明确的过去时间连用，</p><p>如：yesterday; last week; in 1945, at that time; once; during the  war;before; a few days ago; when</p><p>考点一：used to + do，表示过去经常但现在已不再维持的习惯动作。</p><p>to为不定式，后接动词原形。<br>be/become/get used to + doing，表示习惯于。<br>He used to smoke a lot.<br>He has got used to getting up  early.  </p><p>考点二：在时间和条件状语从句中，代替过去将来时。 </p><p>He promised to buy me a computer if he got a raise.  </p><h1 id="过去进行时"><a href="#过去进行时" class="headerlink" title="过去进行时"></a>过去进行时</h1><p>表示过去某个时间点或某段时间内正在发生的动作。</p><p>例句：  </p><p>The boy was doing his homework when his father came back from work.<br>He was taking a walk leisurely by the lake when he heard someone shouted for help.<br>What were you doing at nine last  night?<br>The radio was being repaired when you called me.  </p><h1 id="过去完成时"><a href="#过去完成时" class="headerlink" title="过去完成时"></a>过去完成时</h1><p>表示过去某个时间之前已经完成的动作，即过去完成时的动作发生在“过去的过去”，句中有明显的参照动作或时间状语，这种时态从来不孤立使用 ( before, after, by, up till )</p><p>例句：</p><p>There had been 25 parks  in our city up till 2000.<br>By the end of last term we had finished the  book.<br>They finished earlier than we had expected.  </p><p>考点一：用于hardly/scarcely…when; no sooner …than 句型中，主句用过去完成时，从句用一般过去时。</p><p>I had hardly finished my work when he came to see me.<br>I had no sooner got into the room than it began to snow.<br>No sooner had I arrived home than the telephone rang. （注意主谓倒装）</p><p>考点二：表示“第几次做某事”，主句用过去时，从句用过去完成时。</p><p>That was the second time that she had seen her  grandfather.<br>It was three years since we had parted.</p><p>考点三：动词hope, expect, think, intend, mean, want, suppose, plan用过去完成时，表示未实现的愿望、打算和意图。</p><p>I had hoped that I could do the job.<br>I had intended to see you but I was too busy.</p><h1 id="一般将来时"><a href="#一般将来时" class="headerlink" title="一般将来时"></a>一般将来时</h1><p>表在将来某个时间会发生的动作或情况。常和tomorrow, next year, in 2008等表示将来的时间状语连用，其表现形式多达5种。</p><p>例句：</p><p>Beijing will host the 29th Olympic Games in 2008.</p><p>考点一：一般将来时总是用在一些时间状语从句或条件状语从句的主句中</p><p>We will begin our class as soon as the teacher  comes.</p><p>（主句用一般将来时，从句中一定要用一般现在时替代一般将来时。）</p><p>考点二：某些表示短暂性动作的动词如arrive, come, go, leave, start等，用现在进行时形式表示将来。</p><p>I am leaving for Beijing tomorrow.</p><p>考点三：“祈使句  + and/or + 句子”，这种结构中and后面的句子谓语用一般将来时。</p><p>Use your head and you will find a way.</p><p>考点四：“am (is, are) going to + 动词原形”表示打算要做的事或可能要发生的事。</p><p>“am (is, are) about to +动词原形”表示按照预定计划或打算准备着手进行的动作。<br>“am (is, are) to + 动词原形”表示必须、必然或计划将要做的事。<br>They are to be married in this May.  </p><h1 id="将来进行时"><a href="#将来进行时" class="headerlink" title="将来进行时"></a>将来进行时</h1><p>表将来某个时间正在发生的动作，或按计划一定会发生的事情。</p><p>例句：</p><p>I’ll be doing my homework this time tomorrow.<br>The President will be meeting the foreign delegation at the airport.  </p><h1 id="将来完成时"><a href="#将来完成时" class="headerlink" title="将来完成时"></a>将来完成时</h1><p>表在将来某时刻之前业已完成的事情，时间状语非常明显。</p><p>考点一：常用的时间状语一般用by+将来的时间。</p><p>如：by the end of this year, by 8 o’clock this evening, by March next<br>year以及由by the time…, before或when等引导的副词从句。<br>By the end of next month, he will have traveled 1000 miles on foot.<br>By the time you reach the station, the train will have left.<br>By next Tuesday, I will have got ready for the exams.  </p><p>考点二：在时间和条件状语从句中，将来完成时则由现在完成时表示。</p><p>The children will do their homework the moment they have arrived back from school.  </p><h1 id="动词的语态"><a href="#动词的语态" class="headerlink" title="动词的语态"></a>动词的语态</h1><p>一般用于强调受者，  做题时谓语动词不再有名词或宾语。动词的语态一般不单独考，而是和时态、语气和非谓语动词一起考。</p><p>考点一：不能用于被动语态的动词和词组</p><p>come true, consist of, take place, happen, become,  rise, occur, belong, break out, appear, arrive, die, fall, last, exist, fail, succeed</p><p>例句：</p><p>It took place before liberation.</p><p>考点二：下列动词的主动语态表示被动意义, 而且常与well, quite, easily, badly等副词连用。</p><p>lock ( 锁  ) ; wash ( 洗  ); sell ( 卖  ); read ( 读  ); wear ( 穿  );<br>blame (责备)；ride (乘坐)；write ( 写  )；<br>Glass breaks easily. 玻璃容易破碎。<br>The car rides smoothly. 这车走起来很稳。<br>The case locks easily. 这箱子很好锁。<br>The book sells well. 这本书很畅销。  </p><p>考点三：一些常用经典被动句型：</p><p>It is said…,  It is reported…, It is widely  believed…, It is expected…, It is estimated…,<br>这些句子一般翻译为“据说……”，“人们认为……”，而  “以前人们认为……” 则应该说：It was believed…, It was thought …</p><p><hr><br><span style="color:gray;font-size:12px"><br>转载：<br>1.<a href="https://mp.weixin.qq.com/s/RrBxqXG2vaxX-VhEM_V10w" target="_blank" rel="noopener">高中英语动词时态语态知识点详解</a><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;汉语的时态大多是通过副词来表达的，而&lt;strong&gt;英语&lt;/strong&gt;的时态是靠&lt;strong&gt;动词的变化和时间状语&lt;/strong&gt;来表达的。英语中的时态共有十六种，但是常考的或较常用的只有 9 种，而且重点测试完成时态。要掌握英语的时态和语态，必须掌握好英语中的助动词(do, be, have)和时间状语这两个核心问题。&lt;/p&gt;
    
    </summary>
    
      <category term="基础学科" scheme="https://www.andyvj.com/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="英语" scheme="https://www.andyvj.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语八大时态</title>
    <link href="https://www.andyvj.com/2019/03/29/190329-01/"/>
    <id>https://www.andyvj.com/2019/03/29/190329-01/</id>
    <published>2019-03-29T12:52:28.000Z</published>
    <updated>2019-03-29T13:27:46.955Z</updated>
    
    <content type="html"><![CDATA[<p>初中英语8大时态总结:</p><a id="more"></a><h2 id="一般现在时"><a href="#一般现在时" class="headerlink" title="一般现在时"></a>一般现在时</h2><p>　　</p><p>1.概念：经常、反复发生的动作或行为及现在的某种状况。</p><p>2.基本结构：①is/am/are;②do/does</p><p>否定形式：①am/is/are + not; ②此时态的谓语动词若为行为动词，则在其前加don‘t，如主语为第三人称单数，则用doesn’t，同时还原行为动词。</p><p>3.一般疑问句：①把is/am/are动词放于句首;②用助动词do提问，如主语为第三人称单数，则用does，同时，还原行为动词。</p><p>4.用法</p><p>1) 经常性或习惯性的动作，常与表示频度的时间状语连用。</p><p>例如：I leave home for school at 7 every morning。 每天早上我七点离开家。</p><p>2) 客观真理，客观存在，科学事实。</p><p>例如：The earth moves around the sun。 地球绕太阳转动。</p><p>Shanghai lies in the east of China。 上海位于中国东部。</p><p>3) 表示格言或警句。</p><p>例如：Pride goes before a fall。 骄者必败。</p><p>注意：此用法如果出现在宾语从句中，即使主句是过去时，从句谓语也要用一般现在时。</p><p>例如：Columbus proved that the earth is round。 哥伦布证实了地球是圆的。</p><p>4) 现在时刻的状态、能力、性格、个性。</p><p>例如：I don‘t want so much。 我不要那么多。</p><p>Ann writes good English but does not speak well。安英语写得不错，讲的可不行。　　</p><p>5) 一般现在时表示将来含义</p><p>a.下列动词come， go， arrive， leave， start， begin， return的一般现在时可以表示将来，主要用来表示在时间上已确定或安排好的事情。</p><p>例如：The train leaves at six tomorrow morning。 火车明天上午六点开。</p><p>When does the bus star? It stars in ten minutes。 汽车什么时候开?十分钟后。</p><p>b.在时间或条件句中。</p><p>例如：When Bill comes (不是will come)， ask him to wait for me。 比尔来后，让他等我。</p><p>I‘ll write to you as soon as I arrive there。 我到了那里，就写信给你。</p><h2 id="一般过去时"><a href="#一般过去时" class="headerlink" title="一般过去时　　"></a>一般过去时　　</h2><p>1.概念：过去某个时间里发生的动作或状态;过去习惯性、经常性的动作、行为。</p><p>2.基本结构：</p><p>①was/were;②行为动词过去式</p><p>否定形式：<br>①was/were + not;②在行为动词前加didn‘t，同时还原行为动词。</p><p>一般疑问句：<br>①was或were放于句首;②用助动词do的过去式did 提问，同时还原行为动词。　　</p><p>3.用法</p><p>1) 在确定的过去时间里所发生的动作或存在的状态。</p><p>时间状语有：yesterday， last week， an hour ago， the other day， in 1982等。</p><p>例如：Where did you go just now? 刚才你上哪儿去了?</p><p>2) 表示在过去一段时间内，经常性或习惯性的动作。</p><p>例如：When I was a child， I often played football in the street。</p><p>我是个孩子的时候，常在马路上踢足球。</p><p>Whenever the Browns went during their visit， they were given a warm welcome。</p><p>那时，布朗一家无论什么时候去，都受到热烈欢迎。</p><p>注意：used to + do：“过去常常”表示过去习惯性的动作或状态，但如今已不存在。</p><p>例如：Mother used not to be so forgetful。 老妈过去没那么健忘。</p><p>Scarf used to take a walk。 斯卡夫过去常常散步。　</p><h2 id="现在进行时"><a href="#现在进行时" class="headerlink" title="现在进行时"></a>现在进行时</h2><p>1.概念：表示现阶段或说话时正在进行的动作及行为。</p><p>2.时间状语：now， at this time， these days， etc。</p><p>3.基本结构：</p><p>am/is/are + doing</p><p>否定形式：am/is/are + not + doing。</p><p>一般疑问句：把be动词放于句首。</p><p>4.用法：</p><p>1) 表示现在(指说话人说话时)正在发生的事情。</p><p>例如： We are waiting for you。 我们正在等你。</p><p>2) 习惯进行：表示长期的或重复性的动作，说话时动作未必正在进行。</p><p>例如：</p><p>Mr。 Green is writing another novel。 他在写另一部小说。(说话时并未在写，只处于写作的状态。)</p><p>3) 表示渐变，这样的动词有：get， grow， become， turn， run， go， begin等。</p><p>例如：</p><p>The leaves are turning red。 叶子在变红。</p><p>It‘s getting warmer and warmer。 天越来越热了。</p><p>4) 与always， constantly， forever 等词连用，表示反复发生的动作或持续存在的状态，往往带有说话人的主观色彩。</p><p>例如：</p><p>You are always changing your mind。 你老是改变主意。</p><p>5) 用现在进行时表示将来</p><p>下列动词come， go， arrive， leave， start， begin， return等瞬时动词的现在进行时可以表示将来。</p><p>例如：</p><p>I‘m leaving tomorrow。 明天我要走了。</p><p>Are you staying here till next week? 你会在这儿呆到下周吗? </p><h2 id="过去进行时"><a href="#过去进行时" class="headerlink" title="过去进行时"></a>过去进行时</h2><p>1.概念：表示过去某段时间或某一时刻正在发生或进行的行为或动作。</p><p>My brother fell while he was riding his bicycle and hurt himself。</p><p>我兄弟骑车时摔了下来，受了伤。</p><p>When I got to the top of the mountain， the sun was shining。</p><p>我到达山顶时，阳光灿烂。</p><p>2.时间状语：at this time yesterday， at that time或以when引导的谓语动词是一般过去时的时间状语等。</p><p>3.基本结构：</p><p>was/were + doing</p><p>否定形式：was/were + not + doing。</p><p>一般疑问句：把was或were放于句首。</p><p>4.用法</p><p>1) 过去进行时表示过去某段时间内持续进行的动作或者事情。</p><p>We were watching TV from seven to nine last night。</p><p>昨天晚上七点到九点的时候我们在看电视。</p><p>2) 过去进行时可以表示在过去某个时间点发生的事情。</p><p>时间点可以用介词短语、副词或从句来表示。</p><p>What was she doing at nine o‘clock yesterday?</p><p>昨天晚上九点她在做什么? (介词短语表示时间点)</p><p>She was doing her homework then。</p><p>那个时候她正在写作业。(副词表示时间点)</p><p>When I saw him he was decorating his room。</p><p>当我看见他的时候他正在装饰房间。 (when从句表示时间点)</p><p>3) 在复合句中，如果主要动作和背景动作都是延续的或同时发生的，那么主从句的动词都可用过去进行时。</p><p>When he was waiting for the bus， he was reading a newspaper。</p><p>他边等车边看报。 (两个动作都是延续的)</p><p>He was cleaning his car while I was cooking。</p><p>他擦车时我在做饭。(两个动作同时进行)</p><h2 id="一般将来时"><a href="#一般将来时" class="headerlink" title="一般将来时"></a>一般将来时</h2><p>1.概念：表示将要发生的动作或存在的状态及打算、计划或准备做某事。</p><p>2.时间状语：tomorrow， next day(week， month， year)，soon， in a few minutes， by the day after tomorrow， etc。</p><p>3.基本结构：</p><p>①am/is/are/going to + do;</p><p>②will + do。</p><p>否定形式：①am/is/are + not + going to + do</p><p>②will not(won‘t)+ do。</p><p>一般疑问句：①am/is/are放于句首;</p><p>②will提到句首。　　</p><p>4.will主要用于在以下三个方面：</p><p>1) 表示主观意愿的将来。</p><p>They will go to visit the factory tomorrow。</p><p>明天他们将去厂参观工厂。</p><p>I‘ll come with Wang Bing， Liu Tao and Yang Ling。</p><p>我将和王兵、刘涛、杨玲一起来。</p><p>2) 表示不以人的意志为转移的客观的将来。</p><p>Today is Saturday。 Tomorrow will be Sunday。</p><p>今天是星期六。明天是(将)是星期日。</p><p>He will be thirty years old this time next year。</p><p>明年这个时候他就(将)三十岁。</p><p>3) 表示临时决定，通常用于对话中。</p><p>—Mary has been ill for a week。</p><p>  玛丽病了一周了。</p><p>—Oh， I didn‘t know。 I will go and see her。</p><p>　噢，我不知道。我去看看她。</p><p>5.be going to主要用于一下两个方面：</p><p>1) 表示事先经过考虑、安排好打算、计划要做某事。</p><p>Dad and I are going to watch an opera this afternoon。</p><p>今天下午我和爸爸打算去看歌剧。</p><p>2) 表示根据目前某种迹象判断，某事非常有可能发生，表示推测。</p><p>Look! There come the dark clouds。 It is going to rain。</p><p>瞧!乌云密集。天要下雨了。</p><h2 id="过去将来时"><a href="#过去将来时" class="headerlink" title="过去将来时"></a>过去将来时</h2><p>1.概念：立足于过去某一时刻，从过去看将来，常用于宾语从句中。</p><p>2.时间状语：the next day(morning， year)，the following month(week)，etc。</p><p>3.基本结构：</p><p>①was/were/going to + do;</p><p>②would + do。</p><p>否定形式：①was/were/not + going to + do;②would + not + do。</p><p>一般疑问句：①was或were放于句首;②would 提到句首。　　</p><p>4.用法</p><p>1) “would+动词原形”常表示主观意愿的将来。例如：</p><p>He said he would come to see me。</p><p>他说他要来看我。</p><p>He told me he would go to Beijing。</p><p>他告诉我他将去北京。</p><p>2) “was/ were + going to + 动词原形”常表示按计划或安排即将发生的事。例如：</p><p>She said she was going to start off at once。</p><p>她说她将立即出发。</p><p>I was told that he was going to return home。</p><p>有人告诉我他准备回家。</p><p>此结构还可表示根据某种迹象来看，很可能或即将发生的事情。例如：</p><p>It seemed as if it was going to rain。</p><p>看来好像要下雨。</p><p>3) come， go， leave， arrive， start等瞬时动词动词可用过去进行时表示过去将来的含义。例如：</p><p>He said the train was leaving at six the next morning。</p><p>他说火车将于第二天早晨六点离开。</p><p>She told me she was coming to see me。</p><p>她告诉我她要来看我。　　</p><h2 id="现在完成时"><a href="#现在完成时" class="headerlink" title="现在完成时"></a>现在完成时</h2><p>1.概念：过去发生或已经完成的动作对现在造成的影响或结果，或从过去已经开始，持续到现在并且有可能继续下去的动作或状态。</p><p>2.时间状语：recently， lately， since， for， in the past few years， etc。</p><p>3.基本结构：have/has + done</p><p>否定形式：have/has + not +done。</p><p>一般疑问句：have或has。</p><p>4.since的三种用法</p><p>1) since +过去一个时间点(如具体的年、月、日期、钟点、1980， last month， half past six)。</p><p>例如：I have been here since 1989。 1989起，我一直在这儿。</p><p>2) since +一段时间+ ago。</p><p>例如：I have been here since five months ago。 我在这儿，已经有五个月了。</p><p>3) since +从句(一般过去时)。</p><p>例如：Great changes have taken place since you left。 你走后，变化可大了。</p><p>比较since和for</p><p>since 用来说明动作起始时间，for用来说明动作延续时间长度。</p><p>例如：I have lived here for more than twenty years。我住在这儿二十多年了。</p><p>注意：并非有for 作为时间状语的句子都用现在完成时。</p><p>I worked here for more than twenty years。 (我现在已不在这里工作。)　　</p><h2 id="过去完成时"><a href="#过去完成时" class="headerlink" title="过去完成时"></a>过去完成时</h2><p>1.概念：以过去某个时间为标准，在此以前发生的动作或行为，或在过去某动作之前完成的行为，即“过去的过去”。</p><p>2.时间状语：before， by the end of last year(term， month)，etc。</p><p>3.基本结构：had + done。</p><p>否定形式：had + not + done。</p><p>一般疑问句：had放于句首。</p><p>4.用法</p><p>1) 在told， said， knew， heard， thought等动词后的宾语从句种。</p><p>例如：She said (that)she had never been to Paris。 她告诉我她曾去过巴黎。</p><p>2) 在过去不同时间发生的两个动作中，发生在先，用过去完成时;发生在后，用一般过去时。</p><p>例如：When the police arrived， the thieves had run away。 警察到达时，小偷们早就跑了。</p><p>3) 表示意向的动词，如hope， wish， expect， think， intend， mean，</p><p>suppose等，用过去完成时表示“原本…，未能…”。</p><p>例如：We had hoped that you would come， but you didn‘t。 那时我们希望你能来，但是你没有来。</p><p>注意： had hardly… when。。。 刚。。。。。。就。。。。。。。</p><p>例如：I had hardly opened the door when I he hit me。 我刚打开门，他就打了我。</p><p>had no sooner…than 刚…… 就……。</p><p>例如：He had no sooner bought the car than he sold it。 他刚买了这辆车，转眼又卖了。</p><p><hr><br><span style="color:gray;font-size:12px"><br>转载：1.<a href="https://mp.weixin.qq.com/s/fDAoyDBsh29N6dcIF7ekow" target="_blank" rel="noopener">初中英语语法八大时态总结</a><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初中英语8大时态总结:&lt;/p&gt;
    
    </summary>
    
      <category term="基础学科" scheme="https://www.andyvj.com/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="英语" scheme="https://www.andyvj.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
</feed>
