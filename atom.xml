<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡文杰</title>
  
  <subtitle>专业道路上的自我修养</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.huvjie.com/"/>
  <updated>2020-11-21T14:04:15.314Z</updated>
  <id>https://blog.huvjie.com/</id>
  
  <author>
    <name>huvjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理一下后面的思路</title>
    <link href="https://blog.huvjie.com/2021/12/31/201121N01/"/>
    <id>https://blog.huvjie.com/2021/12/31/201121N01/</id>
    <published>2021-12-31T02:22:00.000Z</published>
    <updated>2020-11-21T14:04:15.314Z</updated>
    
    <content type="html"><![CDATA[<p>理一下接下来的思路。首先，最重要和迫切的是加强提高业务层面“体力活”部分的熟练、效率。后面的整体方向：</p><ol><li>以 C# 技术栈为中心；</li><li>以工业视觉为技术核心；</li><li>加强英语和数学。</li></ol><a id="more"></a><h1 id="以-C-技术栈为中心"><a href="#以-C-技术栈为中心" class="headerlink" title="以 C# 技术栈为中心"></a>以 C# 技术栈为中心</h1><p>C# 是工控行业的主力语言，桌面程序为主，Windows 平台，开发容易且效率高。我们的主要精力点不应该局限于语言，而是以语言为工具载体展开的知识体系。行业内的另一大开发语言是 C++，之前用 MFC，现在应该是 Qt。<em>自己不要花精力刻意去学习Qt</em>，不要把时间和精力分散了，集中精力把 C# 技术栈深入一下。业务方面的体力活部分要做到很熟练，这样效率才能高；现在用的是 Winform 开发界面，其实可以学习一下 WPF，也可以了解下 Web 方面的知识。软件的架构设计，开发模式，面向对象的设计和分析(UML)等，也要有一定的能力。数据库方面的使用。</p><h1 id="以工业视觉为技术核心"><a href="#以工业视觉为技术核心" class="headerlink" title="以工业视觉为技术核心"></a>以工业视觉为技术核心</h1><p>我觉得工控控制的核心技术应该在工业视觉这里，这里的算法部分逃不过<code>C/C++</code>了，这里的<code>C/C++</code>语言部分应该是一个被动技能，不要刻意的深入到语言里面去，那是个复杂的无底洞，应该在学习过程中需要什么再去学习什么。这里我给自己定了两个方向。</p><ol><li>Halcon；// 行业能用的最多的算法包</li><li>OpenCV；// 开源，图像处理算法肯定要学的。</li><li>MIL；   // 公司用这个，但互联网上找不到太多资料，在工作中学习吧，不做主要。</li></ol><p>另外，有时间学下 Python。至于，什么深度学习，人工智能啥的，太高端，后面再说。</p><h1 id="加强英语和数学"><a href="#加强英语和数学" class="headerlink" title="加强英语和数学"></a>加强英语和数学</h1><p>英语和数学，这一点不用多说。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;理一下接下来的思路。首先，最重要和迫切的是加强提高业务层面“体力活”部分的熟练、效率。后面的整体方向：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以 C# 技术栈为中心；&lt;/li&gt;
&lt;li&gt;以工业视觉为技术核心；&lt;/li&gt;
&lt;li&gt;加强英语和数学。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>接下来一段时间内的自我构建的步骤</title>
    <link href="https://blog.huvjie.com/2020/11/27/201127N01/"/>
    <id>https://blog.huvjie.com/2020/11/27/201127N01/</id>
    <published>2020-11-27T02:22:00.000Z</published>
    <updated>2020-11-27T12:41:10.491Z</updated>
    
    <content type="html"><![CDATA[<p>每个人关注的都是自己的利益，切勿把希望寄托于他人身上，万事得靠自己。</p><a id="more"></a><p>现在的人，大家都在说战略，说战术。我也来说下接下来自己的战术层面，如何自我构建到行业内一般水平。</p><p>对现在开发的这个机型：</p><p><strong>一、先用现成的 DLL 自己全部实现一遍软件。</strong></p><p><strong>二、自己用源码实现一遍软件。</strong></p><p><strong>三、整理好自己的类库。</strong></p><p>把这三个步骤搞下来，应该能出师了。构建起了自己的知识体系。<strong>天下无易事，无非熟能生巧罢了。</strong>方向定下来，坚持下去，反复折腾。</p><p>当软件层面达到一般水平后，再提高一把硬件到一般水平。这样应该可以算完全出师了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个人关注的都是自己的利益，切勿把希望寄托于他人身上，万事得靠自己。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://blog.huvjie.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="点滴" scheme="https://blog.huvjie.com/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Xml 简单序列化和返序列化</title>
    <link href="https://blog.huvjie.com/2020/11/27/201127N02/"/>
    <id>https://blog.huvjie.com/2020/11/27/201127N02/</id>
    <published>2020-11-27T02:22:00.000Z</published>
    <updated>2020-11-27T14:08:14.212Z</updated>
    
    <content type="html"><![CDATA[<p><code>结构体</code>和<code>类</code>都能进行 xml 的序列化和反序列化。</p><a id="more"></a><p>必须包含的命名空间：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br></pre></td></tr></table></figure><h1 id="基本的序列化"><a href="#基本的序列化" class="headerlink" title="基本的序列化"></a>基本的序列化</h1><p>这里以<code>结构体</code>类型为例 ：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Student</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="keyword">string</span> name, <span class="keyword">int</span> age</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">        <span class="keyword">this</span>.Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里访问类型必须要<code>public</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">XmlSerializerHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">XmlSerial</span>(<span class="params"><span class="keyword">object</span> obj, <span class="keyword">string</span> xmlFile</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            XmlWriterSettings setting = <span class="keyword">new</span> XmlWriterSettings() &#123;</span><br><span class="line">                Encoding = <span class="keyword">new</span> UTF8Encoding(<span class="literal">false</span>),</span><br><span class="line">                Indent = <span class="literal">true</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">using</span> (XmlWriter writer = XmlWriter.Create(ms, setting))</span><br><span class="line">            &#123;</span><br><span class="line">                XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(obj.GetType());</span><br><span class="line">                <span class="comment">// 去掉命名空间</span></span><br><span class="line">                XmlSerializerNamespaces ns = <span class="keyword">new</span> XmlSerializerNamespaces();</span><br><span class="line">                ns.Add(<span class="string">""</span>, <span class="string">""</span>); <span class="comment">// 命名空间赋值为空</span></span><br><span class="line">                xmlSerializer.Serialize(writer, obj, ns);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 用StreamWriter </span></span><br><span class="line">                <span class="keyword">string</span> xmlContent = Encoding.UTF8.GetString(ms.ToArray()); <span class="comment">// 转成字符转</span></span><br><span class="line">                StreamWriter streamWriter = <span class="keyword">new</span> StreamWriter(xmlFile);</span><br><span class="line">                streamWriter.Write(xmlContent);</span><br><span class="line">                streamWriter.Close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">object</span> <span class="title">XmlDeserial</span>(<span class="params"><span class="keyword">object</span> obj, <span class="keyword">string</span> xmlFile</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 用 MemoryStream</span></span><br><span class="line">        <span class="keyword">string</span> xmlString = File.ReadAllText(xmlFile); <span class="comment">// xml 内容提取出来</span></span><br><span class="line">        <span class="keyword">using</span> (MemoryStream MS = <span class="keyword">new</span> MemoryStream(Encoding.UTF8.GetBytes(xmlString)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (XmlReader xr = XmlReader.Create(MS))</span><br><span class="line">            &#123;</span><br><span class="line">                XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(obj.GetType());</span><br><span class="line">                obj = xmlSerializer.Deserialize(xr);  <span class="comment">// 不要误写为 MS 流，有这个重载不会报错。但运行有错。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;          </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student() &#123; Name = <span class="string">"毛泽东"</span>, Age = <span class="number">18</span> &#125;;</span><br><span class="line"></span><br><span class="line">        XmlSerializerHelper xmlSerializerHelper = <span class="keyword">new</span> XmlSerializerHelper();</span><br><span class="line">        xmlSerializerHelper.XmlSerial(student, <span class="string">"Student.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出，没什么问题：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Name</span>&gt;</span>毛泽东<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="简单反序列化"><a href="#简单反序列化" class="headerlink" title="简单反序列化"></a>简单反序列化</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        XmlSerializerHelper xmlSerializerHelper = <span class="keyword">new</span> XmlSerializerHelper();</span><br><span class="line"></span><br><span class="line">        Student stu;</span><br><span class="line">        stu = (Student)xmlSerializerHelper.XmlDeserial(<span class="keyword">new</span> Student(), <span class="string">"Student.xml"</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"Name = &#123;0&#125;\nAgre = &#123;1&#125;"</span>, stu.Name, stu.Age);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出，没什么问题：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name = 毛泽东</span><br><span class="line">Agre = 18</span><br></pre></td></tr></table></figure><h1 id="测试一下嵌套序列化"><a href="#测试一下嵌套序列化" class="headerlink" title="测试一下嵌套序列化"></a>测试一下嵌套序列化</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Student</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OtherInfo OtherInfo;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> OtherInfo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Birth;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Alisa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        OtherInfo otherInfo = <span class="keyword">new</span> OtherInfo() &#123; Birth = <span class="number">1893</span>, Alisa = <span class="string">"毛润之"</span>&#125;;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student() &#123; Name = <span class="string">"毛泽东"</span>, Age = <span class="number">18</span>, OtherInfo = otherInfo &#125;;</span><br><span class="line"></span><br><span class="line">        XmlSerializerHelper xmlSerializerHelper = <span class="keyword">new</span> XmlSerializerHelper();</span><br><span class="line">        xmlSerializerHelper.XmlSerial(student, <span class="string">"Student.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Name</span>&gt;</span>毛泽东<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">OtherInfo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Birth</span>&gt;</span>1893<span class="tag">&lt;/<span class="name">Birth</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Alisa</span>&gt;</span>毛润之<span class="tag">&lt;/<span class="name">Alisa</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">OtherInfo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="测试下如果引用变量为null的情况"><a href="#测试下如果引用变量为null的情况" class="headerlink" title="测试下如果引用变量为null的情况"></a>测试下如果引用变量为null的情况</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student() ;</span><br><span class="line"></span><br><span class="line">        XmlSerializerHelper xmlSerializerHelper = <span class="keyword">new</span> XmlSerializerHelper();</span><br><span class="line">        xmlSerializerHelper.XmlSerial(student, <span class="string">"Student.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;Student&gt;</span><br><span class="line">  &lt;Age&gt;<span class="number">0</span>&lt;/Age&gt;</span><br><span class="line">  &lt;OtherInfo&gt;</span><br><span class="line">    &lt;Birth&gt;<span class="number">0</span>&lt;/Birth&gt;</span><br><span class="line">  &lt;/OtherInfo&gt;</span><br><span class="line">&lt;/Student&gt;</span><br></pre></td></tr></table></figure><p><strong>可见，null值不进行序列化，int类型会默认为0，所以存在。</strong></p><p>把<code>struct</code>改成<code>class</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OtherInfo OtherInfo;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OtherInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Birth;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Alisa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Age</span>&gt;</span>0<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>class</code>为引用类型，为 <code>null</code> 没输出了。</p><h1 id="数组的序列化"><a href="#数组的序列化" class="headerlink" title="数组的序列化"></a>数组的序列化</h1><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Sex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlElement(<span class="meta-string">"Dog"</span>)</span>] <span class="comment">// 不要“再包一层”</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dog&gt; Dog &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Good &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"100"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> valuePrivate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        List&lt;Dog&gt; dogs = <span class="keyword">new</span> List&lt;Dog&gt; &#123;</span><br><span class="line">            <span class="keyword">new</span> Dog() &#123; Name = <span class="string">"小黑"</span>, Age = <span class="number">9</span> &#125;,</span><br><span class="line">            <span class="keyword">new</span> Dog() &#123; Name = <span class="string">"小黄"</span>, Age = <span class="number">10</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">            Name = <span class="string">"孙悟空"</span>,</span><br><span class="line">            Age = <span class="number">500</span>,</span><br><span class="line">            Sex = <span class="string">"男"</span>,</span><br><span class="line">            Dog = dogs</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        XmlSerializerHelper xmlSerializerHelper = <span class="keyword">new</span> XmlSerializerHelper();</span><br><span class="line">        xmlSerializerHelper.XmlSerial(person, <span class="string">"Person.xml"</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Age</span>&gt;</span>500<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">Sex</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Dog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>小黑<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>9<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Dog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Dog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>小黄<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>10<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Dog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Good</span>&gt;</span>100<span class="tag">&lt;/<span class="name">Good</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可见：</p><ol><li><strong>数组如果不要再包一层，<code>[XmlElement(&quot;Dog&quot;)] // 不要“再包一层”</code>显示的命名个节点。不然输出如下：</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Age</span>&gt;</span>500<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">Sex</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Dog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Dog</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>小黑<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Age</span>&gt;</span>9<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Dog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Dog</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>小黄<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Age</span>&gt;</span>10<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Dog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Dog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Good</span>&gt;</span>100<span class="tag">&lt;/<span class="name">Good</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Dog</code> 数组外面包了一层<code>&lt;Dog&gt;</code>。</p><ol start="2"><li><code>private string valuePrivate { get; set; } = &quot;0&quot;;</code>私有成员没有被序列化。</li></ol><hr><div style="font-size:12px">参考：<br><a href="https://www.cnblogs.com/guogangj/p/7489218.html" target="_blank" rel="noopener">https://www.cnblogs.com/guogangj/p/7489218.html</a><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;结构体&lt;/code&gt;和&lt;code&gt;类&lt;/code&gt;都能进行 xml 的序列化和反序列化。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#｜匿名类初识</title>
    <link href="https://blog.huvjie.com/2020/11/26/201126N02/"/>
    <id>https://blog.huvjie.com/2020/11/26/201126N02/</id>
    <published>2020-11-26T02:22:00.000Z</published>
    <updated>2020-11-26T12:11:57.745Z</updated>
    
    <content type="html"><![CDATA[<p>之前的这篇<a href="https://blog.huvjie.com/2020/06/01/200601N01/">https://blog.huvjie.com/2020/06/01/200601N01/</a>，是不是也是匿名类？对这个知识点还没有什么认识，初识一下。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Student = <span class="keyword">new</span> &#123; Name = <span class="string">"XiaoFang"</span>, Age = <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"Name:&#123;0&#125; Age:&#123;1&#125;"</span>, Student.Name, Student.Age);</span><br><span class="line"></span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name:XiaoFang Age:10</span><br></pre></td></tr></table></figure><p>另外，<code>投影初始化语句</code>可以查看《图解教程》P355页。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的这篇&lt;a href=&quot;https://blog.huvjie.com/2020/06/01/200601N01/&quot;&gt;https://blog.huvjie.com/2020/06/01/200601N01/&lt;/a&gt;，是不是也是匿名类？对这个知识点还没有什么认识，初识一下。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 好像没有类似 C++ 的 const 形参</title>
    <link href="https://blog.huvjie.com/2020/11/26/201126N01/"/>
    <id>https://blog.huvjie.com/2020/11/26/201126N01/</id>
    <published>2020-11-26T02:22:00.000Z</published>
    <updated>2020-11-26T12:18:49.553Z</updated>
    
    <content type="html"><![CDATA[<p>这里只针对引用参数来说(非string类型)。我们能限制的只是引用的指向不能更改，而引用指向的内存值是可以修改的。<span style="color:blue">是不是只要 C# 的类属性设计的够好，就不需要这样呢？</span></p><p>这里是之前的思考：<a href="https://blog.huvjie.com/2020/06/01/200601N01/">https://blog.huvjie.com/2020/06/01/200601N01/</a></p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Message &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">"nihao"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Programe</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> A  aa = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> A Aa &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Programe programe = <span class="keyword">new</span> Programe();</span><br><span class="line">            programe.DoSomeChange(programe.Aa); <span class="comment">// 是可以更改的</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下面这两句是不允许的，重新改变了引用的指向</span></span><br><span class="line">            <span class="comment">//A Ab = new A();</span></span><br><span class="line">            <span class="comment">//programe.Aa = Ab;</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(programe.Aa.Message);</span><br><span class="line">            programe.OnlyShow(programe.Aa);</span><br><span class="line">            programe.OnlyShow();</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoSomeChange</span>(<span class="params">A a</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            a.Message = <span class="string">"hello"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnlyShow</span>(<span class="params">A a</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            a.Message = <span class="string">"hhhh"</span>;</span><br><span class="line">            Console.WriteLine(a.Message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnlyShow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.aa.Message = <span class="string">"Good!"</span>;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.aa.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">hhhh</span><br><span class="line">Good!</span><br></pre></td></tr></table></figure><p>类似下面这样是不行的：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoSomeChange</span>(<span class="params"><span class="keyword">const</span> A a</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p><p><span style="color:red">是不是 C# 没有类似 C++ 的 const 形参，或者有什么方法能够实现类似的功能呢？</span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里只针对引用参数来说(非string类型)。我们能限制的只是引用的指向不能更改，而引用指向的内存值是可以修改的。&lt;span style=&quot;color:blue&quot;&gt;是不是只要 C# 的类属性设计的够好，就不需要这样呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里是之前的思考：&lt;a href=&quot;https://blog.huvjie.com/2020/06/01/200601N01/&quot;&gt;https://blog.huvjie.com/2020/06/01/200601N01/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++｜wchar_t 简单认识</title>
    <link href="https://blog.huvjie.com/2020/11/25/201125N02/"/>
    <id>https://blog.huvjie.com/2020/11/25/201125N02/</id>
    <published>2020-11-25T02:22:00.000Z</published>
    <updated>2020-11-25T13:44:47.610Z</updated>
    
    <content type="html"><![CDATA[<p><code>wchar_t</code>输出用<code>wcout</code>。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setlocale(LC_ALL, <span class="string">"chs"</span>);</span><br><span class="line"><span class="keyword">wchar_t</span> wc[] = <span class="string">L"中国"</span>;</span><br><span class="line"></span><br><span class="line">wcout &lt;&lt; wc &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中国</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;wchar_t&lt;/code&gt;输出用&lt;code&gt;wcout&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C／C++" scheme="https://blog.huvjie.com/tags/C%EF%BC%8FC/"/>
    
  </entry>
  
  <entry>
    <title>如何实现C#和C++混合编程</title>
    <link href="https://blog.huvjie.com/2020/11/24/201125N01/"/>
    <id>https://blog.huvjie.com/2020/11/24/201125N01/</id>
    <published>2020-11-24T02:22:00.000Z</published>
    <updated>2020-11-25T14:10:08.830Z</updated>
    
    <content type="html"><![CDATA[<p>最近在想如何实现C#和C++混合编程的问题，为什么会想到这个问题？是因为，在视觉方面我是有学习 OpenCV 的打算的。发现<strong>用托管 C++ 代码，包装非托管 C++ 代码；然后，C# 无缝衔接托管 C++。</strong>这种方式比较可行。</p><a id="more"></a><p>最开始想的是，用 Qt 去包 OpenCV，然后再 C# 里面调用 Qt 程序。了解了下，需要用到<code>qtwinmigrate</code>，试了下，发现比较麻烦，也没有搞成功。<strong>感觉这种方式还是可行。如果有时间折腾这个，那我还不如花时间精力学习下 Qt，直接用 Qt 开发呢!</strong></p><p>后面发现在互联网上，大家还有一种方法。<strong>用托管 C++ 代码，包装非托管 C++ 代码；然后，C# 无缝衔接托管 C++。</strong>看了一些互联网上的博客，感觉此路可行。在 Windows 下这可能是种最佳的解决方案。这种方式貌似可以使用类，而<code>PInvoke</code>的方式只能调用函数吧!？</p><p>说的<code>PInvoke</code>,发现一个网站：<a href="http://pinvoke.net/" target="_blank" rel="noopener">http://pinvoke.net/</a>。有需求的时候可以来这里查看。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在想如何实现C#和C++混合编程的问题，为什么会想到这个问题？是因为，在视觉方面我是有学习 OpenCV 的打算的。发现&lt;strong&gt;用托管 C++ 代码，包装非托管 C++ 代码；然后，C# 无缝衔接托管 C++。&lt;/strong&gt;这种方式比较可行。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#｜::运算符和全局命名空间</title>
    <link href="https://blog.huvjie.com/2020/11/23/201123N02/"/>
    <id>https://blog.huvjie.com/2020/11/23/201123N02/</id>
    <published>2020-11-23T02:22:00.000Z</published>
    <updated>2020-11-25T13:41:27.783Z</updated>
    
    <content type="html"><![CDATA[<p>发现 C# 还要和 C++ 一样的<code>::</code>运算符，来测试一下。</p><p><strong>命名空间被赋值别名以后，可以隐藏掉原有的命名空间。想要访问需要完整路径。如果不用，可以用<code>::</code>运算法，它的优先级被高。</strong></p><p>看下下面的例子：</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 同名的别名空间</span></span><br><span class="line">    <span class="keyword">using</span> MyNamespaceAlias = MyRootNamespace.MyNestedNamespace;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">MyRootNamespace</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">namespace</span> <span class="title">MyNamespaceAlias</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"MyRootNamespace.MyNamespaceAlias.MyClass.Print()"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">namespace</span> <span class="title">MyNestedNamespace</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"MyRootNamespace.MyNestedNamespace.MyClass.Print()"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                MyRootNamespace.MyNestedNamespace.MyClass.Print(); <span class="comment">// 可简化名称如下</span></span><br><span class="line"></span><br><span class="line">                MyRootNamespace.MyNamespaceAlias.MyClass.Print(); <span class="comment">// 原有的 MyNamespaceAlias 命名空间屏蔽了别名空间。</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 使用::运算符，迫使编译器使用别名</span></span><br><span class="line">                MyNamespaceAlias::MyClass.Print();</span><br><span class="line">   <span class="comment">// MyRootNamespace. MyNamespaceAlias::MyClass.Print(); // 这样会报错不行，原因是显然的，::指向别名。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                Console.ReadKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对照输出顺序就，结合代码注释，可以看出区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyRootNamespace.MyNestedNamespace.MyClass.Print()</span><br><span class="line">MyRootNamespace.MyNamespaceAlias.MyClass.Print()</span><br><span class="line">MyRootNamespace.MyNestedNamespace.MyClass.Print()</span><br></pre></td></tr></table></figure><p>这种方式在大项目出现别名和<code>.NET</code>命名空间重名的时候有用，一般用不上吧？!</p><p><code>global</code>是顶级根命名空间的别名，如果出现上面所说的那种情况，可以这样：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global::System.Collections.Generic.List&lt;int&gt;   // 一个示例</span><br></pre></td></tr></table></figure><div style="font-size:12px">参考：<br>《C#入门经典第三版》P305<br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现 C# 还要和 C++ 一样的&lt;code&gt;::&lt;/code&gt;运算符，来测试一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命名空间被赋值别名以后，可以隐藏掉原有的命名空间。想要访问需要完整路径。如果不用，可以用&lt;code&gt;::&lt;/code&gt;运算法，它的优先级被高。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看下下面的例子：&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# try catch块内为空程序不会崩溃</title>
    <link href="https://blog.huvjie.com/2020/11/23/201123N03/"/>
    <id>https://blog.huvjie.com/2020/11/23/201123N03/</id>
    <published>2020-11-23T02:22:00.000Z</published>
    <updated>2020-11-23T12:10:21.079Z</updated>
    
    <content type="html"><![CDATA[<p>catch块内为空程序不会崩溃, 只是代表它没有进行任何的处理而已。</p><a id="more"></a><p><img src="http://image.huvjie.com/201123N03_img01.jpg" alt=""></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> c = b / a;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">catch</span> </span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这样程序不会蹦掉，只是没有处理异常而已。</p><p>很多时候，我们将错误信息<code>Show</code>出来。如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(ex.Message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，也可以进行其他的处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;catch块内为空程序不会崩溃, 只是代表它没有进行任何的处理而已。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Winform ｜制作圆形label标签双色球</title>
    <link href="https://blog.huvjie.com/2020/11/22/201122N03/"/>
    <id>https://blog.huvjie.com/2020/11/22/201122N03/</id>
    <published>2020-11-22T02:22:00.000Z</published>
    <updated>2020-11-22T13:27:45.118Z</updated>
    
    <content type="html"><![CDATA[<p>制作圆形的显示 label 当做双色球，效果如下：</p><p><img src="http://image.huvjie.com/201122N03_img01.jpg" alt="▲ 圆形双色球效果"></p><div style="font-size:13px;color:gray;text-align:center">▲ 圆形双色球效果</div><a id="more"></a><h2 id="一、找两个圆形底色为白色的图片"><a href="#一、找两个圆形底色为白色的图片" class="headerlink" title="一、找两个圆形底色为白色的图片"></a>一、找两个圆形底色为白色的图片</h2><p><img src="http://image.huvjie.com/201122N03_img01.png" alt=""></p><p><img src="http://image.huvjie.com/201122N03_img02.png" alt=""></p><div style="font-size:13px;color:gray;text-align:center">▲ 底图</div><h2 id="二、label-标签设置"><a href="#二、label-标签设置" class="headerlink" title="二、label 标签设置"></a>二、label 标签设置</h2><ol><li>拖入<code>label</code>标签；</li><li><code>AutoSize</code>属性置为<code>false</code>；</li><li><code>Width</code>和<code>Height</code>属性设置相等且适当尺寸；</li><li><code>Image</code>属性导入底图；</li><li><code>Text</code>属性先默认设置成<code>00</code>，字体大小调至适当;</li><li><code>TextAlign</code>属性设置成<code>居中</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;制作圆形的显示 label 当做双色球，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/201122N03_img01.jpg&quot; alt=&quot;▲ 圆形双色球效果&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;font-size:13px;color:gray;text-align:center&quot;&gt;▲ 圆形双色球效果&lt;/div&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的思考</title>
    <link href="https://blog.huvjie.com/2020/11/22/201122N04/"/>
    <id>https://blog.huvjie.com/2020/11/22/201122N04/</id>
    <published>2020-11-22T02:22:00.000Z</published>
    <updated>2020-11-22T13:39:48.962Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象，数据的传输尽量以<code>对象</code>的形式封装起来传递会比较好。<code>实体类</code>是不是就是干这个事情的？!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面向对象，数据的传输尽量以&lt;code&gt;对象&lt;/code&gt;的形式封装起来传递会比较好。&lt;code&gt;实体类&lt;/code&gt;是不是就是干这个事情的？!&lt;/p&gt;

      
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#｜对象初始化器的精简</title>
    <link href="https://blog.huvjie.com/2020/11/22/201122N01/"/>
    <id>https://blog.huvjie.com/2020/11/22/201122N01/</id>
    <published>2020-11-22T01:51:23.000Z</published>
    <updated>2020-11-22T01:55:50.405Z</updated>
    
    <content type="html"><![CDATA[<p>C# 版本一直在更新，之前看到一个这样的精简。</p><a id="more"></a><p><img src="http://image.huvjie.com/201122N01_img01.jpg" alt="▲ 精简"></p><div style="text-align:center">▲ 精简语法 VS 提示</div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">B</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> A aa = <span class="keyword">new</span> A() &#123; Name = <span class="string">"Good"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 精简语法</span></span><br><span class="line">    <span class="keyword">private</span> A a = <span class="keyword">new</span> A &#123; Name = <span class="string">"Nice"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C# 版本一直在更新，之前看到一个这样的精简。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#｜lambda 表达式精简过程</title>
    <link href="https://blog.huvjie.com/2020/11/22/201122N02/"/>
    <id>https://blog.huvjie.com/2020/11/22/201122N02/</id>
    <published>2020-11-22T01:14:05.000Z</published>
    <updated>2020-11-22T01:59:04.186Z</updated>
    
    <content type="html"><![CDATA[<p>强大的<code>Lambda</code>表达式，简洁到你懵逼。我们知道没有<code>Lambda</code>表达式之前是<code>delegate</code>匿名表达式。</p><a id="more"></a><p>注意看下下面代码的注释，明了一下整个省略过程。这里还有之前的一篇笔记<a href="https://blog.huvjie.com/2019/07/28/190728N02/">https://blog.huvjie.com/2019/07/28/190728N02/</a>。可以结合起来一起看一下。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">delegate</span> <span class="keyword">double</span> <span class="title">Mydel</span>(<span class="params"><span class="keyword">int</span> par</span>)</span>; <span class="comment">// 委托</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Mydel del = <span class="keyword">delegate</span> (<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;; <span class="comment">// 最初的匿名方法形式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1。lambad 表达式必须在参数数量，类型，位置上与委托相匹配</span></span><br><span class="line">            Mydel le1 =       (<span class="keyword">int</span> x) =&gt; &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;; <span class="comment">// 完整Lambda 表达式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2。表达式不一定需要包含类型(隐式类型)，出了 ref 和 out 参数</span></span><br><span class="line">            Mydel le2 =           (x) =&gt; &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;; <span class="comment">// 省略类型</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3。如果只有一个参数，并且是隐式类型，周围的圆括号都可省略；如果没有参数则必须要有圆括号</span></span><br><span class="line">            Mydel le3 =             x =&gt; &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;; <span class="comment">// 省略圆括号</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4。 如果语句块包含一个返回语句，可以将语句块替换成 return 后面的表达式</span></span><br><span class="line">            <span class="comment">//     看起来像省略了 return 和 后面的&#123;&#125;对和分号</span></span><br><span class="line">            Mydel le4 = x =&gt;  x + <span class="number">1</span>;   <span class="comment">// 最简，看起来像 le4 = x + 1；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, del(<span class="number">100</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, le1(<span class="number">100</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, le2(<span class="number">100</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, le3(<span class="number">100</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, le4(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">101</span><br><span class="line">101</span><br><span class="line">101</span><br><span class="line">101</span><br><span class="line">101</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.《图解教程》P253<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;强大的&lt;code&gt;Lambda&lt;/code&gt;表达式，简洁到你懵逼。我们知道没有&lt;code&gt;Lambda&lt;/code&gt;表达式之前是&lt;code&gt;delegate&lt;/code&gt;匿名表达式。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WPF 事件｜硬编码的方式 winform 的方式使用</title>
    <link href="https://blog.huvjie.com/2020/11/21/201121N02/"/>
    <id>https://blog.huvjie.com/2020/11/21/201121N02/</id>
    <published>2020-11-21T02:22:00.000Z</published>
    <updated>2020-11-21T14:03:45.472Z</updated>
    
    <content type="html"><![CDATA[<p>像winform一样，事件，赋值，硬编码的方式实现。   <strong>// 传说，WPF 有五种绑定方式。</strong></p><p><img src="http://image.huvjie.com/201121N02_img01.gif" alt="▲ 效果"></p><div style="font-size:13px;color:gray;text-align:center">▲ 效果</div><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">"WpfApp1.MainWindow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">"http://schemas.microsoft.com/expression/blend/2008"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">"clr-namespace:WpfApp1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">"d"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">"MainWindow"</span> <span class="attr">Height</span>=<span class="string">"250"</span> <span class="attr">Width</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">"btnTest"</span> <span class="attr">Click</span>=<span class="string">"BtnTest_Click"</span> <span class="attr">Content</span>=<span class="string">"点击测试"</span> <span class="attr">Width</span>=<span class="string">"100"</span> <span class="attr">Height</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Label</span> <span class="attr">x:Name</span>=<span class="string">"label"</span> <span class="attr">Content</span>=<span class="string">"Label"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Left"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Top"</span> <span class="attr">RenderTransformOrigin</span>=<span class="string">"2.845,4.051"</span> <span class="attr">Margin</span>=<span class="string">"128,41,0,0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WpfApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> MainWindow.xaml 的交互逻辑</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="keyword">this</span>.WindowStartupLocation = WindowStartupLocation.CenterScreen;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BtnTest_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">"Hello!"</span>);</span><br><span class="line">            <span class="keyword">this</span>.label.Content = <span class="string">"World!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;像winform一样，事件，赋值，硬编码的方式实现。   &lt;strong&gt;// 传说，WPF 有五种绑定方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/201121N02_img01.gif&quot; alt=&quot;▲ 效果&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;font-size:13px;color:gray;text-align:center&quot;&gt;▲ 效果&lt;/div&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WPF｜元素查找的方式Bonding</title>
    <link href="https://blog.huvjie.com/2020/11/20/201120N01/"/>
    <id>https://blog.huvjie.com/2020/11/20/201120N01/</id>
    <published>2020-11-20T02:22:00.000Z</published>
    <updated>2020-11-20T15:35:08.534Z</updated>
    
    <content type="html"><![CDATA[<p>元素之间的绑定。</p><p><code>TextBox</code>和<code>Slider</code>之间的值绑定，默认是双向绑定的。</p><p><img src="http://image.huvjie.com/201120N01_img01.gif" alt="▲效果"></p><div style="font-size:13px;color:gray;text-align:center">▲ 效果</div><a id="more"></a><p><img src="http://image.huvjie.com/201120N01_img02.jpg" alt="▲ 绑定模式的枚举"></p><div style="font-size:13px;color:gray;text-align:center">▲ 绑定模式的枚举</div><p><strong>双向绑定，需要按 tab 键切换焦点以后才会有反应。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;WpfApp1.MainWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span><br><span class="line">        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span><br><span class="line">        xmlns:local=&quot;clr-namespace:WpfApp1&quot;</span><br><span class="line">        mc:Ignorable=&quot;d&quot;</span><br><span class="line">        Title=&quot;MainWindow&quot; Height=&quot;200&quot; Width=&quot;380&quot;</span><br><span class="line">        WindowStartupLocation=&quot;CenterScreen&quot;</span><br><span class="line">        &gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;Grid.RowDefinitions&gt;</span><br><span class="line">            &lt;RowDefinition Height=&quot;50&quot;/&gt;</span><br><span class="line">            &lt;RowDefinition Height=&quot;50*&quot;/&gt;</span><br><span class="line">        &lt;/Grid.RowDefinitions&gt;</span><br><span class="line">        &lt;Slider x:Name=&quot;slider&quot; Grid.Row=&quot;0&quot; Margin=&quot;10&quot;/&gt;</span><br><span class="line">        &lt;TextBox Text=&quot;&#123;Binding ElementName=slider, Path=Value&#125;&quot; Grid.Row=&quot;1&quot; Margin=&quot;10&quot;/&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure><p>看这两行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Slider x:Name=&quot;slider&quot; Grid.Row=&quot;0&quot; Margin=&quot;10&quot;/&gt;</span><br><span class="line">&lt;TextBox Text=&quot;&#123;Binding ElementName=slider, Path=Value&#125;&quot; Grid.Row=&quot;1&quot; Margin=&quot;10&quot;/&gt;</span><br></pre></td></tr></table></figure><p>默认是双向绑定的。</p><hr><div style="font-size:12px">参考：<br><a href="https://www.bilibili.com/video/BV1mJ411F7zG?p=7&amp;t=723" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1mJ411F7zG?p=7&amp;t=723</a><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;元素之间的绑定。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TextBox&lt;/code&gt;和&lt;code&gt;Slider&lt;/code&gt;之间的值绑定，默认是双向绑定的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/201120N01_img01.gif&quot; alt=&quot;▲效果&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;font-size:13px;color:gray;text-align:center&quot;&gt;▲ 效果&lt;/div&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 无法修改返回值，应为它不是变量</title>
    <link href="https://blog.huvjie.com/2020/11/18/201118N01/"/>
    <id>https://blog.huvjie.com/2020/11/18/201118N01/</id>
    <published>2020-11-18T02:22:00.000Z</published>
    <updated>2020-11-18T14:26:42.905Z</updated>
    
    <content type="html"><![CDATA[<p>结构体通过属性访问修改的时候会出现以下编译错误：</p><p><img src="http://image.huvjie.com/201118N01_img01.jpg" alt="▲ 错误提示"></p><div style="font-size:13px;color:gray;text-align:center">▲ 错误提示</div><a id="more"></a><p>结构体不能像类一样去操作，问题肯定是因为：<strong>结构体是值类型</strong>的原因。</p><p><strong>结构体肯定只能整体给他赋值</strong>，像<code>int</code>类型一样。</p><p><img src="http://image.huvjie.com/201118N01_img02.jpg" alt="▲ 结构体整体赋值，不会编译错误。"></p><div style="font-size:13px;color:gray;text-align:center">▲ 结构体整体赋值，不会编译错误。</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结构体通过属性访问修改的时候会出现以下编译错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/201118N01_img01.jpg&quot; alt=&quot;▲ 错误提示&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;font-size:13px;color:gray;text-align:center&quot;&gt;▲ 错误提示&lt;/div&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>还是要学下 WPF</title>
    <link href="https://blog.huvjie.com/2020/11/16/201116N01/"/>
    <id>https://blog.huvjie.com/2020/11/16/201116N01/</id>
    <published>2020-11-16T02:22:00.000Z</published>
    <updated>2020-11-16T12:28:10.344Z</updated>
    
    <content type="html"><![CDATA[<p>其实行业内大部分人都在用 winform，还是想学习一下 WPF。主要考虑一下几点：</p><a id="more"></a><ol><li><p>技术更先进。</p><p> 还是要向前一步。能够很好的实现前后台代码的分离。</p></li><li><p>后面想弄下安卓 <code>Xamarin</code>。</p></li></ol><p>/<strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong>/</p><p>学 WPF 不着急，慢慢学。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实行业内大部分人都在用 winform，还是想学习一下 WPF。主要考虑一下几点：&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 实例构建的执行顺序</title>
    <link href="https://blog.huvjie.com/2020/11/16/201116N03/"/>
    <id>https://blog.huvjie.com/2020/11/16/201116N03/</id>
    <published>2020-11-16T02:22:00.000Z</published>
    <updated>2020-11-16T13:56:34.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先看看一般类的实例化构建顺序"><a href="#先看看一般类的实例化构建顺序" class="headerlink" title="先看看一般类的实例化构建顺序"></a>先看看一般类的实例化构建顺序</h1><h2 id="无继承的情况"><a href="#无继承的情况" class="headerlink" title="无继承的情况"></a>无继承的情况</h2><ol><li>静态字段</li><li>静态构造方法</li><li>实例字段</li><li>实例构造方法</li></ol><h2 id="有继承的情况"><a href="#有继承的情况" class="headerlink" title="有继承的情况"></a>有继承的情况</h2><ol><li>子类(派生类)的静态字段</li><li>子类(派生类)的静态构造方法</li><li>子类(派生类)的实例字段</li><li><span style="color:red">父类(基类)</span>的静态字段</li><li><span style="color:red">父类(基类)</span>的静态构造方法</li><li><span style="color:red">父类(基类)</span>的实例字段</li><li><span style="color:red">父类(基类)</span>的实例构造方法</li><li>子类(派生类)的实例构造方法</li></ol><p>这两种情况还是很好理解的。总体来说<strong>字段是先于构造函数执行的</strong>，不然构造函数拿什么去执行。<strong>派生类的字段，和基类的实例先执行，然后再执行派生类的构造函数。</strong>这里是，<span style="color:red">基类的构造函数先执行，然后再执行派生类的构造函数</span>。下面验证下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            A a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">A</span>: <span class="title">B</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">A</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">B</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">B</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B</span><br><span class="line">A</span><br></pre></td></tr></table></figure><p><strong>基类的构造函数先执行，然后再执行派生类的构造函数</strong>。这里是对的。</p><h2 id="C-的构造函数和析构函数执行顺序"><a href="#C-的构造函数和析构函数执行顺序" class="headerlink" title="C++ 的构造函数和析构函数执行顺序"></a>C++ 的构造函数和析构函数执行顺序</h2><p>先调用父类(基类)的构造函数，再调用派生类的构造函数；</p><p>变量销毁时：先调用派生类的析构函数，再调用父类(基类)的析构函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        A()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt; <span class="string">"基类：AAAAAAAAAAAA"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ~A()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"基类：~AAAAAAAAAAAA"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        B()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt; <span class="string">"派生类：BBBBBBBBB"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ~B()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"派生类：~BBBBBBBBB"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span> <span class="comment">//当函数开始时，调用构造函数，当函数结束时，变量对象被销毁</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B b1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    solution();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基类：AAAAAAAAAAAA</span><br><span class="line">派生类：BBBBBBBBB</span><br><span class="line">派生类：~BBBBBBBBB</span><br><span class="line">基类：~AAAAAAAAAAAA</span><br></pre></td></tr></table></figure><h1 id="看下对象初始化器和构造函数谁先执行"><a href="#看下对象初始化器和构造函数谁先执行" class="headerlink" title="看下对象初始化器和构造函数谁先执行"></a>看下对象初始化器和构造函数谁先执行</h1><p>结论：<strong>构造函数先于对象初始化器执行</strong>，然后，窗体程序的话，<strong>对象初始化器先于<code>Load</code>事件执行</strong>。</p><p><img src="http://image.huvjie.com/201116N03_img01.jpg" alt=""></p><p><strong>Form1.cs:</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            Console.WriteLine(<span class="string">"Fomr1 构造函数!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Form2 form2 = <span class="keyword">new</span> Form2() &#123;</span><br><span class="line">                Msg = <span class="string">"对象初始化器中赋值!!"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            form2.Show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Form2.cs：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form2</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Msg &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"Form2 构造函数!!"</span>);</span><br><span class="line">            <span class="keyword">this</span>.StartPosition = FormStartPosition.CenterScreen;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.Msg = <span class="string">"构造函数后执行于对象初始化器!!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form2_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.Msg == <span class="literal">null</span>)</span><br><span class="line">                Console.WriteLine(<span class="string">"Load 事件先执行!!"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Console.WriteLine(<span class="keyword">this</span>.Msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div style="font-size:12px"><br>&gt; 参考：<br>&gt; 1. <a href="https://www.cnblogs.com/nzbbody/archive/2011/12/29/2306403.html" target="_blank" rel="noopener">https://www.cnblogs.com/nzbbody/archive/2011/12/29/2306403.html</a><br>&gt; 2. <a href="https://www.cnblogs.com/qkqBeer/articles/10726173.html" target="_blank" rel="noopener">https://www.cnblogs.com/qkqBeer/articles/10726173.html</a><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;先看看一般类的实例化构建顺序&quot;&gt;&lt;a href=&quot;#先看看一般类的实例化构建顺序&quot; class=&quot;headerlink&quot; title=&quot;先看看一般类的实例化构建顺序&quot;&gt;&lt;/a&gt;先看看一般类的实例化构建顺序&lt;/h1&gt;&lt;h2 id=&quot;无继承的情况&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 关于引用类型的类外只读属性</title>
    <link href="https://blog.huvjie.com/2020/11/16/201116N02/"/>
    <id>https://blog.huvjie.com/2020/11/16/201116N02/</id>
    <published>2020-11-16T02:22:00.000Z</published>
    <updated>2020-11-23T12:18:56.564Z</updated>
    
    <content type="html"><![CDATA[<p>类内的只读属性不能更改的是他的<code>指向</code>，例如，容器类<code>List</code>，如果是只内部可写，外部可读，只有类内部可以更改 <code>List</code> 字段的指向赋值，外部不能。<strong>而类外<code>get</code>到它的指向值后，是可以对它进行<code>Add</code>等操作的，因为没有更改它的指向。</strong></p><p>有点绕，估计没讲清我想要说什么。~O(∩_∩)O~</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Test test = <span class="keyword">new</span> Test();</span><br><span class="line">            List&lt;<span class="keyword">string</span>&gt; tlist = test.TList;</span><br><span class="line">            tlist.Add(<span class="string">"Lily"</span>); <span class="comment">// 增加两个</span></span><br><span class="line">            tlist.Add(<span class="string">"Lucy"</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> tlist)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            List&lt;<span class="keyword">string</span>&gt; nlist = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();  <span class="comment">// 新实例</span></span><br><span class="line">            <span class="comment">// test.TList = nlist;  // 不能从新指向</span></span><br><span class="line">            tlist = nlist;  <span class="comment">// 这个和test实例不相干，当然可以改指向</span></span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;<span class="keyword">string</span>&gt; TList &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.TList = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">            <span class="keyword">this</span>.TList.Add(<span class="string">"Tom"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tom</span><br><span class="line">Lily  // 后面这两个是可以增加的。</span><br><span class="line">Lucy</span><br></pre></td></tr></table></figure><p>下面这样重新指向一个新实例是不行的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">string</span>&gt; nlist = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();  <span class="comment">// 新实例</span></span><br><span class="line">test.TList = nlist;  <span class="comment">// 不能从新指向</span></span><br></pre></td></tr></table></figure><p><code>test.TList = nlist;  // 不能从新指向</code>，外部只读不能更改指向。</p><p>再看：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student() &#123;Name = <span class="string">"Hi"</span>, Age = <span class="number">1</span> &#125;;</span><br><span class="line">            Console.WriteLine(stu.Name + <span class="string">"\n"</span> + stu.Age);</span><br><span class="line"></span><br><span class="line">            Student stu1 = stu;</span><br><span class="line">            stu1.Name = <span class="string">"Hello"</span>;</span><br><span class="line">            stu1.Age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"\n"</span> + stu.Name + <span class="string">"\n"</span> + stu.Age);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hi</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Hello</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>只要不更改引用的指向，其应用内部的属性如果是可读可写的话，还是可以修改值的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类内的只读属性不能更改的是他的&lt;code&gt;指向&lt;/code&gt;，例如，容器类&lt;code&gt;List&lt;/code&gt;，如果是只内部可写，外部可读，只有类内部可以更改 &lt;code&gt;List&lt;/code&gt; 字段的指向赋值，外部不能。&lt;strong&gt;而类外&lt;code&gt;get&lt;/code&gt;到它的指向值后，是可以对它进行&lt;code&gt;Add&lt;/code&gt;等操作的，因为没有更改它的指向。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有点绕，估计没讲清我想要说什么。~O(∩_∩)O~&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 接口类型</title>
    <link href="https://blog.huvjie.com/2020/11/15/201115N01/"/>
    <id>https://blog.huvjie.com/2020/11/15/201115N01/</id>
    <published>2020-11-15T00:12:05.000Z</published>
    <updated>2020-11-15T01:19:23.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h2><p>个人理解，接口有点像 C 语言的前置申明。<code>I</code>开头命名，<strong>默认为 <code>public</code></strong>, 分号结束，没有实现体。继承它的类必须全部实现接口成员。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IComparable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">CompareT0</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><p>接口放在基类后面，类可以继承多个接口，用<code>,</code>号分开。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span>, <span class="title">ILiveBird</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> ILiveBird.BabyCalled()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Kitten"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口是引用类型"><a href="#接口是引用类型" class="headerlink" title="接口是引用类型"></a>接口是引用类型</h2><p>接口是引用类型。</p><h2 id="接口类型转换建议用as运算符"><a href="#接口类型转换建议用as运算符" class="headerlink" title="接口类型转换建议用as运算符"></a>接口类型转换建议用<code>as</code>运算符</h2><p><code>as</code>运算符的强制转换时，失败返回<code>null</code>，不会引发异常。</p><h2 id="实现具有重复成员的接口"><a href="#实现具有重复成员的接口" class="headerlink" title="实现具有重复成员的接口"></a>实现具有重复成员的接口</h2><p>类内可以实现单个成员即可满足所有重复成员的接口。</p><h2 id="派生类可以作为接口的实现"><a href="#派生类可以作为接口的实现" class="headerlink" title="派生类可以作为接口的实现"></a>派生类可以作为接口的实现</h2><p>从基类派生过来的成员可以作为接口的实现成员。</p><h2 id="显式接口成员"><a href="#显式接口成员" class="headerlink" title="显式接口成员"></a>显式接口成员</h2><p>显式接口成员只能通过转化成接口引用类型才能实现访问，类实例不能够访问。</p><p>可以看之前的这篇笔记：<a href="https://blog.huvjie.com/2020/08/26/200826N02/">https://blog.huvjie.com/2020/08/26/200826N02/</a>。</p><p>实现的显式接口成员前面不能加<code>public</code>等访问修饰符，因为类外根本不能够直接访问。但没有<code>public</code>也是可以被继承的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Test test = <span class="keyword">new</span> Test();</span><br><span class="line">            ILiveBird liveBird = test <span class="keyword">as</span> ILiveBird; <span class="comment">// 需要强制转化</span></span><br><span class="line">            <span class="keyword">if</span> (liveBird != <span class="literal">null</span>)</span><br><span class="line">                Console.WriteLine(liveBird.BabyCalled());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Console.WriteLine(<span class="string">"null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">ILiveBird</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">string</span> <span class="title">BabyCalled</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Animal</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span>, <span class="title">ILiveBird</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> ILiveBird.BabyCalled()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Kitten"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span>:<span class="title">Cat</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kitten  // 需要强制转化成接口类型</span><br></pre></td></tr></table></figure><p><img src="http://image.huvjie.com/201115N01_img01.jpg" alt="▲ 不能加`public`等访问修饰符"></p><div style="font-size:13px;color:gray;text-align:center">▲ 不能加<code>public</code>等访问修饰符</div><h2 id="接口可以继承接口"><a href="#接口可以继承接口" class="headerlink" title="接口可以继承接口"></a>接口可以继承接口</h2><p>当然在类内都要被实现。</p><h2 id="不同类实现一个接口"><a href="#不同类实现一个接口" class="headerlink" title="不同类实现一个接口"></a>不同类实现一个接口</h2><p>可以看之前的这篇笔记：<a href="https://blog.huvjie.com/2020/08/26/200826N02/">https://blog.huvjie.com/2020/08/26/200826N02/</a>。</p><p><hr><br><span style="color:gray;font-size:12px"><br>参考： </span></p><ol><li>详细的内容可以看下《C# 图解教程》 P275 页。<br></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是接口&quot;&gt;&lt;a href=&quot;#什么是接口&quot; class=&quot;headerlink&quot; title=&quot;什么是接口&quot;&gt;&lt;/a&gt;什么是接口&lt;/h2&gt;&lt;p&gt;个人理解，接口有点像 C 语言的前置申明。&lt;code&gt;I&lt;/code&gt;开头命名，&lt;strong&gt;默认为 &lt;code&gt;
      
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
</feed>
