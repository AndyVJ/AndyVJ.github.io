<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡搅蛮缠</title>
  
  <subtitle>AndyVJ 的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.andyvj.com/"/>
  <updated>2020-02-29T02:18:31.242Z</updated>
  <id>https://www.andyvj.com/</id>
  
  <author>
    <name>AndyVJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无中生有</title>
    <link href="https://www.andyvj.com/2020/02/29/200229N02/"/>
    <id>https://www.andyvj.com/2020/02/29/200229N02/</id>
    <published>2020-02-29T02:16:50.000Z</published>
    <updated>2020-02-29T02:18:31.242Z</updated>
    
    <content type="html"><![CDATA[<p>太差火。</p><!--<hr/><span style="color:gray;font-size:12px">参考： 1.[link-01]()2.[link-02]()3.[link-03]()</span>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;太差火。&lt;/p&gt;
&lt;!--
&lt;hr/&gt;
&lt;span style=&quot;color:gray;font-size:12px&quot;&gt;
参考： 
1.[link-01]()
2.[link-02]()
3.[link-03]()
&lt;/span&gt;
--&gt;
      
    
    </summary>
    
      <category term="其他" scheme="https://www.andyvj.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="点滴" scheme="https://www.andyvj.com/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>C# 交换两个变量值</title>
    <link href="https://www.andyvj.com/2020/02/29/200229N01/"/>
    <id>https://www.andyvj.com/2020/02/29/200229N01/</id>
    <published>2020-02-29T01:17:58.000Z</published>
    <updated>2020-02-29T01:50:24.935Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>声明两个变量：int n1 = 10, n2 = 20;要求将两个变量交换，最后输出n1为20,n2为10。扩展（*）：不使用第三个变量如何交换？</li></ol></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">temp = n1;</span><br><span class="line">n1 = n2;</span><br><span class="line">n2 = temp;</span><br></pre></td></tr></table></figure><div style="font-size:13px;color:gray;text-align:center">▲ 借用中间量</div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1 = n1 + n2;</span><br><span class="line">n2 = n1 - n2;</span><br><span class="line">n1 = n1 - n2;</span><br></pre></td></tr></table></figure><div style="font-size:13px;color:gray;text-align:center">▲ 不用中间量</div><blockquote><ol start="2"><li>用方法来实现：将上题封装一个方法来做，方法有两个参数分别为num1,num2,将num1与num2交换。提示：方法有两个参数n1,n2,在方法中将n1与n2进行交换，使用ref。（*）</li></ol></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> n2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"交换前：n1 = &#123;0&#125;, n2 = &#123;1&#125;"</span>, n1, n2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    SwapNum&lt;<span class="keyword">int</span>&gt;(<span class="keyword">ref</span> n1, <span class="keyword">ref</span> n2);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"交换前：n1 = &#123;0&#125;, n2 = &#123;1&#125;"</span>, n1, n2);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> SwapNum&lt;T&gt; (<span class="keyword">ref</span> T a, <span class="keyword">ref</span> T b)</span><br><span class="line">&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    </span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">交换前：n1 = 10, n2 = 20</span><br><span class="line">交换前：n1 = 20, n2 = 10</span><br></pre></td></tr></table></figure></p><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.bilibili.com/video/av10357226?t=888" target="_blank" rel="noopener">link-01</a><br></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;声明两个变量：int n1 = 10, n2 = 20;要求将两个变量交换，最后输出n1为20,n2为10。扩展（*）：不使用第三个变量如何交换？&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>英语：play</title>
    <link href="https://www.andyvj.com/2019/08/09/190809N/"/>
    <id>https://www.andyvj.com/2019/08/09/190809N/</id>
    <published>2019-08-09T12:59:47.000Z</published>
    <updated>2019-08-09T13:17:26.242Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.huvjie.com/190809N_img01.mp3" target="_blank" rel="noopener">音频</a></p><a id="more"></a><embed height="50" width="100%" autostart="false" autoplay="false" loop="false" src="http://image.huvjie.com/190809N_img01.mp3"><p><code>play</code>一般用在——游戏、乐器、运动、小孩的玩耍；其他情况一般很少用<code>play</code>。</p><ul><li>I like to use Douyin. 我喜欢玩抖音。// 不能用 play</li><li>I like to go on Douyin.</li><li>I want to play with you. // 男女朋友之间比较暧昧的一种说法：我想跟你玩。</li><li>I want to hang out with you. 我想跟你一起玩。// 一般性的说法。</li><li>I want to go abroad on a vacation. 我想出国玩。</li></ul><p><hr><br><span style="color:gray;font-size:12px"><br>参考：  抖音 -&gt; @英国小克里<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://image.huvjie.com/190809N_img01.mp3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;音频&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="基础学科" scheme="https://www.andyvj.com/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="英语" scheme="https://www.andyvj.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>C#.Net基础加强十三天-XML介绍</title>
    <link href="https://www.andyvj.com/2019/07/29/190729N01/"/>
    <id>https://www.andyvj.com/2019/07/29/190729N01/</id>
    <published>2019-07-29T12:21:16.000Z</published>
    <updated>2019-07-29T15:23:39.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XML（可扩展标记语言）"><a href="#XML（可扩展标记语言）" class="headerlink" title="XML（可扩展标记语言）"></a>XML（可扩展标记语言）</h2><ul><li>XML:eXtensible Markup Language</li><li>什么是标记语言？什么是标记？<ul><li>标记（markup）：文档中任何不想被打印输出的部分（不是真正的文档的内容，联想读书时做的“读书笔记”，在旁边写的注解等。）注解是注解，实际内容是实际内容。</li><li>标记的作用：传递了关于文档本身以外的额外信息。比如：标记文档的某部分该如何显示，某部分是什么意思等。重在数据，标记只是为了说明数据的含义而已。</li></ul></li><li>常见的标记语言：SGML、HTML、XML</li><li>HTML与XML的区别与联系？</li><li>Xml作用与应用场合：xml数据存储，html数据展示。</li><li>语法、是否有预定义标签、各自的作用与意义</li><li><strong>相关术语：标签、节点、根节点、元素、子元素、后代元素、属性、嵌套、命名空间、字符数据（CDATA）</strong></li></ul><h2 id="XML-基础（extensible-markup-language）"><a href="#XML-基础（extensible-markup-language）" class="headerlink" title="XML 基础（extensible markup language）"></a>XML 基础（extensible markup language）</h2><ul><li>仕么是XML，学它有什么用。优点：容易读懂：格式标准任何语言都内置了XML分析引繁，不用单独进行文件分析引擎的编写。</li><li>Xml就是用一种格式化的方式来存储数据，并且是文本文件任何时候我们都能很容易的用记事本打开。与Excel、Word不一样。</li><li>举例：分析出一个xml格式的文件、分析出一个Excel文件。net程序中的一些配置文件app.config、web.config文件都是xm文件。</li><li>Ofice2007的文件格式docx、xlsx、pptx都是xml.先改成rar文件然后解压。</li><li>XML语法规范：标签（Tag）、嵌套（Nest）、属性。标签要闭合，属性值要用<code>&quot;&quot;</code>包围，标签可以互相嵌套</li><li>XML树，父节点、子节点、兄弟节点（siblings）</li><li>XML和HTML的区别：<ol><li>有且只能有一个根元素。</li><li>XML中元素必须关闭；</li><li>XML中元素的属性值必须用引号;</li><li>XML大小写敏感（CaseSenstive）</li></ol></li><li>符合XML规范的HTML叫做“符合XHTML标准”。开发的网站必须通过W3C验证。</li><li>xml编写完成以后可以用浏览器来查着，如果写错了浏览器会提示。如果明明没措，浏览器还是提示错娱，则可能是文件编码问题。</li></ul><h2 id="Linq-To-XML：写"><a href="#Linq-To-XML：写" class="headerlink" title="Linq To XML：写"></a>Linq To XML：写</h2><ul><li>读写XML有很多技术:<ol><li><code>Dom [XmlDocument、XDocument]</code>（文档对象模型，将整个<code>xml</code>加载到内存中，然后操作）;</li><li><code>Sax</code>（事件驱动，<code>.net</code>中使用<code>XmlReader（XmlTextReader）</code>、<code>XmlWrter（XmlTextWriter）</code><br>来替代）等，还有高级的读写技术;</li><li><code>XmlSerializer</code>（<code>xml</code>序列化，需要先定义类）;</li><li><code>Linq To XML（SystemXml.Linq）</code>，用到的就是<code>Xdocument</code>，<code>Xelement</code>等等，<code>XmlSerializer</code>要求对每种不同的文件都定义一套类，很麻烦，而<code>Linq To XML</code>则不需要单独创建类，当然更底层一些，代码比<code>XmlSerializer</code>多，灵活性更高。<code>SystemXml</code>下的类是2.0及之前操作<code>xml</code>推荐的，现在很多入也仍然在用这个<code>namespace</code>下的类，这个<code>namespace</code>下的类和<code>Linq To XML</code>非常相似，因此不用单独学核心类<code>XElement</code>，一个<code>XElement</code>表示一个元素，<code>new XEiement（&quot;order&quot;）</code>，创建一个名学为<code>Order</code>的标签，调用<code>Add</code>增加子元素，也是<code>XElement</code>对象，和<code>TreeView</code>一样。</li></ol></li><li>想得到字符串怎么办？<code>ToString</code></li><li>调用<code>XElement</code>的<code>Save</code>方法将<code>xml</code>内容保存在<code>Writer</code>中</li><li>创建xml的时候可以用<code>XDocument</code>也可以不用。（直接用<code>XElement</code>）</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="http://image.huvjie.com/190729N01_img01.jpg" alt=""></p><div style="font-size:13px;color:gray;text-align:center">▲ 界面</div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XML_Bzhan</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 通过编程的方式实现XML写入</span></span><br><span class="line">            <span class="comment">// 1. 在内存中构建一个 Dom 对象</span></span><br><span class="line">            XmlDocument xmlDoc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">            <span class="comment">// 增加一个文档说明</span></span><br><span class="line">            XmlDeclaration xmlDeclaration =  xmlDoc.CreateXmlDeclaration(<span class="string">"1.0"</span>, <span class="string">"utf-8"</span>, <span class="string">"yes"</span>);</span><br><span class="line">            xmlDoc.AppendChild(xmlDeclaration);</span><br><span class="line">            <span class="comment">// 为文档增加一个根元素</span></span><br><span class="line">            <span class="comment">// 2.1 创建一个根元素</span></span><br><span class="line">            XmlElement rootElement = xmlDoc.CreateElement(<span class="string">"school"</span>);</span><br><span class="line">            xmlDoc.AppendChild(rootElement);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为根元素增加子元素，接下来增加元素都要将子元素增加到rootElement元素下</span></span><br><span class="line">            XmlElement xmlClassElement = xmlDoc.CreateElement(<span class="string">"class"</span>);</span><br><span class="line">            <span class="comment">// 为class增加一个id属性</span></span><br><span class="line">            XmlAttribute attr = xmlDoc.CreateAttribute(<span class="string">"id"</span>);</span><br><span class="line">            attr.Value = <span class="string">"c01"</span>;</span><br><span class="line">            xmlClassElement.Attributes.Append(attr);</span><br><span class="line">            rootElement.AppendChild(xmlClassElement);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.为class元素下创建一个student节点</span></span><br><span class="line">            XmlElement xmlStudentElement = xmlDoc.CreateElement(<span class="string">"student"</span>);</span><br><span class="line">            XmlAttribute attrSid = xmlDoc.CreateAttribute(<span class="string">"sid"</span>);</span><br><span class="line">            attrSid.Value = <span class="string">"s011"</span>;</span><br><span class="line">            xmlStudentElement.Attributes.Append(attrSid);</span><br><span class="line">            xmlClassElement.AppendChild(xmlStudentElement);</span><br><span class="line"></span><br><span class="line">            XmlElement xmlNameElement = xmlDoc.CreateElement(<span class="string">"name"</span>);</span><br><span class="line">            xmlNameElement.InnerText = <span class="string">"黄林"</span>;</span><br><span class="line">            <span class="comment">//5.向student节点下增加一个name节点和一个age节点</span></span><br><span class="line">            xmlStudentElement.AppendChild(xmlNameElement);</span><br><span class="line"></span><br><span class="line">            XmlElement xmlAgeElement = xmlDoc.CreateElement(<span class="string">"Age"</span>);</span><br><span class="line">            xmlAgeElement.InnerText = <span class="string">"18"</span>;</span><br><span class="line">            xmlStudentElement.AppendChild(xmlAgeElement);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 将 Dom 对象写入到 xml 文件中</span></span><br><span class="line">            xmlDoc.Save(<span class="string">"school.xml"</span>);</span><br><span class="line">            MessageBox.Show(<span class="string">"OK"</span>);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入的 <code>school.xml</code> 文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">school</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">class</span> <span class="attr">id</span>=<span class="string">"c01"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">sid</span>=<span class="string">"s011"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>黄林<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="用-List-集合之循环添加"><a href="#用-List-集合之循环添加" class="headerlink" title="用 List 集合之循环添加"></a>用 List 集合之循环添加</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XML_Bzhan</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span>  List 集合循环写入 xml</span></span><br><span class="line">            List&lt;Person&gt; list = <span class="keyword">new</span> List&lt;Person&gt;() &#123;</span><br><span class="line">                <span class="keyword">new</span> Person() &#123;Name = <span class="string">"黄玲"</span>, Age = <span class="number">19</span>, Email = <span class="string">"hl@yahoo.com"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person() &#123;Name = <span class="string">"徐正龙"</span>, Age = <span class="number">29</span>, Email = <span class="string">"xzl@yahoo.com"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person() &#123;Name = <span class="string">"何宏伟"</span>, Age = <span class="number">39</span>, Email = <span class="string">"hhw@yahoo.com"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person() &#123;Name = <span class="string">"杨锁"</span>, Age = <span class="number">19</span>, Email = <span class="string">"yangsuo@yahoo.com"</span>&#125;,</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1. 创建一个 Dom 对象</span></span><br><span class="line">            XmlDocument xDoc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">            <span class="comment">// 2. 编写文档定义</span></span><br><span class="line">            XmlDeclaration xmlDoc = xDoc.CreateXmlDeclaration(<span class="string">"1.0"</span>, <span class="string">"utf-8"</span>, <span class="string">"yes"</span>);</span><br><span class="line">            xDoc.AppendChild(xmlDoc);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 编写一个根节点</span></span><br><span class="line">            XmlElement xmlRoot = xDoc.CreateElement(<span class="string">"List"</span>);</span><br><span class="line">            xDoc.AppendChild(xmlRoot);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 循环创建 Person 节点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.Count; i++) &#123;</span><br><span class="line">                <span class="comment">// 4.1 创建一个 Person 元素</span></span><br><span class="line">                XmlElement xmlPerson = xDoc.CreateElement(<span class="string">"Person"</span>);</span><br><span class="line">                XmlAttribute xmlAttrId = xDoc.CreateAttribute(<span class="string">"id"</span>);</span><br><span class="line">                xmlAttrId.Value = (i + <span class="number">1</span>).ToString();</span><br><span class="line">                <span class="comment">// 将属性添加到 Person 节点中</span></span><br><span class="line">                xmlPerson.Attributes.Append(xmlAttrId);</span><br><span class="line">                <span class="comment">// 创建 Name</span></span><br><span class="line">                XmlElement xmlName = xDoc.CreateElement(<span class="string">"Name"</span>);</span><br><span class="line">                xmlName.InnerText = list[i].Name;</span><br><span class="line">                xmlPerson.AppendChild(xmlName);</span><br><span class="line">                <span class="comment">// 创建 Age</span></span><br><span class="line">                XmlElement xmlAge = xDoc.CreateElement(<span class="string">"Age"</span>);</span><br><span class="line">                xmlAge.InnerText = list[i].Age.ToString();</span><br><span class="line">                xmlPerson.AppendChild(xmlAge);</span><br><span class="line">                <span class="comment">// 创建 Email</span></span><br><span class="line">                XmlElement xmlEmail = xDoc.CreateElement(<span class="string">"Email"</span>);</span><br><span class="line">                xmlEmail.InnerText = list[i].Email;</span><br><span class="line">                xmlPerson.AppendChild(xmlEmail);</span><br><span class="line">                <span class="comment">// 最后把 Person 加到跟节点之下</span></span><br><span class="line">                xmlRoot.AppendChild(xmlPerson);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将 Dom 对象写入到 xml 文件中</span></span><br><span class="line">                xDoc.Save(<span class="string">"list.xml"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">                MessageBox.Show(<span class="string">"OK"</span>);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Email &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入的 <code>List.xml</code>文件内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">List</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Person</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>黄玲<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Email</span>&gt;</span>hl@yahoo.com<span class="tag">&lt;/<span class="name">Email</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Person</span> <span class="attr">id</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>徐正龙<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>29<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Email</span>&gt;</span>xzl@yahoo.com<span class="tag">&lt;/<span class="name">Email</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Person</span> <span class="attr">id</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>何宏伟<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>39<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Email</span>&gt;</span>hhw@yahoo.com<span class="tag">&lt;/<span class="name">Email</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Person</span> <span class="attr">id</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>杨锁<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Email</span>&gt;</span>yangsuo@yahoo.com<span class="tag">&lt;/<span class="name">Email</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><span style="color:red">以上的方式是以编程的方式来实现的，写起来比较麻烦。</span></strong></p><h2 id="通过xmlDocument方式写入xml文件-推荐"><a href="#通过xmlDocument方式写入xml文件-推荐" class="headerlink" title="通过xmlDocument方式写入xml文件(推荐)"></a>通过xmlDocument方式写入xml文件(推荐)</h2><p>需添加 <code>using System.Xml.Linq;</code> 命名空间。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XML_Bzhan</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span>  通过 XDocument 方式写入 xml 文件</span></span><br><span class="line">            List&lt;Person&gt; list = <span class="keyword">new</span> List&lt;Person&gt;() &#123;</span><br><span class="line">                <span class="keyword">new</span> Person() &#123;Name = <span class="string">"黄玲"</span>, Age = <span class="number">19</span>, Email = <span class="string">"hl@yahoo.com"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person() &#123;Name = <span class="string">"徐正龙"</span>, Age = <span class="number">29</span>, Email = <span class="string">"xzl@yahoo.com"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person() &#123;Name = <span class="string">"何宏伟"</span>, Age = <span class="number">39</span>, Email = <span class="string">"hhw@yahoo.com"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Person() &#123;Name = <span class="string">"杨锁"</span>, Age = <span class="number">19</span>, Email = <span class="string">"yangsuo@yahoo.com"</span>&#125;,</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1.创建一个 Dom 对象</span></span><br><span class="line">            XDocument xDoc = <span class="keyword">new</span> XDocument();<span class="comment">// 在 using System.Xml.Linq; 命名空间下。</span></span><br><span class="line">            XDeclaration xDec = <span class="keyword">new</span> XDeclaration(<span class="string">"1.0"</span>, <span class="string">"utf-8"</span>, <span class="string">"no"</span>);</span><br><span class="line">            <span class="comment">//xDoc.Add(xDec);  // 这样写不对，会出错误。</span></span><br><span class="line">            xDoc.Declaration = xDec; <span class="comment">// 设置 xml 文档的定义</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.创建根节点</span></span><br><span class="line">            XElement rootElement = <span class="keyword">new</span> XElement(<span class="string">"List"</span>);</span><br><span class="line">            xDoc.Add(rootElement);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 循环 List 集合创建 Person 节点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.Count; i++) &#123;</span><br><span class="line">                <span class="comment">// 为每个 Person 对想创建一个 Person 元素</span></span><br><span class="line">                XElement xElementPerson = <span class="keyword">new</span> XElement(<span class="string">"Person"</span>);</span><br><span class="line">                xElementPerson.SetAttributeValue(<span class="string">"id"</span>, (i + <span class="number">1</span>).ToString());</span><br><span class="line"></span><br><span class="line">                xElementPerson.SetElementValue(<span class="string">"Name"</span>, list[i].Name);</span><br><span class="line">                xElementPerson.SetElementValue(<span class="string">"Age"</span>, list[i].Age);</span><br><span class="line">                xElementPerson.SetElementValue(<span class="string">"Email"</span>, list[i].Email);</span><br><span class="line"></span><br><span class="line">                rootElement.Add(xElementPerson);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4. 保存到文件</span></span><br><span class="line">            xDoc.Save(<span class="string">"listNew.xml"</span>);</span><br><span class="line">            MessageBox.Show(<span class="string">"OK"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Email &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的<code>listNew.xml</code>文件内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">List</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Person</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>黄玲<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Email</span>&gt;</span>hl@yahoo.com<span class="tag">&lt;/<span class="name">Email</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Person</span> <span class="attr">id</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>徐正龙<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>29<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Email</span>&gt;</span>xzl@yahoo.com<span class="tag">&lt;/<span class="name">Email</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Person</span> <span class="attr">id</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>何宏伟<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>39<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Email</span>&gt;</span>hhw@yahoo.com<span class="tag">&lt;/<span class="name">Email</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Person</span> <span class="attr">id</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>杨锁<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Email</span>&gt;</span>yangsuo@yahoo.com<span class="tag">&lt;/<span class="name">Email</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可见，是一样的。</p><h2 id="xml-写入总结"><a href="#xml-写入总结" class="headerlink" title="xml 写入总结"></a><a href="https://www.bilibili.com/video/av24227087/?p=4" target="_blank" rel="noopener">xml 写入总结</a></h2><h3 id="写入Xm1的两种方式："><a href="#写入Xm1的两种方式：" class="headerlink" title="写入Xm1的两种方式："></a>写入Xm1的两种方式：</h3><ol><li><p>XmlDocument类，标准的Dom方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kmlDocument document = new XmlDocument();</span><br><span class="line">document.CreateElement();</span><br><span class="line">xxxxxxxx.CreateAttribute();</span><br></pre></td></tr></table></figure></li><li><p>XDocument类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XElement x = new xxx();</span><br><span class="line">...Add ();</span><br></pre></td></tr></table></figure></li></ol><h3 id="读取Xml"><a href="#读取Xml" class="headerlink" title="读取Xml"></a>读取Xml</h3><ol><li>遍历所有节点元素，分别读取</li><li>根据节点名称，或者是id等等一些元素，快速获取某个节点。|</li></ol><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.bilibili.com/video/av24227087/?p=3" target="_blank" rel="noopener">link-01</a>  // 通过XmlDocument与XDocument方式写入Xml<br></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;XML（可扩展标记语言）&quot;&gt;&lt;a href=&quot;#XML（可扩展标记语言）&quot; class=&quot;headerlink&quot; title=&quot;XML（可扩展标记语言）&quot;&gt;&lt;/a&gt;XML（可扩展标记语言）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;XML:eXtensible Markup La
      
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 泛型委托</title>
    <link href="https://www.andyvj.com/2019/07/28/190728N02/"/>
    <id>https://www.andyvj.com/2019/07/28/190728N02/</id>
    <published>2019-07-28T13:58:41.000Z</published>
    <updated>2019-07-29T15:22:25.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义泛型委托"><a href="#自定义泛型委托" class="headerlink" title="自定义泛型委托"></a>自定义泛型委托</h2><p>自定义泛型委托：<br><a id="more"></a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace 泛型委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> MD&lt;T&gt;(T args); <span class="comment">//  自定义泛型委托</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MD&lt;<span class="keyword">string</span>&gt; mD = M2;</span><br><span class="line">            <span class="comment">// MD&lt;string&gt; mD = new MD&lt;string&gt;(M2); // 这种方式也可以。</span></span><br><span class="line">            mD(<span class="string">"我是自定义泛型委托。。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">M2</span>(<span class="params"><span class="keyword">string</span> args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是自定义泛型委托。。。</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><strong>自己写程序的时候没有必要自己定义委托，因为 .Net 里面就已经有了。</strong></p><h2 id="Action-lt-gt"><a href="#Action-lt-gt" class="headerlink" title="Action&lt;&gt;"></a>Action&lt;&gt;</h2><p><code>Action&lt;T&gt;</code> 的泛型有 16 个重载：</p><p><img src="http://image.huvjie.com/190728N02_img01.jpg" alt=""></p><p><code>Action委托</code>，的非泛型版本，就是一个<strong>无参数</strong>，<strong>无返回值的</strong>委托。</p><p><code>Action的泛型版本</code>，就是一个<strong>无返回值</strong>，但是<strong>参数可以变化</strong>的委托。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">namespace 泛型委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Action&lt;<span class="keyword">string</span>&gt; a1 = (str) =&gt; &#123; Console.WriteLine(str); &#125;;</span><br><span class="line">            a1(<span class="string">"我是 Action 泛型委托 a1。。。"</span>);</span><br><span class="line"></span><br><span class="line">            Action&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a2 = (a, b) =&gt; &#123; Console.WriteLine(<span class="string">$"a + b = <span class="subst">&#123;a + b&#125;</span>"</span>); &#125;;</span><br><span class="line">            a2(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我是 Action 泛型委托 a1。。。</span><br><span class="line">a + b = 3</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="Func-lt-gt"><a href="#Func-lt-gt" class="headerlink" title="Func&lt;&gt;"></a>Func&lt;&gt;</h2><p><code>Func&lt;&gt;</code>有没有参数不一定，一定是有返回值的。</p><p><code>Func委托</code>只有一个泛型版本的，没有非泛型版本的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace 泛型委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 泛型的最后一个参数类型是返回值类型</span></span><br><span class="line">            Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">double</span>&gt; f1 = ( a,  b,  c) =&gt; &#123;</span><br><span class="line">                <span class="keyword">double</span> fTemp = Convert.ToDouble(a + b + c);</span><br><span class="line">                <span class="keyword">return</span> fTemp;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> result = f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="Predicate-lt-gt"><a href="#Predicate-lt-gt" class="headerlink" title="Predicate&lt;&gt;"></a><code>Predicate&lt;&gt;</code></h2><p><code>bool</code> 类型的委托。</p><p><code>Predicate&lt;T&gt;</code>委托定义如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public delegate bool Predicate&lt;T&gt;（T obj）</span><br></pre></td></tr></table></figure><p>解释：此委托返回一个<code>bool</code>值的方法  </p><p>在实际开发中，<code>Predicate&lt;T&gt;</code>委托变量引用一个<strong>判断条件函数</strong>，在判断条件函数内部书写代码表明函数参数所引用的对象应该满足的条件，条件满足时返回<code>true</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace 泛型委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> StudentId &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">string</span> StudentName &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            List&lt;Student&gt; stuList = <span class="keyword">new</span> List&lt;Student&gt;() &#123;</span><br><span class="line">                <span class="keyword">new</span> Student()&#123; StudentId = <span class="number">1001</span>, StudentName = <span class="string">"小张"</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> Student()&#123; StudentId = <span class="number">1008</span>, StudentName = <span class="string">"小李"</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> Student()&#123; StudentId = <span class="number">1009</span>, StudentName = <span class="string">"小王"</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> Student()&#123; StudentId = <span class="number">1003</span>, StudentName = <span class="string">"小赵"</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> Student()&#123; StudentId = <span class="number">1005</span>, StudentName = <span class="string">"小刘"</span> &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// List&lt;T&gt; 集合中定义了一个 FindAll 方法:public T FindAll(Predicate&lt;T&gt; match)</span></span><br><span class="line">            List&lt;Student&gt; list = stuList.FindAll(s =&gt; s.StudentId &gt; <span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (Student item <span class="keyword">in</span> list) &#123;</span><br><span class="line">                Console.WriteLine(item.StudentId  + item.StudentName);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1008小李</span><br><span class="line">1009小王</span><br><span class="line">1005小刘</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.bilibili.com/video/av24227074/?p=3" target="_blank" rel="noopener">link-01</a>  // 泛型委托 -&gt; 赵晓虎<br>2.<a href="https://www.bilibili.com/video/av44355940/?p=8" target="_blank" rel="noopener">link-02</a>  // P8第20节-6.Predicate委托<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义泛型委托&quot;&gt;&lt;a href=&quot;#自定义泛型委托&quot; class=&quot;headerlink&quot; title=&quot;自定义泛型委托&quot;&gt;&lt;/a&gt;自定义泛型委托&lt;/h2&gt;&lt;p&gt;自定义泛型委托：&lt;br&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 事件和委托(鸿门宴示例)</title>
    <link href="https://www.andyvj.com/2019/07/28/190728N01/"/>
    <id>https://www.andyvj.com/2019/07/28/190728N01/</id>
    <published>2019-07-28T13:16:26.000Z</published>
    <updated>2019-07-28T13:23:03.409Z</updated>
    
    <content type="html"><![CDATA[<p>来自网上的一片<a href="https://www.cnblogs.com/yinqixin/p/5056307.html" target="_blank" rel="noopener">博文</a>。</p><p>悟：做事的思想应是<strong>先整体后局部，总分总</strong>。这篇博文有很好的写程序的思路，值得学习。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">namespace LianXi_事件和委托</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">RaiseEventHandler</span>(<span class="params"><span class="keyword">string</span> hand</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">FallEventHandler</span>(<span class="params"></span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            A a = <span class="keyword">new</span> A();</span><br><span class="line">            B b = <span class="keyword">new</span> B(a);</span><br><span class="line">            C c = <span class="keyword">new</span> C(a);</span><br><span class="line"></span><br><span class="line">            a.Raise(<span class="string">"左"</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"============="</span>);</span><br><span class="line">            a.Fall();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">event</span> RaiseEventHandler RaiseEvent;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">event</span> FallEventHandler FallEvent;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Raise</span>(<span class="params"><span class="keyword">string</span> hand</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"首领举&#123;0&#125;杯。"</span>, hand);</span><br><span class="line">                <span class="keyword">if</span> (RaiseEvent != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    RaiseEvent(hand);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fall</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"首领摔杯。"</span>);</span><br><span class="line">                <span class="keyword">if</span> (FallEvent != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    FallEvent();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">B</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> A a;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">B</span> (<span class="params">A a</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>.a = a;</span><br><span class="line">                a.FallEvent += a_FallEvent;</span><br><span class="line">                a.RaiseEvent += a_RaiseEvent;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a_RaiseEvent</span>(<span class="params"><span class="keyword">string</span> hand</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">if</span> (hand == <span class="string">"左"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Attack();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a_FallEvent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Attack();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"B 发动攻击。。。"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">C</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span>  A a;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">C</span>(<span class="params">A a</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>.a = a;</span><br><span class="line">                a.FallEvent += a_FallEvent;</span><br><span class="line">                a.RaiseEvent += a_RaiseEvent;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a_RaiseEvent</span>(<span class="params"><span class="keyword">string</span> hand</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">if</span> (hand == <span class="string">"右"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Attack();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a_FallEvent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Attack();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"C 发动攻击。。。"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">首领举左杯。</span><br><span class="line">B 发动攻击。。。</span><br><span class="line">=============</span><br><span class="line">首领摔杯。</span><br><span class="line">B 发动攻击。。。</span><br><span class="line">C 发动攻击。。。</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.cnblogs.com/yinqixin/p/5056307.html" target="_blank" rel="noopener">link-01</a> // 分分钟用上C#中的委托和事件<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自网上的一片&lt;a href=&quot;https://www.cnblogs.com/yinqixin/p/5056307.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;悟：做事的思想应是&lt;strong&gt;先整体后局部，总分总&lt;/strong&gt;。这篇博文有很好的写程序的思路，值得学习。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#.Net基础加强第四天-接口</title>
    <link href="https://www.andyvj.com/2019/07/27/190727N04/"/>
    <id>https://www.andyvj.com/2019/07/27/190727N04/</id>
    <published>2019-07-27T11:40:03.000Z</published>
    <updated>2019-07-27T12:41:50.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>什么是接口？<ul><li>接口就是一种<span style="color:red">规范，协议（*）</span>，约定好遵守某种规范就可以写通用的代码。</li><li>定义了一组具有各种功能的方法。（只是一种能力，没有具体实现，像抽象方法一样，“光说不做”）</li></ul></li><li>接口存在的意义：<strong>多态</strong>。多态的意义：程序可扩展性。最终一让程序变的更灵活，节省成本，提高效率。</li><li>接口解决了类的多继承的问题</li><li>接口解决了类继承以后体积庞大的问题。</li><li>接口之间可以实现多继承</li><li>先从语法角度看一下接口，与抽象类类似。</li></ul><a id="more"></a><h2 id="接口的定义和一些概念"><a href="#接口的定义和一些概念" class="headerlink" title="接口的定义和一些概念"></a>接口的定义和一些概念</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口不能实例化</span></span><br><span class="line"><span class="comment">//接口就是让子类来实现的。</span></span><br><span class="line"><span class="comment">//1.接口可以实现“多继承”（多实现），一个类只能继承自一个父类，但是可以实现多个接口。</span></span><br><span class="line"><span class="comment">//2.接口解决了不同类型之间的多态问题，比如鱼与船不是同一类型，但是都能在水里“游泳”，</span></span><br><span class="line"><span class="comment">//只是万式不一样，要对游泳”实现多态，就只能考虑接口。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口，建议：一定要以大写 I 开头</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFlyable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//接口里面能包含什么成员，接口里面只能包含【方法】,</span></span><br><span class="line">    <span class="comment">//(属性，索引器，事件)</span></span><br><span class="line">    <span class="comment">//归根结底是只包含 [方法]</span></span><br><span class="line">    <span class="comment">//接口中的所有成员，都不能显示的写任何访问修饰符</span></span><br><span class="line">    <span class="comment">//默认是pub1ic的访问修饰符</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SayHi</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">M1</span>(<span class="params"><span class="keyword">string</span> msg</span>)</span>;</span><br><span class="line">    <span class="comment">//在接口中这样写表示是一个未实现的属性。</span></span><br><span class="line">    <span class="keyword">string</span> Name &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//索引器 </span></span><br><span class="line">    <span class="keyword">string</span> <span class="keyword">this</span> [<span class="keyword">int</span> index] &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口中的成员，子类必须实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Myclass</span> : <span class="title">IFlyable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sayhi</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Hi..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">M1</span>(<span class="params"><span class="keyword">string</span> msg</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(msg + <span class="string">"Hi..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; name = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> <span class="keyword">this</span>[<span class="keyword">int</span> index] &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个接口练习"><a href="#两个接口练习" class="headerlink" title="两个接口练习"></a>两个接口练习</h2><ul><li>案例（继承了一个类，同时实现了其他接口）  <ul><li>鸟-麻雀 sparrow[‘spereu]，鸵鸟 ostrich[ostrit]，企鹅penguin[pengwin]，鹦鹉parrot[paeret]</li><li>鸟能飞，鸵鸟，企鹅不能。。。你怎么办</li></ul></li><li>子类继承抽象类，实现接口</li><li>接口中的成员必须不能有实现，接口不能实例化。</li><li>接口中的成员不能有访问修饰符，隐式公开<code>public</code>接口中可以有<strong>属性、方法、索引器等（其实都是方法）</strong>，但不能有字段</li><li>接口中的所有成员必须被<span style="color:red">子类中全部实现</span>，除非<strong>子类是抽象类</strong>，把接口中的成员标记为抽象的。</li><li><strong>练习：</strong>从学生，老师，校长类中抽象出人的类，学生和老师都有收作业的方法，但是校长不会收作业</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">namespace xueXi_接口</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Class1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            IFlyable bird = <span class="keyword">new</span> Parrot()<span class="comment">/*Sparrow()*/</span>;</span><br><span class="line">            bird.Fly();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 鸟</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bird</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Brak</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"叫...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFlyable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 麻雀</span></span><br><span class="line">    <span class="comment">// 当一个类同时继承父类，并且实现了多个接口的时候，必须将继承类，写在第一个。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sparrow</span> : <span class="title">Bird</span>, <span class="title">IFlyable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"麻雀飞..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 鸵鸟</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Ostrich</span> : <span class="title">Bird</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 企鹅</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Penguin</span>: <span class="title">Bird</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 鹦鹉</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Parrot</span> : <span class="title">Bird</span>, <span class="title">IFlyable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"鹦鹉飞..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">namespace xueXi_接口</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Class2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ICollectHomework person = <span class="keyword">new</span> Teacher()<span class="comment">/*Student()*/</span>;</span><br><span class="line">            person.Collect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICollectHomework</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Collect</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span>, <span class="title">ICollectHomework</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Collect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"学生收作业..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span> : <span class="title">Person</span>, <span class="title">ICollectHomework</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Collect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"老师收作业..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolMaster</span> : <span class="title">Person</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="再看一个接口案例"><a href="#再看一个接口案例" class="headerlink" title="再看一个接口案例"></a>再看一个接口案例</h2><ul><li>回顾：接口是一种规范。<ul><li>什么是规范？理解规范的意义。规范，就是告诉我们要做什么，具有什么能力。</li><li>在程序中为什么需要规范？（多态，可以让我们编写通用的代码，提高程序的可扩展性）</li><li>接口就像“法律”。</li></ul></li><li>登记方法(接口作为参数,实现多态)<ul><li><code>DengJi(Person person)</code>//人口登记,<code>Person</code>是抽象类</li><li><code>DengJi(Car car)</code>//汽车也要登记</li><li><code>DengJi(House house)</code>//房子也要登记.<code>JiKou</code></li><li><code>DengJi(lJieKou jk);</code></li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">namespace xuexi_接口练习</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            German g = <span class="keyword">new</span> German();</span><br><span class="line">            Car car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">            Dengji(g);</span><br><span class="line">            Dengji(car);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Dengji</span>(<span class="params">IShowInfo dengji</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            dengji.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IShowInfo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Chinese</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Americn</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">German</span> : <span class="title">IShowInfo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"德国人...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Car</span> : <span class="title">IShowInfo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"兰博基尼..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示接口"><a href="#显示接口" class="headerlink" title="显示接口"></a><a href="https://www.bilibili.com/video/av10434119/?p=5" target="_blank" rel="noopener">显示接口</a></h2><ul><li>为什么要显示实现接口？<ul><li>方法重名后的解决办法。</li></ul></li><li>显示实现接口后，<span style="color:red">只能通过接口来调用</span>。不能通过类对象本身来调用（显示实现的接口，查看<code>IL</code>是<code>private</code>的，<strong>防止通过类来调用</strong>）</li><li>为什么要有“显示实现接口”？<ul><li>可以解决重名方法的问题。T</li></ul></li><li>什么是“显示实现接口”？<ul><li>实现接口中的方法时用：<code>接口名.方法名()</code>，并且没有访间修饰符，<code>private</code></li></ul></li><li>“显示实现接口”后怎么调用？<ul><li>只能通过接口变量来调用，因为显示实现接口默认为<code>private</code>。</li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">namespace xuexi_显示接口</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            IFace1 stu = <span class="keyword">new</span> Student();</span><br><span class="line">            stu.Fly();</span><br><span class="line">            IFace2 stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">            stu1.Fly();</span><br><span class="line"></span><br><span class="line">            IFace1 stu3 = <span class="keyword">new</span> Teacher();</span><br><span class="line">            stu3.Fly();</span><br><span class="line">            IFace2 stu4 = <span class="keyword">new</span> Teacher();</span><br><span class="line">            stu4.Fly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IFace1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IFace2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">IFace1</span>, <span class="title">IFace2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Iface1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Teacher</span> : <span class="title">IFace1</span>, <span class="title">IFace2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IFace2.Fly() <span class="comment">// 只能私有，通接口调用</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的总结"><a href="#接口的总结" class="headerlink" title="接口的总结"></a>接口的总结</h2><ol><li>接口是一种规范。为了多态。</li><li>接口不能被实例化。</li><li>接口中的成员不能加“访问修饰符”，接口中的成员访问修饰符为<code>public</code>，不能修改。（默认为<code>public</code>）</li><li>接口中的成员不能有任何实现（“光说不做”，只是定义了一组未实现的成员）</li><li>接口中只能有<strong>方法、属性、索引器、事件，不能有“字段”</strong>。</li><li>接口与接口之间可以继承，并且可以多继承。</li><li>实现接口的子类必须实现该接口的全部成员。</li><li>一个类可以同时继承一个类并实现多个接口，如果一个子类同时继承了<code>父类A</code>，并实现了<code>接口IA</code>，那么语法上<code>A</code>必须写在<code>IA</code>的前面。<code>class MyClass:A, IA {}</code>，因为类是单继承的。</li><li>当一个抽象类实现接口的时候，如果不想把接口中的成员实现，可以把该成员实现为<code>abstract</code>。（抽象类也能实现接口，用<code>abstrac</code>标记）</li><li>“显示实现接口”，只能通过接口变量来调用（因为显示实现接口后成员为<code>private</code>）。</li></ol><h2 id="使用接口的建议"><a href="#使用接口的建议" class="headerlink" title="使用接口的建议"></a>使用接口的建议</h2><ul><li>面向抽象编程，使用抽象（父类、抽象类、接口）不使用具体。</li><li>“向上转型”</li><li>在编程时：<ul><li>接口 -&gt; 抽象类 -&gt; 父类 -&gt; 具体类（在定义方法参数、返回值、声明变量的时候能用抽象就不要用具体。）</li><li>能使用接口就不用抽象类，能使用抽象类就不用类，能用父类就不用子类。</li><li>避免定义“体积庞大的接口”、“多功能接口”，会造成“接口污染”。只把相关联的一组成员定义到一个接口中（尽量在接口中少定义成员）。<span style="color:red">单一职责原则</span></li><li>定义多个职责单一的接口（小接口）（组合使用）。（印刷术与活字印刷术）</li></ul></li><li>随着学习的深入再继续体会接口的作用。</li></ul><h2 id="抽象类复习、简单工厂设计模式复习"><a href="#抽象类复习、简单工厂设计模式复习" class="headerlink" title="抽象类复习、简单工厂设计模式复习"></a>抽象类复习、简单工厂设计模式复习</h2><ul><li>抽像类：<ul><li>不能被实例化，需要被继承。多态。</li><li>子类必须重写父类中的所有的抽象成员，除非：子类也是一个抽象类。</li><li>抽象成员在父类中不能有任何实现。</li><li>抽象类中可以有实例成员。</li><li>抽象成员的访问修饰符不能是<code>private</code></li><li>抽象成员只能写在抽象类中。</li><li>abstract</li></ul></li><li>作业：通过案例笔记本电脑的选择。<ul><li>笔记本电脑父类<code>NoteBook</code>、不同品牌的笔记本产品。（继承+简单工厂）</li></ul></li></ul><h2 id="接口复习"><a href="#接口复习" class="headerlink" title="接口复习"></a>接口复习</h2><ul><li>定义接口的语法（<code>interface</code>）<ul><li>接口中只能包含<strong>方法、属性、索引器、事件</strong>。不能包含字段。见备注1（貌似事件像一个字段？其实是两个方法。<code>reflector</code>查看源码）</li><li>接口中的成员不能有任何的实现（真正的“光说不做”。思考这样做的意义。联想抽象类中的抽象方法。）</li><li>接口中的成员不能写访间修饰符。</li></ul></li><li>使用接口的语法<ul><li>一个类可以实现多个接口。</li><li>实现接口的类，必须把接口中的所有成员都实现。</li><li>子类实现接口中的成员时，不能修改成员的访间修饰符、参数列表、方法名等。（与方法重写一样）</li></ul></li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li>如何使用<code>virtual</code>和<code>override</code>？<ul><li><code>Person per = new Student();</code></li><li><code>per.SasHI()</code>调用的子类重写的<code>SayHi</code>方法（语法、应用（多态））</li></ul></li><li>如何使用<code>abstract</code>和<code>override</code>？</li><li>“方法重载<code>overload</code>”、“方法重写<code>override</code>”、”隐藏<code>new</code>”是同一个概念吗？</li><li>抽象类和接口的区别？见备注1.<ul><li>抽象类适用于同一系列，并且有需要继承的成员。</li><li>接口适用于不同系列的类具有相同的动作（行为、动作、方法）。</li><li>对于不是相同的系列，但具有相同的行为，这个就考虑使用接口。</li><li>接口解决了类不能多继承问题。</li></ul></li></ol><p><code>virtual</code>： 是用来标记虚方法的。<br><code>override</code>： 是进行方法重写的，当子类继承父类的时候重写父类的方法。</p><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.bilibili.com/video/av10434119" target="_blank" rel="noopener">link-01</a>  //  B站 -&gt; C#.Net基础加强第四天-接口与异常处理 -&gt; 传智播客<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是接口？&lt;ul&gt;
&lt;li&gt;接口就是一种&lt;span style=&quot;color:red&quot;&gt;规范，协议（*）&lt;/span&gt;，约定好遵守某种规范就可以写通用的代码。&lt;/li&gt;
&lt;li&gt;定义了一组具有各种功能的方法。（只是一种能力，没有具体实现，像抽象方法一样，“光说不做”）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口存在的意义：&lt;strong&gt;多态&lt;/strong&gt;。多态的意义：程序可扩展性。最终一让程序变的更灵活，节省成本，提高效率。&lt;/li&gt;
&lt;li&gt;接口解决了类的多继承的问题&lt;/li&gt;
&lt;li&gt;接口解决了类继承以后体积庞大的问题。&lt;/li&gt;
&lt;li&gt;接口之间可以实现多继承&lt;/li&gt;
&lt;li&gt;先从语法角度看一下接口，与抽象类类似。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#.Net基础加强十一天-委托</title>
    <link href="https://www.andyvj.com/2019/07/27/190727N03/"/>
    <id>https://www.andyvj.com/2019/07/27/190727N03/</id>
    <published>2019-07-27T08:35:56.000Z</published>
    <updated>2019-07-27T08:51:29.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="委托复习"><a href="#委托复习" class="headerlink" title="委托复习"></a>委托复习</h2><ol><li>委托是一种数据类型，像类一样的一种数据类型。<span style="color:red">一般都是直接在命名空间中定义</span>。</li><li>定义委托时，需要指明<strong>返回值类型、委托名与参数列表</strong>，这样就能确定该类型的委托能存储什么样的方法。</li><li>使用委托：<ol><li>声明委托变量。</li><li>委托是一个引用类型，就像类一样，所以当声明委托变量后，如果不赋值则该委托变量为                <code>null</code>。所以在使用委托变量前最好做非空校验 <code>weituo！=null</code>。</li><li>委托类型的变量只能赋值一个委托类型的对象。</li></ol></li></ol><p><strong>委托，像 C++ 的函数指针。</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyDelegate md = <span class="keyword">new</span> MyDelegate(M1);</span><br><span class="line">    md();</span><br><span class="line">    MyDelegate md1 = M1; <span class="comment">// 这种定义的方法是</span></span><br><span class="line">    <span class="comment">// 和上面是一样的，省略了 new。</span></span><br><span class="line">    md1.Invoke(); <span class="comment">// 这种调用的方法是上面写法的完整版。</span></span><br><span class="line">    <span class="comment">// Invoke(/*有参数的话可以在括号中传递。*/)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">M1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"M1 函数。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我是 M1 函数</span><br><span class="line">我是 M1 函数</span><br><span class="line">请按任意键继续.</span><br></pre></td></tr></table></figure></p><h2 id="委托在什么情况下用"><a href="#委托在什么情况下用" class="headerlink" title="委托在什么情况下用"></a>委托在什么情况下用</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    <span class="comment">/* ......</span></span><br><span class="line"><span class="comment">    这里是要执行的代码，而这段代码的不确定性很大。根据调用者的不同可能执行的</span></span><br><span class="line"><span class="comment">    代码不一样。这时候就可以把这段代码封装起来，封装成一个委托类型。通过委托</span></span><br><span class="line"><span class="comment">    变量来代替，将来你传递一个什么委托变量，这个地方就执行什么方法。</span></span><br><span class="line"><span class="comment">    这样的意思，代码提前写好了，在这个地方先占一个位，这里执行的代码是活的。</span></span><br><span class="line"><span class="comment">    是由传递过来的方法确定的。</span></span><br><span class="line"><span class="comment">   ......*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>委托就是事先占了一个位置，执行的方法待定，由传递过来的方法决定，较的灵活。</p><h2 id="实例练习"><a href="#实例练习" class="headerlink" title="实例练习"></a>实例练习</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">练习3： // 把邮箱名替换成※号  </span><br><span class="line">zxh@itcast.cn   →  ***@itcast.cn  </span><br><span class="line">steve_zhao@163.com  →  **********@163.com  </span><br><span class="line">sk@codeedu.com  →  **@codeedu.com</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"请输入一个邮箱地址："</span>);</span><br><span class="line">        <span class="keyword">string</span> email = Console.ReadLine();</span><br><span class="line">        email = Regex.Replace(email, <span class="string">@"(\w+)(@\w+\.\w)"</span>, ReplaceMethod, RegexOptions.ECMAScript);</span><br><span class="line">        <span class="comment">// ▲ 第三个参数直接传递一个返回值为 string 类型的方法，</span></span><br><span class="line">        <span class="comment">// 这里就用的委托，不是定死的，是活的。</span></span><br><span class="line"></span><br><span class="line">       Console.WriteLine(email);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ReplaceMethod</span>(<span class="params">Match match</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> uid = match.Groups[<span class="number">1</span>].Value;</span><br><span class="line">    <span class="keyword">string</span> others = match.Groups[<span class="number">2</span>].Value;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; uid.Length; i++) &#123;</span><br><span class="line">        sb.Append(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.ToString() + others;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托的使用"><a href="#委托的使用" class="headerlink" title="委托的使用"></a>委托的使用</h2><ul><li>声明委托的方式: <code>delegate</code> 返回值类型 委托类型名(参数)   比如 <code>delegate void StringProcess(string s);</code> 注意这里的除了前面的 <code>delegate</code>,剩下部分和声明一个函数一样,但是<code>StringProcess</code>不是函数名,而是委托类型名。</li><li>存储什么样的方法就声明什么类型(方法参数与返回值)的委托。</li><li>声明的委托是一种类型,就像<code>int</code>、<code>Person</code>一样,如果要用的话还要声明委托类型的变量,声明委托类型变量的方式:<code>StringProcess f1;</code></li><li>将委托类型变量指向函数 <code>StringProcess sp = new StringProcess(SayHello)</code>,这样就可以像调用普通函蒙一样把<code>sp</code>当成函教用了.委托可以看做是函数的指针.整数可以用整数变量指向它,对象可以用对象变量指向它,函数也可以用委托变量指向它.和直接调用函数的区别:用委托就可以指向任意的函数,哪怕是之前没定义的都可以,而不使用受限于那几种。</li><li>将委托类型变量指向函数还可以简化成<code>StringProcess sp = SayHelo</code>,编译器帮我们进行了<code>new</code>.但是不能<code>sp = Printit()</code>,因为这样就成了函数调用。</li></ul><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.bilibili.com/video/av24227074" target="_blank" rel="noopener">link-01</a> // C#.Net基础加强十一天-委托 事件 反射<br></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;委托复习&quot;&gt;&lt;a href=&quot;#委托复习&quot; class=&quot;headerlink&quot; title=&quot;委托复习&quot;&gt;&lt;/a&gt;委托复习&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;委托是一种数据类型，像类一样的一种数据类型。&lt;span style=&quot;color:red&quot;&gt;一般都是直接在命名空
      
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>英语：关于thing的表达</title>
    <link href="https://www.andyvj.com/2019/07/27/190727N01/"/>
    <id>https://www.andyvj.com/2019/07/27/190727N01/</id>
    <published>2019-07-27T06:37:22.000Z</published>
    <updated>2019-07-27T07:03:05.781Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.huvjie.com/190727N01_img01.mp3" target="_blank" rel="noopener">音频。</a></p><a id="more"></a><embed height="50" width="100%" autostart="false" loop="false" src="http://image.huvjie.com/190727N01_img01.mp3"><ul><li>It’s my thing.   // 是我擅长的。</li></ul><ul><li>I know a thing or two. //  略知一二。</li><li>I have a thing for you. //  我喜欢你</li><li>Sure thing!  //  没问题</li></ul><p><hr><br><span style="color:gray;font-size:12px"><br>参考： 抖音 -&gt; @斑马英语ZebraEnglish<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://image.huvjie.com/190727N01_img01.mp3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;音频。&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="基础学科" scheme="https://www.andyvj.com/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="英语" scheme="https://www.andyvj.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>C#.Net基础加强第六天：集合之ArrayList</title>
    <link href="https://www.andyvj.com/2019/07/27/190727N02/"/>
    <id>https://www.andyvj.com/2019/07/27/190727N02/</id>
    <published>2019-07-27T03:08:41.000Z</published>
    <updated>2019-07-27T03:11:46.367Z</updated>
    
    <content type="html"><![CDATA[<p>数组的长度声明后就是固定的，且都是存的同一种类型的数据。</p><p>集合的长度是不固定的(主要特征)，可以存不同类型的元素；但泛型集合必须是同一种类型的集合<t>。</t></p><p>集合内部的原理用的还是数组，都是依赖于数组的，内部存数据都是存到了数组中。</p><a id="more"></a><h3 id="集合的命名空间"><a href="#集合的命名空间" class="headerlink" title="集合的命名空间"></a>集合的命名空间</h3><ul><li><code>using System.Collections;</code>（非泛型集合）</li><li><code>using System.Collections.Generic;</code>（泛型集合）</li></ul><h3 id="常用集合"><a href="#常用集合" class="headerlink" title="常用集合"></a>常用集合</h3><!--![](https://note.youdao.com/yws/public/resource/372ce59fbbc603e25d588119c6be0e91/xmlnote/6494BA13D3BF40B6B238DBC7D4821466/55283)--><ul><li>类似数组集合：<code>AraylList、List&lt;T&gt;</code></li><li>“键值对”集合（“哈希表”集合）：<code>Hashtable</code>、<code>Dictionary&lt;K,V&gt;</code></li><li>“堆栈”集合：<code>Stack</code>、<code>Stack&lt;T&gt;</code>（LIFO）Last In First Out</li><li>“队列”集合：<code>Queue</code>、<code>Queue&lt;T&gt;</code>（FIFO）First In First Out</li><li>“可排序键值对“集合：（插入、检索没有“哈希表”集合高效）<ul><li><code>SortedlList</code>、<code>SortedList&lt;K, V&gt;</code>（占用内存更少，可以通过索引访词）</li><li><code>SortedDictionary&lt;K,V&gt;</code>（占用内存更多，没有索引，但插入、删除元素的速度比<code>SortedList</code>快）</li></ul></li><li><code>Set</code>集合：无序、不重复。<code>HashSet&lt;T&gt;</code>，可以将HashSet类视为不包含值的<code>Dictionary</code>集合。与<code>List&lt;T&gt;</code>类似。<code>SortedSet&lt;T&gt;</code>（.net4.0支持，有序无重复集合）</li><li>“双向链表”集合：<code>LinkedList&lt;T&gt;</code>，增删速度快。</li></ul><h3 id="增删改查遍历"><a href="#增删改查遍历" class="headerlink" title="增删改查遍历"></a>增删改查遍历</h3><p><code>ArrayList</code>、<code>Hashtable</code>、<code>List&lt;T&gt;</code>、 <code>Dictionary&lt;K,V&gt;</code> ：<br><!--![](https://note.youdao.com/yws/public/resource/372ce59fbbc603e25d588119c6be0e91/xmlnote/30219BF8FA4148EF96FE91A96CB6D432/55320)--></p><ul><li>数组的特点：<strong>类型统一</strong>、<strong>长定固定</strong>。</li><li>集合常用操作添加、遍历、移除</li><li>命名空间<code>System.Colections</code></li><li><code>ArayList</code>可变长度数组，使用类似于数组<ul><li>属性<code>Capacity</code>（集合中以容纳元素的个数，翻信增长）；<code>Count</code>（集合中实际存放的元素的个数。）</li><li>方法  <ul><li><code>Add(10)</code> <code>AddRange(ICollection c)</code> <code>Remove()</code> <code>RemoveAt()</code> <code>Clear()</code></li><li><code>Contains()</code> <code>ToArray()</code> <code>Sort()</code> 排序 <code>Reverse()</code>//反转</li></ul></li></ul></li><li><code>Hashtable</code> 键值对的集合，类似于字典，<code>Hashtable</code>在查找元素的时候，速度很快。<ul><li><code>Add(object key, object value)</code>;</li><li><code>hash[&quot;key&quot;]</code>;</li><li><code>hash[&quot;key&quot;]=&quot;修改&quot;</code>;</li><li><code>ContainsKey(key)</code>;</li><li><code>Remove(&quot;key&quot;)</code>;</li><li>遍历;</li><li><code>hash.Keys</code>;</li><li><code>hasth.Values/Dictionary Entry</code>;</li><li>键值对集合中的”键”，绝对不能重复。</li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line">namespace 集合</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ArrayList arrayList = <span class="keyword">new</span> ArrayList();<span class="comment">// 注意提示有几个重载函数。</span></span><br><span class="line">            <span class="comment">//向集合中增加元素</span></span><br><span class="line">            arrayList.Add(<span class="number">10</span>); <span class="comment">// 传的参数为 object，什么类型都可以。</span></span><br><span class="line">            arrayList.Add(<span class="string">"10"</span>);</span><br><span class="line">            arrayList.Add(<span class="string">"张三丰"</span>);</span><br><span class="line">            Person gj = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"郭靖"</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            arrayList.Add(gj); <span class="comment">// 添加对象也可以。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ▼ Count 表示集合中的元素实际个数</span></span><br><span class="line">            Console.WriteLine(<span class="string">"集合中存在的元素个数&#123;0&#125;。"</span>, arrayList.Count);</span><br><span class="line">            <span class="comment">// ▼ Capacity 容量，可以理解：容量有 100，实际上可以只放 1 个元素。</span></span><br><span class="line">            Console.WriteLine(<span class="string">"集合现在的容量&#123;0&#125;"</span>, arrayList.Capacity);</span><br><span class="line">            Console.WriteLine(<span class="string">"==========传接口类型=========="</span>);</span><br><span class="line">            <span class="comment">// ICollection 接口， ArrayList 自己也可以往里传，数组也可以。所有集合，所有数组都可以传。</span></span><br><span class="line">            <span class="comment">// 实现了 ICollection 的类都可以</span></span><br><span class="line">            arrayList.Add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;);</span><br><span class="line">            <span class="comment">//  集合获取元素</span></span><br><span class="line">            Console.WriteLine(arrayList[<span class="number">0</span>]);<span class="comment">// 用索引器访问</span></span><br><span class="line">            Console.WriteLine(arrayList[<span class="number">3</span>]);</span><br><span class="line">            Console.WriteLine(<span class="string">"==========for 循环遍历集合=========="</span>);</span><br><span class="line">            <span class="comment">// ▼ for 循环遍历集合</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.Count; i++) &#123;</span><br><span class="line">                <span class="comment">// C# 所有集合长度都是 Count，数组都是 Length。</span></span><br><span class="line">                Console.WriteLine(arrayList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 向指定位置插入一个元素</span></span><br><span class="line">            Console.WriteLine(<span class="string">"==========向指定位置插入一个元素=========="</span>);</span><br><span class="line">            arrayList.Insert(<span class="number">0</span>, <span class="string">"洪七公"</span>);<span class="comment">//  索引为 0 的位置中插入，以前的依次向后移动</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.Count; i++) &#123;</span><br><span class="line">                <span class="comment">// C# 所有集合长度都是 Count，数组都是 Length。</span></span><br><span class="line">                Console.WriteLine(arrayList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 也可以插一堆的元素</span></span><br><span class="line">            Console.WriteLine(<span class="string">"==========向指定位置插入一堆元素=========="</span>);</span><br><span class="line">            arrayList.InsertRange(<span class="number">3</span>, <span class="keyword">new</span> <span class="keyword">string</span>[]&#123; <span class="string">"a"</span>, <span class="string">"good"</span>, <span class="string">"moring"</span>&#125;);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.Count; i++) &#123;</span><br><span class="line">                <span class="comment">// C# 所有集合长度都是 Count，数组都是 Length。</span></span><br><span class="line">                Console.WriteLine(arrayList[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除元素 可以根据 IDE 的提示参数去理解函数的含义</span></span><br><span class="line">            <span class="comment">//arrayList.Remove;</span></span><br><span class="line">            <span class="comment">//arrayList.RemoveAt;//  根据索引来删除</span></span><br><span class="line">            <span class="comment">//arrayList.RemoveRange;//  删除一段，从第几个开始删除到第几个元素，这个比较好理解。</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"===========删除结果是：============="</span>);</span><br><span class="line">            Console.WriteLine(arrayList.Count);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.Count; i ++) &#123;</span><br><span class="line">                arrayList.RemoveAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(arrayList.Count);<span class="comment">// 可见，删一个就移动重组一下。</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"===========清除ArrayList============="</span>);</span><br><span class="line">            arrayList.Clear();</span><br><span class="line">            Console.WriteLine(<span class="string">"集合中存在的元素个数&#123;0&#125;。"</span>, arrayList.Count);</span><br><span class="line">            <span class="comment">// foreach 是只读循环</span></span><br><span class="line">            Console.WriteLine(<span class="string">"===========根据对象来删除============="</span>);</span><br><span class="line">            <span class="comment">// ▼ 根据对象来删除</span></span><br><span class="line">            Person p1 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"雪山飞狐"</span>,</span><br><span class="line">                Age = <span class="number">100</span>,</span><br><span class="line">                Email = <span class="string">"nb@sina.com.cn"</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            arrayList.Add(p1);</span><br><span class="line">            arrayList.Add(<span class="number">99</span>);</span><br><span class="line">            arrayList.Add(<span class="string">"黄蓉"</span>);</span><br><span class="line"></span><br><span class="line">            Person p2 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"雪山飞狐"</span>,</span><br><span class="line">                Age = <span class="number">100</span>,</span><br><span class="line">                Email = <span class="string">"nb@sina.com.cn"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            arrayList.Add(p2);</span><br><span class="line">            Console.WriteLine(<span class="string">"集合中存在的元素个数&#123;0&#125;。"</span>, arrayList.Count);</span><br><span class="line">            arrayList.Remove(<span class="number">99</span>);</span><br><span class="line">            Person p3 = <span class="keyword">new</span> Person();</span><br><span class="line">            p3.Name = <span class="string">"雪山飞狐"</span>;</span><br><span class="line">            p3.Age = <span class="number">100</span>;</span><br><span class="line">            p3.Email = <span class="string">"nb@sina.com.cn"</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">"集合中存在的元素个数&#123;0&#125;。"</span>, arrayList.Count);</span><br><span class="line">            arrayList.Remove(p3);<span class="comment">// 这个对象没有添加，也就没有删除，但也没报错</span></span><br><span class="line">            Console.WriteLine(<span class="string">"集合中存在的元素个数&#123;0&#125;。"</span>, arrayList.Count);</span><br><span class="line">            <span class="comment">// 如果这样就能删掉</span></span><br><span class="line">            p3 = p1;</span><br><span class="line">            arrayList.Remove(p3);<span class="comment">// 这个对象没有添加，也就没有删除，但也没报错</span></span><br><span class="line">            Console.WriteLine(<span class="string">"集合中存在的元素个数&#123;0&#125;。"</span>, arrayList.Count);</span><br><span class="line">            <span class="comment">// ▲ 这样能删除</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> name = <span class="keyword">new</span> <span class="keyword">string</span>(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'黄'</span>, <span class="string">'蓉'</span>&#125;);</span><br><span class="line">            arrayList.Remove(name);  <span class="comment">// 删除掉了“黄蓉”</span></span><br><span class="line">            Console.WriteLine(<span class="string">"集合中存在的元素个数&#123;0&#125;。"</span>, arrayList.Count);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 总结：</span></span><br><span class="line">            <span class="comment">// Remove 并不是按照是不是对象的地址来删除的，而是判断是不是相等来删除的。</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(arrayList.Contains(<span class="number">99</span>)); <span class="comment">// 判断是否包含这个元素</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Email &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">集合中存在的元素个数4。</span><br><span class="line">集合现在的容量4</span><br><span class="line">==========传接口类型==========</span><br><span class="line">10</span><br><span class="line">集合.Person</span><br><span class="line">==========for 循环遍历集合==========</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">张三丰</span><br><span class="line">集合.Person</span><br><span class="line">System.Int32[]</span><br><span class="line">==========向指定位置插入一个元素==========</span><br><span class="line">洪七公</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">张三丰</span><br><span class="line">集合.Person</span><br><span class="line">System.Int32[]</span><br><span class="line">==========向指定位置插入一堆元素==========</span><br><span class="line">洪七公</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">a</span><br><span class="line">good</span><br><span class="line">moring</span><br><span class="line">张三丰</span><br><span class="line">集合.Person</span><br><span class="line">System.Int32[]</span><br><span class="line">===========删除结果是：=============</span><br><span class="line">9</span><br><span class="line">4</span><br><span class="line">===========清除ArrayList=============</span><br><span class="line">集合中存在的元素个数0。</span><br><span class="line">===========根据对象来删除=============</span><br><span class="line">集合中存在的元素个数4。</span><br><span class="line">集合中存在的元素个数3。</span><br><span class="line">集合中存在的元素个数3。</span><br><span class="line">集合中存在的元素个数2。</span><br><span class="line">集合中存在的元素个数1。</span><br><span class="line">False</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h3 id="ArrayList-排序等"><a href="#ArrayList-排序等" class="headerlink" title="ArrayList 排序等"></a>ArrayList 排序等</h3><p>要想任意类型实现ArrayList Sort() 排序，需要实现  IComparable 这个接口。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line">namespace ArrayList排序等</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> ArrayList 的 sort 方法</span></span><br><span class="line">            ArrayList arr = <span class="keyword">new</span> ArrayList(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">26</span>, <span class="number">9</span>, <span class="number">10</span> &#125;);</span><br><span class="line">            Console.WriteLine(<span class="string">"==========升序========"</span>);</span><br><span class="line">            arr.Sort();<span class="comment">// 注意有三个重载</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.Count; i++) &#123;</span><br><span class="line">                Console.WriteLine(arr[i]);</span><br><span class="line">            &#125; <span class="comment">// 默认的是升序排序，从小到大.没有降序排序但可以 Reverse</span></span><br><span class="line">            Console.WriteLine(<span class="string">"==========降序========"</span>);</span><br><span class="line">            arr.Reverse(); <span class="comment">//  先升序，再反转就成降序了</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.Count; i++) &#123;</span><br><span class="line">                Console.WriteLine(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*字符串排序*/</span></span><br><span class="line">            ArrayList arrList = <span class="keyword">new</span> ArrayList(<span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"hl"</span>, <span class="string">"xzl"</span>, <span class="string">"yzk"</span>, <span class="string">"fxh"</span>,<span class="string">"ksjd"</span>,<span class="string">""</span> ,<span class="string">"zaz"</span>&#125;);</span><br><span class="line">            arrList.Sort();</span><br><span class="line">            Console.WriteLine(<span class="string">"==========字符串排序========"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrList.Count; i++) &#123;</span><br><span class="line">                Console.WriteLine(arrList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ▲ 字符串排序，按第一个字母 ASCII 码大小排序。第一个字母比完，第二个字母比，依次比较。</span></span><br><span class="line">            <span class="comment">//   升序比较。</span></span><br><span class="line">            Console.WriteLine(<span class="string">"==========对象排序========"</span>);</span><br><span class="line">            ArrayList arrObj = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            Person p1 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"hjk"</span>,</span><br><span class="line">                Age = <span class="number">100</span>,</span><br><span class="line">                Email = <span class="string">"hhh@andyvj.com"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            Person p2 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"gdss"</span>,</span><br><span class="line">                Age = <span class="number">90</span>,</span><br><span class="line">                Email = <span class="string">"sd@andyvj.com"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            Person p3 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"cbv"</span>,</span><br><span class="line">                Age = <span class="number">80</span>,</span><br><span class="line">                Email = <span class="string">"ge@andyvj.com"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            Person p4 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"rtsssy"</span>,</span><br><span class="line">                Age = <span class="number">70</span>,</span><br><span class="line">                Email = <span class="string">"ghkj@andyvj.com"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            arrObj.Add(p1);</span><br><span class="line">            arrObj.Add(p2);</span><br><span class="line">            arrObj.Add(p3);</span><br><span class="line">            arrObj.Add(p4);</span><br><span class="line">            Console.WriteLine(<span class="string">"元素个数："</span> + arrObj.Count);</span><br><span class="line">            arrObj.Sort(); <span class="comment">// 对象不能直接按这个排，因为不知道按什么排</span></span><br><span class="line">            <span class="comment">// 对象需要继承 IComparable 接口实现 CompareTo方法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrObj.Count; i++) &#123;</span><br><span class="line">                Console.WriteLine(((Person)arrObj[i]).Name); <span class="comment">// 装箱成对象了，要强制转一下。</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 想要 Sort 排序，数据类型必须是实现过 IComparable 这个接口的</span></span><br><span class="line">            <span class="comment">// 所以 Person 对象想要排序，就必须要实现 IComparable 这个接口</span></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span>: <span class="title">IComparable</span>         </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">                <span class="keyword">get</span>;</span><br><span class="line">                <span class="keyword">set</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">int</span> Age &#123;</span><br><span class="line">                <span class="keyword">get</span>;</span><br><span class="line">                <span class="keyword">set</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> Email &#123;</span><br><span class="line">                <span class="keyword">get</span>;</span><br><span class="line">                <span class="keyword">set</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ▼ IComparable 接口实现 CompareTo方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CompareTo</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Person p = obj <span class="keyword">as</span> Person;</span><br><span class="line">                <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    return this.Age - p.Age;  // 升序降序在这里改下相减的前后顺序</span></span><br><span class="line"><span class="comment">                    //  ▲ 按照年龄，大 &gt; 0，等 = 0， 小 &lt; 0</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.Name.Length - p.Name.Length; <span class="comment">// 按名字的长度排序</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 总结：要想任意类型实现ArrayList Sort() 排序，需要实现  IComparable 这个接口。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">==========升序========</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">26</span><br><span class="line">==========降序========</span><br><span class="line">26</span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">==========字符串排序========</span><br><span class="line"></span><br><span class="line">fxh</span><br><span class="line">hl</span><br><span class="line">ksjd</span><br><span class="line">xzl</span><br><span class="line">yzk</span><br><span class="line">zaz</span><br><span class="line">==========对象排序========</span><br><span class="line">元素个数：4</span><br><span class="line">hjk</span><br><span class="line">cbv</span><br><span class="line">gdss</span><br><span class="line">rtsssy</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p><h3 id="ArrayList-任何情况排序"><a href="#ArrayList-任何情况排序" class="headerlink" title="ArrayList 任何情况排序"></a>ArrayList 任何情况排序</h3><p>总结：如果要升序再写一个类实现 IComparer，如果按年龄再写一个类实现IComparer，依次… 有多少个情况。</p><p>就写多少个比较的类就行了，不用去改源代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line">namespace Arralist随意排序</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"==========对象排序========"</span>);</span><br><span class="line">            ArrayList arrObj = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            Person p1 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"hjk"</span>,</span><br><span class="line">                Age = <span class="number">100</span>,</span><br><span class="line">                Email = <span class="string">"hhh@andyvj.com"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            Person p2 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"gdss"</span>,</span><br><span class="line">                Age = <span class="number">90</span>,</span><br><span class="line">                Email = <span class="string">"sd@andyvj.com"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            Person p3 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"cbv"</span>,</span><br><span class="line">                Age = <span class="number">800</span>,</span><br><span class="line">                Email = <span class="string">"ge@andyvj.com"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            Person p4 = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">                Name = <span class="string">"rtsssy"</span>,</span><br><span class="line">                Age = <span class="number">70</span>,</span><br><span class="line">                Email = <span class="string">"ghkj@andyvj.com"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            arrObj.Add(p1);</span><br><span class="line">            arrObj.Add(p2);</span><br><span class="line">            arrObj.Add(p3);</span><br><span class="line">            arrObj.Add(p4);</span><br><span class="line">            Console.WriteLine(<span class="string">"元素个数："</span> + arrObj.Count);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ▼ 直接调用Sort（）方法是使用person类型实现了IComparab1e接口的默认方式来排序</span></span><br><span class="line">            <span class="comment">//  arrObj.Sort();</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrObj.Count; i++) &#123;</span><br><span class="line">                Console.WriteLine(((Person)arrObj[i]).Age);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 看 Sort() 函数的重载提示，有 IComparer 接口类型参数，一个比较器。</span></span><br><span class="line">            <span class="comment">// 所以有一个实现了接口的类就可以了。</span></span><br><span class="line"></span><br><span class="line">            arrObj.Sort(<span class="keyword">new</span> PersonSortByNameLengthAsc());</span><br><span class="line">            Console.WriteLine(<span class="string">"==========姓名长短排序后========"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrObj.Count; i++) &#123;</span><br><span class="line">                Console.WriteLine(((Person)arrObj[i]).Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span>: <span class="title">IComparable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Email &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CompareTo</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Person p = obj <span class="keyword">as</span> Person;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.Age - p.Age;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ▼ 这个类就是一个比较器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonSortByNameLengthAsc</span> : <span class="title">IComparer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Compare</span>(<span class="params"><span class="keyword">object</span> x, <span class="keyword">object</span> y</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Person p1 = x <span class="keyword">as</span> Person;</span><br><span class="line">            Person p2 = y <span class="keyword">as</span> Person;</span><br><span class="line">            <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; y != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> p1.Name.Length - p2.Name.Length;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"null 无法比较"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总结：如果要升序再写一个类实现 IComparer，如果按年龄再写一个类实现IComparer，依次… 有多少个情况</span></span><br><span class="line">    <span class="comment">// 就写多少个比较的类就行了，不用去改源代码了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">==========对象排序========</span><br><span class="line">元素个数：4</span><br><span class="line">100</span><br><span class="line">90</span><br><span class="line">800</span><br><span class="line">70</span><br><span class="line">==========姓名长短排序后========</span><br><span class="line">hjk</span><br><span class="line">cbv</span><br><span class="line">gdss</span><br><span class="line">rtsssy</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.bilibili.com/video/av10470321" target="_blank" rel="noopener">link-01</a> // B站视频教程地址，来自：传智播客<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组的长度声明后就是固定的，且都是存的同一种类型的数据。&lt;/p&gt;
&lt;p&gt;集合的长度是不固定的(主要特征)，可以存不同类型的元素；但泛型集合必须是同一种类型的集合&lt;t&gt;。&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;集合内部的原理用的还是数组，都是依赖于数组的，内部存数据都是存到了数组中。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>英语：你能明白我的意思吗</title>
    <link href="https://www.andyvj.com/2019/07/26/190726N01/"/>
    <id>https://www.andyvj.com/2019/07/26/190726N01/</id>
    <published>2019-07-26T11:56:07.000Z</published>
    <updated>2019-07-31T12:55:51.942Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.huvjie.com/190726N01_img01.mp3" target="_blank" rel="noopener">音频</a>。</p><a id="more"></a><embed height="50" width="100%" autostart="false" autoplay="false" loop="false" src="http://image.huvjie.com/190726N01_img01.mp3"><p>你能明白我的意思吗？千万不要说，<code>Can you understand me?</code>，这句话一般用于比自己地位低的人，否则不太礼貌，虽然语法没有错误。有一点，表达别人的理解能力有点问题的意思。</p><p>也不要说，<code>Do you know my meaning?</code> 中式英语。</p><p>应该说：</p><ul><li>Do you get what I’m saying?</li><li>Are you with me?</li><li>Got it?</li><li>Do you get/see/know what I mean?</li></ul><h2 id="网页插入音频"><a href="#网页插入音频" class="headerlink" title="网页插入音频"></a>网页插入音频</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">autostart</span>=<span class="string">"false"</span> <span class="attr">autoplay</span>=<span class="string">"false"</span> <span class="attr">loop</span>=<span class="string">"false"</span> <span class="attr">src</span>=<span class="string">"x.mp3"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把 <code>src</code>地址换掉。<a href="https://www.runoob.com/html/html-sounds.html" target="_blank" rel="noopener">参考</a>。</p><p><hr><br><span style="color:gray;font-size:12px"><br>参考： 抖音 -&gt; @英国小克里<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://image.huvjie.com/190726N01_img01.mp3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;音频&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="基础学科" scheme="https://www.andyvj.com/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="英语" scheme="https://www.andyvj.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>C# StopWatch</title>
    <link href="https://www.andyvj.com/2019/07/24/190724N01/"/>
    <id>https://www.andyvj.com/2019/07/24/190724N01/</id>
    <published>2019-07-24T12:54:07.000Z</published>
    <updated>2019-07-24T13:03:58.912Z</updated>
    
    <content type="html"><![CDATA[<p><code>StopWatch</code> 在 <code>using System.Diagnostics</code> 命名空间，需先引用。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line">namespace StopWatch计时</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//▼ 创建一个Stopwatch实例</span></span><br><span class="line">            Stopwatch stopWatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">            stopWatch.Start(); <span class="comment">//开始计时</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                Console.Write(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"></span><br><span class="line">            stopWatch.Stop();  <span class="comment">//停止计时</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"耗时："</span> + stopWatch.ElapsedMilliseconds + <span class="string">" ms  "</span>);</span><br><span class="line">            stopWatch.Reset();   <span class="comment">//重置StopWatch</span></span><br><span class="line">            Console.WriteLine(<span class="string">"耗时："</span> + stopWatch.ElapsedMilliseconds + <span class="string">" ms  "</span>);</span><br><span class="line">            stopWatch.Restart();  <span class="comment">//重新启动被停止的StopWatch</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                Console.Write(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            stopWatch.Stop();</span><br><span class="line">            <span class="comment">// ▼ 获取stopWatch从开始到现在的时间差，单位是毫秒 -&gt; stopWatch.ElapsedMilliseconds</span></span><br><span class="line">            Console.WriteLine(<span class="string">"耗时："</span> + stopWatch.ElapsedMilliseconds + <span class="string">" ms  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</span><br><span class="line">30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56</span><br><span class="line"> 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 8</span><br><span class="line">3 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 10</span><br><span class="line">7 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 12</span><br><span class="line">7 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 14</span><br><span class="line">7 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 16</span><br><span class="line">7 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 18</span><br><span class="line">7 188 189 190 191 192 193 194 195 196 197 198 199</span><br><span class="line">耗时：11 ms</span><br><span class="line">耗时：0 ms</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</span><br><span class="line">30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56</span><br><span class="line"> 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 8</span><br><span class="line">3 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99</span><br><span class="line">耗时：3 ms</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.cnblogs.com/yunfeifei/p/3993401.html" target="_blank" rel="noopener">link-01</a>  // 博客园：5天玩转C#并行和多线程编程 —— 第一天 认识Parallel<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;StopWatch&lt;/code&gt; 在 &lt;code&gt;using System.Diagnostics&lt;/code&gt; 命名空间，需先引用。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#读写配置文件</title>
    <link href="https://www.andyvj.com/2019/07/19/190719N01/"/>
    <id>https://www.andyvj.com/2019/07/19/190719N01/</id>
    <published>2019-07-19T14:08:13.000Z</published>
    <updated>2019-07-19T15:19:27.934Z</updated>
    
    <content type="html"><![CDATA[<p>利用 Windows API 读写配置文件。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line">namespace CS读写配置文件</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">"kernel32"</span>)</span>]<span class="comment">//读配置文件方法的6个参数：所在的分区（section）、 键值、     初始缺省值、   StringBuilder、  参数长度上限 、配置文件路径</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">long</span> <span class="title">GetPrivateProfileString</span>(<span class="params"><span class="keyword">string</span> section, <span class="keyword">string</span> key, <span class="keyword">string</span> defaultValue, StringBuilder retVal, <span class="keyword">int</span> size, <span class="keyword">string</span> filePath</span>)</span>;</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">"kernel32"</span>)</span>]<span class="comment">//配置文件方法的4个参数：  所在的分区（section）、  键值、     参数值、       配置文件路径</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">long</span> <span class="title">WritePrivateProfileString</span>(<span class="params"><span class="keyword">string</span> section, <span class="keyword">string</span> key, <span class="keyword">string</span> <span class="keyword">value</span>, <span class="keyword">string</span> filePath</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*读配置文件*/</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetValue</span>(<span class="params"><span class="keyword">string</span> section, <span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// ▼ 获取当前程序启动目录</span></span><br><span class="line">            <span class="keyword">string</span> strPath = Application.StartupPath + <span class="string">@"/config.ini"</span>;</span><br><span class="line">            <span class="keyword">if</span> (File.Exists(strPath)) &#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">255</span>);</span><br><span class="line">                GetPrivateProfileString(section, key, <span class="string">"配置文件不存在，读取未成功!"</span>, sb, <span class="number">255</span>, strPath);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> sb.ToString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">string</span>.Empty;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*写配置文件*/</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="keyword">string</span> section, <span class="keyword">string</span> key, <span class="keyword">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// ▼ 获取当前程序启动目录</span></span><br><span class="line">            <span class="keyword">string</span> strPath = Application.StartupPath + <span class="string">@"/config.ini"</span>;</span><br><span class="line">            WritePrivateProfileString(section, key, <span class="keyword">value</span>, strPath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SetValue(<span class="string">"参数"</span>, <span class="string">"波特率"</span>, <span class="string">"9600"</span>); <span class="comment">// 都是字符串类型</span></span><br><span class="line">            SetValue(<span class="string">"参数"</span>, <span class="string">"率特波"</span>, <span class="string">"110"</span>); <span class="comment">// 都是字符串类型</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            richTextBox1.Text += GetValue(<span class="string">"参数"</span>, <span class="string">"波特率"</span>);</span><br><span class="line">            richTextBox1.Text += <span class="string">"\n"</span>;</span><br><span class="line">            richTextBox1.Text += GetValue(<span class="string">"参数"</span>, <span class="string">"率特波"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>界面：</p><p><img src="http://image.huvjie.com/190719N01_img01.jpg" alt=""></p><p>运行，点击 button：</p><p><img src="http://image.huvjie.com/190719N01_img02.jpg" alt=""></p><p><code>config,ini</code>配置文件内容如下：<br><img src="http://image.huvjie.com/190719N01_img03.jpg" alt=""></p><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.cnblogs.com/xh6300/p/5895759.html" target="_blank" rel="noopener">link-01</a>  // Windows API 读写配置文件<br>2.<a href="https://www.cnblogs.com/itgmhujia/archive/2008/02/26/1082179.html" target="_blank" rel="noopener">link-02</a> // 在C#中读写INI配置文件<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用 Windows API 读写配置文件。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>路漫漫</title>
    <link href="https://www.andyvj.com/2019/07/19/190719N/"/>
    <id>https://www.andyvj.com/2019/07/19/190719N/</id>
    <published>2019-07-19T05:28:37.000Z</published>
    <updated>2019-07-29T15:22:25.318Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.huvjie.com/190719N_img01.jpg" alt=""></p><a id="more"></a><p>路漫漫…</p><p>相爱容易，相处难。<br>路漫漫…<br>——2019-07-29  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/190719N_img01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://www.andyvj.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="点滴" scheme="https://www.andyvj.com/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>C# 匿名方法 和 lambda 表达式</title>
    <link href="https://www.andyvj.com/2019/07/16/190716N01/"/>
    <id>https://www.andyvj.com/2019/07/16/190716N01/</id>
    <published>2019-07-16T04:46:01.000Z</published>
    <updated>2019-07-19T11:30:40.135Z</updated>
    
    <content type="html"><![CDATA[<p>匿名只是用一次。以后用的都是 lambda 表达式，一般很少会用匿名方法。</p><p>给委托赋值的时候才会用到它。有<span style="color:blue">委托变量</span>时才会用。</p><p><span style="color:red">匿名方法不能直接在类中定义</span>，而是在给委托变量赋值的时候，需要赋值一个方法，此时可以“现做现卖”，定义一个匿名方法传递给该委托。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ProcessWordDelegate p = <span class="keyword">delegate</span>(<span class="keyword">string</span> s)</span><br><span class="line">    Console. WriteLine(s);</span><br><span class="line">&#125;; <span class="comment">// 注意这里有分号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">ProcessWordDelegate</span>(<span class="params"><span class="keyword">string</span> s</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="无参数无返回值"><a href="#无参数无返回值" class="headerlink" title="无参数无返回值"></a>无参数无返回值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Action Test = <span class="keyword">delegate</span> () &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"匿名方法:无参数无返回值。"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    Test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成 lambda 表达式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Action Test =  () =&gt; &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"匿名方法:无参数无返回值。"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    Test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匿名方法:无参数无返回值。</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p><h2 id="有参数无返回值"><a href="#有参数无返回值" class="headerlink" title="有参数无返回值"></a>有参数无返回值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Action&lt;<span class="keyword">string</span>&gt; Test = <span class="keyword">delegate</span> (<span class="keyword">string</span> msg) &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"匿名方法:"</span> + msg);</span><br><span class="line">    &#125;;</span><br><span class="line">    Test(<span class="string">"有参数无返回值"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成 lambda 表达式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Action&lt;<span class="keyword">string</span>&gt; Test =  (<span class="keyword">string</span> msg) =&gt; &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"匿名方法:"</span> + msg);</span><br><span class="line">    &#125;;</span><br><span class="line">    Test(<span class="string">"有参数无返回值"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">匿名方法:有参数无返回值</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="带参数带返回值"><a href="#带参数带返回值" class="headerlink" title="带参数带返回值"></a>带参数带返回值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Test = <span class="keyword">delegate</span> (<span class="keyword">int</span> a) &#123; <span class="keyword">return</span> a; &#125;;</span><br><span class="line">    Console.WriteLine(Test(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    Func&lt;<span class="keyword">int</span>&gt; Test1 = <span class="keyword">delegate</span> &#123; <span class="keyword">return</span> <span class="number">200</span>; &#125;;</span><br><span class="line">    Console.WriteLine(Test1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成 lambda 表达式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Test =  (<span class="keyword">int</span> a) =&gt; &#123; <span class="keyword">return</span> a; &#125;;</span><br><span class="line">    Console.WriteLine(Test(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    Func&lt;<span class="keyword">int</span>&gt; Test1 = ()=&gt; &#123; <span class="keyword">return</span> <span class="number">200</span>; &#125;;</span><br><span class="line">    Console.WriteLine(Test1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">200</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.bilibili.com/video/av24227074?p=2" target="_blank" rel="noopener">link-01</a> // B 站传智播客<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;匿名只是用一次。以后用的都是 lambda 表达式，一般很少会用匿名方法。&lt;/p&gt;
&lt;p&gt;给委托赋值的时候才会用到它。有&lt;span style=&quot;color:blue&quot;&gt;委托变量&lt;/span&gt;时才会用。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;匿名方法不能直接在类中定义&lt;/span&gt;，而是在给委托变量赋值的时候，需要赋值一个方法，此时可以“现做现卖”，定义一个匿名方法传递给该委托。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 结构</title>
    <link href="https://www.andyvj.com/2019/07/14/190714N01/"/>
    <id>https://www.andyvj.com/2019/07/14/190714N01/</id>
    <published>2019-07-14T12:56:33.000Z</published>
    <updated>2019-07-14T13:03:01.202Z</updated>
    
    <content type="html"><![CDATA[<p>结构就是几个数据组成的数据结构，<strong>它与类共享几乎所有相同的语法</strong>，但结构比类受<strong>到的限制更多</strong>。</p><a id="more"></a><p>结构是一种<strong>值的类型</strong>，通常用来封装一组相关的变量，结构中可以包括构造函数、常量、字段、方法、属性、运算符、事件和嵌套类型等。但如果要同时包括上述几种成员，则应该考虑使用类。结构实际是将多个相关的变量包装成为一个整体使用。在结构体中的变量，可以是相同、部分相同，或完全不同的数据类型。例如，把公司里的职员看作一个结构体，可以将个人信息放入结构体中，主要包含姓名、年龄、出生年月、性别、籍贯、婚否、职务。</p><p>在 C# 中的结构与传统的 C 或 C++ 中的结构不同。结构具有以下特点：</p><ul><li>结构是<strong>值</strong>的类型。</li><li>向方法传递结构时，结构是通过传值方式传递的，而不是作为引用传递的。</li><li>结构的实例化可以不使用new运算符。结构可以<strong>声明构造函数，但它们必须带参数。</strong>当您使用 New 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。</li><li>如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。</li><li>一个结构<span style="color:red">不能</span>从另一个结构或类继承。所有结构都直接继承自<code>System.ValueType</code>，后者继承自<code>System.Object</code>。</li><li>结构可以实现接口。接口可实现一个或多个接口。</li><li>在结构中初始化实例字段是错误的。<span style="color:blue">// 不能在结构中初始化字段。</span></li><li>结构成员不能指定为 <code>abstract</code>、<code>virtual</code> 或<code>protected</code>。</li></ul><p>说明:</p><p>在结构声明中，除非字段被声明为<code>const或static</code>，否则无法初始化。</p><p>实例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">struct</span> Rect<span class="comment">//定义一个矩形结构</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> width;<span class="comment">//矩形的宽</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> height;<span class="comment">//矩形的高</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rect</span>(<span class="params"><span class="keyword">double</span> x, <span class="keyword">double</span> y</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            width = x;</span><br><span class="line">            height = y;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Area</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> width * height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Rect rect1;<span class="comment">//创建矩形结构</span></span><br><span class="line">        rect1.width = <span class="number">5</span>;<span class="comment">//为矩形宽赋值</span></span><br><span class="line">        rect1.height = <span class="number">3</span>;<span class="comment">//为矩形高赋值</span></span><br><span class="line">        Console.WriteLine(<span class="string">"矩形面积为："</span> + rect1.Area());</span><br><span class="line">        Rect rect2 = <span class="keyword">new</span> Rect(<span class="number">6</span>, <span class="number">4</span>);<span class="comment">//使用构造函数实例化矩形结构</span></span><br><span class="line">        Console.WriteLine(<span class="string">"矩形面积为："</span> + rect2.Area());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">矩形面积为：15</span><br><span class="line">矩形面积为：24</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><strong>类</strong>和<strong>结构</strong>有以下几个基本的不同点：</p><ul><li>类是引用类型，结构是值类型。</li><li>结构不支持继承。</li><li>结构不能声明默认的构造函数。</li></ul><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.runoob.com/csharp/csharp-struct.html" target="_blank" rel="noopener">link-01</a>  // 菜鸟教程<br>《入门到精通》 -&gt; P142<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结构就是几个数据组成的数据结构，&lt;strong&gt;它与类共享几乎所有相同的语法&lt;/strong&gt;，但结构比类受&lt;strong&gt;到的限制更多&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 数组的声明和初始化</title>
    <link href="https://www.andyvj.com/2019/07/12/190712N03/"/>
    <id>https://www.andyvj.com/2019/07/12/190712N03/</id>
    <published>2019-07-12T10:43:29.000Z</published>
    <updated>2019-07-21T01:03:47.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; <span class="comment">// 默认初始化为 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.Length; i++) &#123;</span><br><span class="line">        arr1[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">int</span> a <span class="keyword">in</span> arr1) &#123;</span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><code>int[]</code>这样一起可以看成是一个类型。</p><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">int</span> a <span class="keyword">in</span> arr1) &#123;</span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p><p>数组声明定义时，也可以写两行。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1;</span><br><span class="line">arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：<br>数组大小必须与大括号中的元素个数相匹配，否则会产生编辑错误。</p><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>不使用<code>new</code>运算符，直接初始化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;  <span class="comment">// 直接初始化。能自己推断出数组长度。</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">int</span> a <span class="keyword">in</span> arr1) &#123;</span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>类似一维数组。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个二行二列的数组</span></span><br><span class="line"><span class="keyword">int</span>[,] arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>,<span class="number">2</span>];</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 new 运算符对其进行初始化</span></span><br><span class="line"><span class="keyword">int</span>[,]arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>,<span class="number">2</span>]&#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不指定行数和列数，用new运算符直接初始化</span></span><br><span class="line"><span class="keyword">int</span>[,]arr=<span class="keyword">new</span> <span class="keyword">int</span>[,]&#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不使用 new 直接初始化</span></span><br><span class="line"><span class="keyword">int</span>[,] arr =  &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><p>上面如果不指定维度，要用<code>{}</code>分组；上面的如果写成<code>{ 1, 2 , 3, 4 };</code>会报错。<span style="color:red">C# 二维(多维)数组内需要用<code>{}</code>进行分组，不然语法错误。</span></p><p>二维数组下标访问的形式是：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[i, j];  <span class="comment">// 下标访问形式</span></span><br></pre></td></tr></table></figure><p>不能在声明中指定大小，下面这种方式是<span style="color:red">错误的：</span><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[<span class="number">2</span>, <span class="number">3</span>] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>, <span class="number">3</span>] &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// ▲ int[2, 3] arr = …… 这样是错误的。</span></span><br></pre></td></tr></table></figure></p><!--<hr/><span style="color:gray;font-size:12px">参考：1.[link-01]()2.[link-02]()3.[link-03]()4.[link-04]()5.[link-05]()</span>-->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一维数组&quot;&gt;&lt;a href=&quot;#一维数组&quot; class=&quot;headerlink&quot; title=&quot;一维数组&quot;&gt;&lt;/a&gt;一维数组&lt;/h2&gt;&lt;h3 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h3&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arr1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 默认初始化为 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr1.Length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arr1[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; arr1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Console.WriteLine(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 关于继承和多态</title>
    <link href="https://www.andyvj.com/2019/07/12/190712N02/"/>
    <id>https://www.andyvj.com/2019/07/12/190712N02/</id>
    <published>2019-07-12T05:32:32.000Z</published>
    <updated>2019-07-21T01:14:45.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承一个类时，类成员的可访问性是一个重要的问题。子类（派生类）不能访问基类的私有成员，但是可以访问其公共成员。这就是说，只要使用public声明类成员，就可以让一个类成员被基类和子类（派生类）同时访问，同时也可以被外部的代码访问。</p><a id="more"></a><p>为了解决基类成员访问问题，C# 还提供了另外一种可访问性：<code>protected</code>，只有子类（派生类）才能访问<code>protected</code>成员，<span style="color:red">基类和外部代码</span>都不能访问<code>protected</code>成员。</p><p>除了成员的保护级别外，还可以为成员定义其继承行为。基类的成员可以是<strong>虚拟</strong>的，成员可以由继承它的类<strong>重写</strong>。子类（派生类）可以提供成员的其他执行代码，这种执行代码<strong>不会删除原来的代码，仍可以在类中访问原来的代码</strong>，但<span style="color:red">外部代码不能访问它们</span>。如果没有提供其他执行方式，外部代码就直接访问基类中成员的执行代码。</p><p>另外，基类还可以定义为<strong>抽象类</strong>。<u>抽象类不能直接实例化，要使用抽象类就必须继承这个类，然后再实例化。</u></p><p><strong>说明：</strong><br>继承类时，需要使用冒号加类名。当对一个类应用<code>sealed</code>修饰符时，该修饰符会阻止其他类从该类继承。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>当然如果它们都继承自某个类，可以把这些子类（派生类）<strong>都放到一个数组中</strong>。如果这些对象都有同名方法，就可以<span style="color:red">调用每个对象的同名方法</span>。</p><p>C# 中，类的<strong>多态性</strong>是通过在子类（派生类）中<strong>重载基类的虚方法或函数成员</strong>来实现的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace 多态小练习</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> X &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123;</span><br><span class="line">                x = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Y &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123;</span><br><span class="line">                y = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> X + Y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass2</span> : <span class="title">MyClass1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            X = <span class="number">10</span>;</span><br><span class="line">            Y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> X + Y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MyClass2 mc2 = <span class="keyword">new</span> MyClass2();</span><br><span class="line">            Console.WriteLine(mc2.Add());</span><br><span class="line"></span><br><span class="line">            MyClass1 mc1 = mc2;  <span class="comment">// 基类可以直接用派生类赋值</span></span><br><span class="line">            mc1.X = <span class="number">1</span>;</span><br><span class="line">            mc1.Y = <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 上面着两行赋值没有，基类Add()函数已经不复存在了，被重写掉了？？？</span></span><br><span class="line">            Console.WriteLine(mc1.Add());</span><br><span class="line"></span><br><span class="line">            MyClass1 mc1_1 = <span class="keyword">new</span> MyClass1();</span><br><span class="line">            Console.WriteLine(mc1_1.Add());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p><strong>说明：</strong><br>当子类（派生类）从基类继承时，它会获得基类的所有方法、字段、属性和事件。若要<strong>更改基类的数据和行为，有两种选择</strong>：可以使用新的派生成员替换基成员，或者可以重写虚拟的基成员。上面的实例重写了基类中的虚方法，另外，开发人员还可以使用新的派生成员替换基类的成员，这时需要使用<code>new</code>关键字。如果基类定义了一个方法、字段或属性，则<code>new</code>关键字用于在子类（派生类）中创建该方法、字段或属性的新定义。<code>new</code>关键字放置在要替换的类成员的返回类型之前，例如，上面实例中重写基类中虚方法的代码也可以替换为下面的形式。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass2</span>: <span class="title">MyClass1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> new <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"></span>)  <span class="comment">// 这里改成 new</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        X = <span class="number">10</span>;</span><br><span class="line">        Y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> X + Y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>new</code> 基类中不需要 <code>virtual</code> 来表示，<code>override</code> 只能重写 <code>virtual</code> 标识的虚方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">3</span>    <span class="comment">// 不一样了，new 的两个没关系了？？</span></span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>注意：<br>① <code>virtual</code>修饰符不能与<code>private、static、abstract</code>或者<code>override</code>修饰符同时使用。<br>② <code>override</code>修饰符不能与<code>new、static</code>或者<code>virtual</code>修饰符同时使用，并且重写方法只能用于重写基类中的虚方法。<br>③ C# 中，继承、虚方法和重写方法组合在一起才能实现多态性。  </p><p><hr><br><span style="color:gray;font-size:12px"><br>参考：入门到精通 -&gt; P144<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;p&gt;继承一个类时，类成员的可访问性是一个重要的问题。子类（派生类）不能访问基类的私有成员，但是可以访问其公共成员。这就是说，只要使用public声明类成员，就可以让一个类成员被基类和子类（派生类）同时访问，同时也可以被外部的代码访问。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>英语口语｜怎样找一份有意义的工作</title>
    <link href="https://www.andyvj.com/2019/07/12/190712N01/"/>
    <id>https://www.andyvj.com/2019/07/12/190712N01/</id>
    <published>2019-07-12T04:39:21.000Z</published>
    <updated>2019-08-11T00:45:11.047Z</updated>
    
    <content type="html"><![CDATA[<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=49495791&cid=86666505&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><a id="more"></a><p><strong>字幕：</strong></p><ul><li>The first requirement of any job is that it should pay.</li><li>But almost as important yet much less commonly recognized, is that a job should feel full of meaning.</li><li>Yet, how does a job get to feel meaningful?</li><li>What even does it mean to say that a job has meaning?</li><li>There seem to be three things that imbue(英 /ɪm’bjuː/ vt. 灌输；使感染；使渗透) work with meaning.</li><li>Firstly,a meaningful job taps into the deepest, most sincere(英 /sɪn’sɪə/<br>adj. 真诚的；诚挚的；真实的) and talented parts of us.</li><li>So different people will necessarily find different sorts of work meaningful according to what’s inside their deeper self.</li><li>For some, meaning might emerge from baking(英 /‘beɪkɪŋ/n. 烘焙，烘烤<br>v. （在烤炉里）烘烤；烘焙；) bread.</li><li>Others will feel their deep self engaged(美 /ɪn’gedʒd/<br>v. 吸引住；雇用；参加；) by computer science.</li><li>For others still, they’ll feel most fully themselves, most fully alive when investing(英 /investiŋ/n. [机] 熔模铸造<br>v. 投资；) money or teaching kids a foreign language.</li><li>Secondly, a meaningful job is one which to some extent(英 /ɪk’stent; ek-/n. 程度；范围；长度) helps others, which fixes a problem that humans have.</li><li>A job which in ways, large and small, serves humanity(英 /hjʊ’mænɪtɪ/ n. 人类；人道；).</li><li>Meaningful work provides a service to others.</li><li>And thirdly, a job feels meaningful when the person doing it can viscerally(本能地（visceral的副词形式）<br>发自内心地（visceral的副词形式）) sense, day to day, the impact(英 /‘ɪmpækt/ vi. 影响；撞击；冲突) of their work upon an audience(英 /‘ɔːdɪəns/  美 /‘ɔdɪəns/<br>n. 观众；听众；).</li><li>Not only is the job theoretically(英 /θiə’retikəli/  美 /,θiə’rɛtɪkli/<br>adv. 理论地；理论上) meaningful, it actually feels meaningful as one does it in a course of an average day.</li><li>Why should it be so hard to find meaningful work?</li><li>Why are we in such a danger of doing work that brings in money but doesn’t fulfill the meaning side of us?</li><li>Three big reasons stand out.</li><li>Firstly,because it’s perilously hard for us to locate our true interests in the time we have,before simply paying the bills becomes the imperative.</li><li>Our interests don’t manifest themselves spontaneously.</li><li>They require us to paftiently analyze ourselves, and try out a range of options to see what feels as if it might have the best fit for us.</li><li>But unfortunately,schools and universities, as well as society at large,doesn’t place much emphasis on this stage of educatilon, on helping people to understand their authentic working identities.</li><li>There’s far more emphasis on simply getting ready for any job than a job that would particularly well-suited to us, which is a pity not just for individuals but for the economy as a whole, because pedple would always work better, harder and more fruitfully when their deep selves are engaged.</li><li>Secondly,many jobs are relatively meaningless because it’s very possible, in the current economy,to generate profits from selling people things that aren’t really helping them in any way, but are more hoodwinking them, or preying on their lack of self-command.</li><li>Most of us have a dangerously loose hold on what really brings us satisfaction long-term, to build huge and profitable businesses selling stuff which no one’s particularly proud of at the end an average day.</li><li>Those working in these businesses know in their hearts that they haven’t really helped anyone have a better life. </li><li>The job pays. That’s why they keep doing it, but there’s sadly very little meaning.</li><li>Thirdly,a job may have real meaning may genuinely be helping others,but it may not feel like this day to day, because many organizations are so large, so slow-moving, so split up over so many continents that the purpose of everyone’s workday gets lost amidst endless meetings,memoso, conference calls and admin.</li><li>If you’re one of the 10,000 people on four continents working towards a product that will help humanity in 2022, you may well lose the thread of what the real purpose of it all is.</li><li>No wonder people wtho work in large organizations often fantasize/ about throwing it all in and working in a job with more tangible sense of the end result.</li><li>For example,running a smal B&amp;B or landscape gardening firm.</li><li>The very scale of modern enterprise has sapped a lot of work of a sense of meaning.</li><li>This diagnosis helps to point the way to what we might begin to do to make work more meaningful for people.</li><li>Firstly, pay a lot more attention to helping people find their vocation, their reall working authentic selves through moves like career psychotherapy, extended work placements and changes to school and university curricula, so as to allow students to start to analyze their identities and aptitudes from a much younger age.</li><li>Secondly,the more we as customers can support businesses engaged in meaningful work, the more meaningful jobs there will be.</li><li>Consumers have an enormous power over what kind of lives we can have as producers.</li><li>By raising the quality off our demand, we raise the number of jobs there are which can ans wer to mankind’s deeperneeds.</li><li>Thirdly,in businesses which should do meaningful work but on too large a scale over too long a period for it to feel meaningful day to day, we need to get better at telling stories of what the business is up to. </li><li>We need to give work some of the intimacy of a small B&amp;B even if it’s a giant multinational. </li><li>Ensuring that work is meaningful is vital. It’s not a luxury.</li><li>It determines the greatest issue of all in modern economics and politics: how hard and well people will work, and therefore, how successful and wealthy our societies can be. </li></ul><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.bilibili.com/video/av49495791/" target="_blank" rel="noopener">link-01</a>  // B 站连接<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;&gt;&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=49495791&amp;cid=86666505&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; style=&quot;position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;&quot;&gt; &lt;/iframe&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="基础学科" scheme="https://www.andyvj.com/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="英语" scheme="https://www.andyvj.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>C# switch 语句</title>
    <link href="https://www.andyvj.com/2019/07/10/190710N02/"/>
    <id>https://www.andyvj.com/2019/07/10/190710N02/</id>
    <published>2019-07-10T09:37:00.000Z</published>
    <updated>2019-07-11T12:30:45.194Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>([表达式]) &#123;</span><br><span class="line">    <span class="keyword">case</span>[常量表达式]:</span><br><span class="line">        [<span class="meta">语句块</span>]</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span>[常量表达式]:</span><br><span class="line">        [<span class="meta">语句块</span>]</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span>[常量表达式]:</span><br><span class="line">        [<span class="meta">语句块</span>]</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        [<span class="meta">语句块</span>]</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>【表达式】：的类型必须是<code>sbyte、byte、short、ushort、int、uint、long、ulong、char、string</code>和<code>枚举类</code>型中的一种。<strong><code>string</code>类型也是可以的。</strong></p><p>【说明】：<code>switch</code>语句可以包括任意数目的<code>case</code>实例，但是任何两个<code>case</code>语句都不能具有相同的值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test04</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"请您输入一个月份："</span>);<span class="comment">//输出提示信息</span></span><br><span class="line">            <span class="keyword">int</span> MyMouth = <span class="keyword">int</span>.Parse(Console.ReadLine());<span class="comment">//声明一个int类型变量用于获取用户输入的数据</span></span><br><span class="line">            <span class="keyword">string</span> MySeason;<span class="comment">//声明一个字符串变量</span></span><br><span class="line">            <span class="keyword">switch</span> (MyMouth)<span class="comment">//调用switch语句</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    MySeason = <span class="string">"您输入的月份属于冬季！"</span>;<span class="comment">//如果输入的数据是1、2或者12则执行此分支</span></span><br><span class="line">                    <span class="keyword">break</span>;    <span class="comment">//跳出switch语句</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    MySeason = <span class="string">"您输入的月份属于春季！"</span>;<span class="comment">//如果输入的数据是3、4或5则执行此分支</span></span><br><span class="line">                    <span class="keyword">break</span>;    <span class="comment">//跳出switch语句</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:  </span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    MySeason = <span class="string">"您输入的月份属于夏季！"</span>;<span class="comment">//如果输入的数据是6、7或8则执行此分支</span></span><br><span class="line">                    <span class="keyword">break</span>;    <span class="comment">//跳出switch语句</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                    MySeason = <span class="string">"您输入的月份属于秋季！"</span>;<span class="comment">//如果输入的数据是9、10或11则执行此分支</span></span><br><span class="line">                    <span class="keyword">break</span>;    <span class="comment">//跳出switch语句</span></span><br><span class="line">                <span class="comment">//如果输入的数据不满足以上4个分支的内容则执行default语句</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    MySeason = <span class="string">"月份输入错误！"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;    <span class="comment">//跳出switch语句</span></span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(MySeason);<span class="comment">//输出字符串MySeason </span></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>来自： 《入门到精通》 -&gt; P86<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;([表达式]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;[常量表达式]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;语句块&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;[常量表达式]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;语句块&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;[常量表达式]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;语句块&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;语句块&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
</feed>
