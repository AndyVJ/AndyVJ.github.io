<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡搅蛮缠</title>
  
  <subtitle>AndyVJ 的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.andyvj.com/"/>
  <updated>2019-01-31T09:37:47.562Z</updated>
  <id>http://www.andyvj.com/</id>
  
  <author>
    <name>AndyVJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过git运用在github仓库中备份hexo博客</title>
    <link href="http://www.andyvj.com/2019/01/31/19013101/"/>
    <id>http://www.andyvj.com/2019/01/31/19013101/</id>
    <published>2019-01-31T06:33:32.000Z</published>
    <updated>2019-01-31T09:37:47.562Z</updated>
    
    <content type="html"><![CDATA[<p>每次新增一篇博文后备份到 github 仓库中，这样是比较合理的。今天也算是初步学会了怎样去操作。</p><a id="more"></a><p>逻辑上我们应该在搭建博客之初的第一步创建一个空的<code>source</code>仓库，然后 clone 到本地，然后，在这个所 clone 的文件夹下搭建博客。其中 clone 的操作命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/username/仓库名.git  </span><br><span class="line">// 替换成自己的仓库</span><br></pre></td></tr></table></figure><p>下面记录下 git 的用法。</p><h2 id="如何上传"><a href="#如何上传" class="headerlink" title="如何上传"></a>如何上传</h2><p>至于如何上传，主要参考的这篇博文——<a href="https://www.cnblogs.com/cxk1995/p/5800196.html" target="_blank" rel="noopener">使用git将项目上传到github（最简单方法）</a>，还有这篇<a href="https://www.cnblogs.com/alex-415/p/6912294.html" target="_blank" rel="noopener">博文</a>。主要的步骤是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. git init //初始化仓库</span><br><span class="line">2. git add .(文件name) //添加文件到本地仓库</span><br><span class="line">3. git commit -m &quot;first commit&quot; //添加文件描述信息</span><br><span class="line">4. git remote add origin + 远程仓库地址 //链接远程仓库，创建主分支 </span><br><span class="line">5. git push -u origin master //把本地仓库的文件推送到远程仓库</span><br></pre></td></tr></table></figure></p><p>有可能出现错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure></p><p>根据提示在步骤 4 和 5 之间添加一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. git init //初始化仓库</span><br><span class="line">2. git add .(文件name) //添加文件到本地仓库</span><br><span class="line">3. git commit -m &quot;first commit&quot; //添加文件描述信息</span><br><span class="line">4. git remote add origin + 远程仓库地址 //链接远程仓库，创建主分支；</span><br><span class="line">// 若失败，git remote rm origin 后重复。</span><br><span class="line">5. git pull origin master // 把本地仓库的变化连接到远程仓库主分支</span><br><span class="line">6. git push -u origin master //把本地仓库的文件推送到远程仓库</span><br></pre></td></tr></table></figure></p><p>如果远程分支我们不需要了，我们可以运用<a href="https://blog.csdn.net/lplife/article/details/79818097" target="_blank" rel="noopener">命令强制覆盖掉</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master -f</span><br></pre></td></tr></table></figure><h2 id="gitignore-的写法"><a href="#gitignore-的写法" class="headerlink" title=".gitignore 的写法"></a>.gitignore 的写法</h2><p>主要参考着两篇博文，<a href="https://www.cnblogs.com/ShaYeBlog/p/5355951.html" target="_blank" rel="noopener">.gitignore详解</a> 和 <a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">Git忽略提交规则 - .gitignore配置运维总结过</a>。</p><p>用到的几个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> /mtk/           表示过滤整个文件夹</span><br><span class="line">*.zip           表示过滤所有.zip文件</span><br><span class="line">/mtk/do.c       表示过滤某个具体文件</span><br></pre></td></tr></table></figure><p>以及：</p><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"> </span><br><span class="line">*.a       # 忽略所有 .a 结尾的文件</span><br><span class="line">!lib.a    # 但 lib.a 除外</span><br><span class="line">/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">build/    # 忽略 build/ 目录下的所有文件</span><br><span class="line">doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure><p>可以通过一些过滤方法，过滤掉一些没有必要备份的文件。</p><h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h2><p>如果链接远程仓库<code>git remote add origin xxx.git</code>时出现如下的错误信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: remote origin already exists.</span><br></pre></td></tr></table></figure></p><p><a href="https://blog.csdn.net/dengjianqiang2011/article/details/9260435" target="_blank" rel="noopener">可以这样解决</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、先输入$ git remote rm origin</span><br><span class="line"></span><br><span class="line">2、再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！</span><br></pre></td></tr></table></figure></p><p>然后再使用之前的命令应该就可以链接上去了。</p><p>博客从头到尾的搭建可以参考这篇非常详细的<a href="https://blog.csdn.net/u010820857/article/details/81880568" target="_blank" rel="noopener">博文</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次新增一篇博文后备份到 github 仓库中，这样是比较合理的。今天也算是初步学会了怎样去操作。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://www.andyvj.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="hexo" scheme="http://www.andyvj.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>开启个人博客之旅</title>
    <link href="http://www.andyvj.com/2019/01/30/19013001/"/>
    <id>http://www.andyvj.com/2019/01/30/19013001/</id>
    <published>2019-01-30T02:45:33.000Z</published>
    <updated>2019-01-30T04:12:01.622Z</updated>
    
    <content type="html"><![CDATA[<p>我又开始折腾搭建了一个个人博客，基于<code>Hexo + github</code>的；当然，是通过在网上查阅了很多的资料完成的，对于一个非程序员来说真不容易，虽然我对编程有着很大的兴趣，但毕竟是门外汉。耗时，耗神还伤眼睛。<br><a id="more"></a></p><p>其实，我一年多前也凭着兴趣搭建过一个博客，只是没有很多的功能，例如，评论、阅读数等；但是也仅是因为兴趣，却也不知道写点什么，荒废也就成自然了。现在我又想去记录一些东西了，什么内容都行，并要持续。我要开启我的个人博客之旅，毕竟写作可以让人思考、总结、和提升。努力构建一个自己的知识体系。</p><p>在搭建博客时也碰到了很多问题，虽然网上的大神们都有很好的解决方案，但对我来说，搜索和配置起来也挺不容易，后面我也会总结记录下来。</p><p>这个博客打算记录写什么呢？初步打算是围绕<strong>机电一体化/自动化</strong>来展开。这是一个综合性学科交叉的专业，大体包含<u>机械</u>、<u>电气</u>、<u>控制</u>，其中控制可能还牵涉到很多的计算机方面的知识，这不就是全栈吗？其实本人学的是机械自动化方面偏机械一点，现在也是从事这方面相关的工作，其他方面也不甚了解，只能说朝这个方向学习和努力。所以，可能以后博客中机械方面的内容会偏多。</p><p>自知自己的知识有限，做的也只是应用层方面的事情，大部分公司其实也只需要这样的人才。应用层于我的理解其实大部分是<em>基于经验和实践</em>的，经验性的内容可能不适合长篇大论，针对性的把一个问题讲清楚就好；而研究性的可能需要长篇大论了。所以，后面的博文每篇我也不打算写长。现在信息碎片化的时代，好像也没几个人能个耐下心来看完一篇长文。</p><p>在这个框架下，聚焦在下游的应用，广度很大，深度可能往往不够。在众多的方向中，还是需要一个深入研究的方向，对我而言有机会深入的可能还是<strong>机械</strong>方面。深入一个方向，广度尽量拉开，这也许是现代社会所需要的。“一招鲜”在现代社会，我觉得不再适用，如果你不想一份工作做到老。</p><p>最后，兴趣能驱动你去开始做这件事情，却往往不能持久让你坚持下来；带着兴趣去做事当然是最好，但我们做事还是需要有一个目的性，就是你内心最强烈的渴望，这才是支撑你持续下去的动力。一切动力的源泉无非就是爱和责任。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我又开始折腾搭建了一个个人博客，基于&lt;code&gt;Hexo + github&lt;/code&gt;的；当然，是通过在网上查阅了很多的资料完成的，对于一个非程序员来说真不容易，虽然我对编程有着很大的兴趣，但毕竟是门外汉。耗时，耗神还伤眼睛。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://www.andyvj.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="随感" scheme="http://www.andyvj.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
</feed>
