<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡文杰</title>
  
  <subtitle>专业道路上的自我修养</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.huvjie.com/"/>
  <updated>2020-11-21T14:04:15.314Z</updated>
  <id>https://blog.huvjie.com/</id>
  
  <author>
    <name>huvjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理一下后面的思路</title>
    <link href="https://blog.huvjie.com/2021/12/31/201121N01/"/>
    <id>https://blog.huvjie.com/2021/12/31/201121N01/</id>
    <published>2021-12-31T02:22:00.000Z</published>
    <updated>2020-11-21T14:04:15.314Z</updated>
    
    <content type="html"><![CDATA[<p>理一下接下来的思路。首先，最重要和迫切的是加强提高业务层面“体力活”部分的熟练、效率。后面的整体方向：</p><ol><li>以 C# 技术栈为中心；</li><li>以工业视觉为技术核心；</li><li>加强英语和数学。</li></ol><a id="more"></a><h1 id="以-C-技术栈为中心"><a href="#以-C-技术栈为中心" class="headerlink" title="以 C# 技术栈为中心"></a>以 C# 技术栈为中心</h1><p>C# 是工控行业的主力语言，桌面程序为主，Windows 平台，开发容易且效率高。我们的主要精力点不应该局限于语言，而是以语言为工具载体展开的知识体系。行业内的另一大开发语言是 C++，之前用 MFC，现在应该是 Qt。<em>自己不要花精力刻意去学习Qt</em>，不要把时间和精力分散了，集中精力把 C# 技术栈深入一下。业务方面的体力活部分要做到很熟练，这样效率才能高；现在用的是 Winform 开发界面，其实可以学习一下 WPF，也可以了解下 Web 方面的知识。软件的架构设计，开发模式，面向对象的设计和分析(UML)等，也要有一定的能力。数据库方面的使用。</p><h1 id="以工业视觉为技术核心"><a href="#以工业视觉为技术核心" class="headerlink" title="以工业视觉为技术核心"></a>以工业视觉为技术核心</h1><p>我觉得工控控制的核心技术应该在工业视觉这里，这里的算法部分逃不过<code>C/C++</code>了，这里的<code>C/C++</code>语言部分应该是一个被动技能，不要刻意的深入到语言里面去，那是个复杂的无底洞，应该在学习过程中需要什么再去学习什么。这里我给自己定了两个方向。</p><ol><li>Halcon；// 行业能用的最多的算法包</li><li>OpenCV；// 开源，图像处理算法肯定要学的。</li><li>MIL；   // 公司用这个，但互联网上找不到太多资料，在工作中学习吧，不做主要。</li></ol><p>另外，有时间学下 Python。至于，什么深度学习，人工智能啥的，太高端，后面再说。</p><h1 id="加强英语和数学"><a href="#加强英语和数学" class="headerlink" title="加强英语和数学"></a>加强英语和数学</h1><p>英语和数学，这一点不用多说。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;理一下接下来的思路。首先，最重要和迫切的是加强提高业务层面“体力活”部分的熟练、效率。后面的整体方向：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以 C# 技术栈为中心；&lt;/li&gt;
&lt;li&gt;以工业视觉为技术核心；&lt;/li&gt;
&lt;li&gt;加强英语和数学。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#｜对象初始化器的精简</title>
    <link href="https://blog.huvjie.com/2020/11/22/201122N01/"/>
    <id>https://blog.huvjie.com/2020/11/22/201122N01/</id>
    <published>2020-11-22T01:51:23.000Z</published>
    <updated>2020-11-22T01:55:50.405Z</updated>
    
    <content type="html"><![CDATA[<p>C# 版本一直在更新，之前看到一个这样的精简。</p><a id="more"></a><p><img src="http://image.huvjie.com/201122N01_img01.jpg" alt="▲ 精简"></p><div style="text-align:center">▲ 精简语法 VS 提示</div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">B</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> A aa = <span class="keyword">new</span> A() &#123; Name = <span class="string">"Good"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 精简语法</span></span><br><span class="line">    <span class="keyword">private</span> A a = <span class="keyword">new</span> A &#123; Name = <span class="string">"Nice"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C# 版本一直在更新，之前看到一个这样的精简。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#｜lambda 表达式精简过程</title>
    <link href="https://blog.huvjie.com/2020/11/22/201122N02/"/>
    <id>https://blog.huvjie.com/2020/11/22/201122N02/</id>
    <published>2020-11-22T01:14:05.000Z</published>
    <updated>2020-11-22T01:59:04.186Z</updated>
    
    <content type="html"><![CDATA[<p>强大的<code>Lambda</code>表达式，简洁到你懵逼。我们知道没有<code>Lambda</code>表达式之前是<code>delegate</code>匿名表达式。</p><a id="more"></a><p>注意看下下面代码的注释，明了一下整个省略过程。这里还有之前的一篇笔记<a href="https://blog.huvjie.com/2019/07/28/190728N02/">https://blog.huvjie.com/2019/07/28/190728N02/</a>。可以结合起来一起看一下。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">delegate</span> <span class="keyword">double</span> <span class="title">Mydel</span>(<span class="params"><span class="keyword">int</span> par</span>)</span>; <span class="comment">// 委托</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Mydel del = <span class="keyword">delegate</span> (<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;; <span class="comment">// 最初的匿名方法形式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1。lambad 表达式必须在参数数量，类型，位置上与委托相匹配</span></span><br><span class="line">            Mydel le1 =       (<span class="keyword">int</span> x) =&gt; &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;; <span class="comment">// 完整Lambda 表达式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2。表达式不一定需要包含类型(隐式类型)，出了 ref 和 out 参数</span></span><br><span class="line">            Mydel le2 =           (x) =&gt; &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;; <span class="comment">// 省略类型</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3。如果只有一个参数，并且是隐式类型，周围的圆括号都可省略；如果没有参数则必须要有圆括号</span></span><br><span class="line">            Mydel le3 =             x =&gt; &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;; <span class="comment">// 省略圆括号</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4。 如果语句块包含一个返回语句，可以将语句块替换成 return 后面的表达式</span></span><br><span class="line">            <span class="comment">//     看起来像省略了 return 和 后面的&#123;&#125;对和分号</span></span><br><span class="line">            Mydel le4 = x =&gt;  x + <span class="number">1</span>;   <span class="comment">// 最简，看起来像 le4 = x + 1；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, del(<span class="number">100</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, le1(<span class="number">100</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, le2(<span class="number">100</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, le3(<span class="number">100</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, le4(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">101</span><br><span class="line">101</span><br><span class="line">101</span><br><span class="line">101</span><br><span class="line">101</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.《图解教程》P253<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;强大的&lt;code&gt;Lambda&lt;/code&gt;表达式，简洁到你懵逼。我们知道没有&lt;code&gt;Lambda&lt;/code&gt;表达式之前是&lt;code&gt;delegate&lt;/code&gt;匿名表达式。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WPF 事件｜硬编码的方式 winform 的方式使用</title>
    <link href="https://blog.huvjie.com/2020/11/21/201121N02/"/>
    <id>https://blog.huvjie.com/2020/11/21/201121N02/</id>
    <published>2020-11-21T02:22:00.000Z</published>
    <updated>2020-11-21T14:03:45.472Z</updated>
    
    <content type="html"><![CDATA[<p>像winform一样，事件，赋值，硬编码的方式实现。   <strong>// 传说，WPF 有五种绑定方式。</strong></p><p><img src="http://image.huvjie.com/201121N02_img01.gif" alt="▲ 效果"></p><div style="font-size:13px;color:gray;text-align:center">▲ 效果</div><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">"WpfApp1.MainWindow"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">"http://schemas.microsoft.com/expression/blend/2008"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">"clr-namespace:WpfApp1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">"d"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">"MainWindow"</span> <span class="attr">Height</span>=<span class="string">"250"</span> <span class="attr">Width</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">x:Name</span>=<span class="string">"btnTest"</span> <span class="attr">Click</span>=<span class="string">"BtnTest_Click"</span> <span class="attr">Content</span>=<span class="string">"点击测试"</span> <span class="attr">Width</span>=<span class="string">"100"</span> <span class="attr">Height</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Label</span> <span class="attr">x:Name</span>=<span class="string">"label"</span> <span class="attr">Content</span>=<span class="string">"Label"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Left"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Top"</span> <span class="attr">RenderTransformOrigin</span>=<span class="string">"2.845,4.051"</span> <span class="attr">Margin</span>=<span class="string">"128,41,0,0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WpfApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> MainWindow.xaml 的交互逻辑</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="keyword">this</span>.WindowStartupLocation = WindowStartupLocation.CenterScreen;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BtnTest_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">"Hello!"</span>);</span><br><span class="line">            <span class="keyword">this</span>.label.Content = <span class="string">"World!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;像winform一样，事件，赋值，硬编码的方式实现。   &lt;strong&gt;// 传说，WPF 有五种绑定方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/201121N02_img01.gif&quot; alt=&quot;▲ 效果&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;font-size:13px;color:gray;text-align:center&quot;&gt;▲ 效果&lt;/div&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WPF｜元素查找的方式Bonding</title>
    <link href="https://blog.huvjie.com/2020/11/20/201120N01/"/>
    <id>https://blog.huvjie.com/2020/11/20/201120N01/</id>
    <published>2020-11-20T02:22:00.000Z</published>
    <updated>2020-11-20T15:35:08.534Z</updated>
    
    <content type="html"><![CDATA[<p>元素之间的绑定。</p><p><code>TextBox</code>和<code>Slider</code>之间的值绑定，默认是双向绑定的。</p><p><img src="http://image.huvjie.com/201120N01_img01.gif" alt="▲效果"></p><div style="font-size:13px;color:gray;text-align:center">▲ 效果</div><a id="more"></a><p><img src="http://image.huvjie.com/201120N01_img02.jpg" alt="▲ 绑定模式的枚举"></p><div style="font-size:13px;color:gray;text-align:center">▲ 绑定模式的枚举</div><p><strong>双向绑定，需要按 tab 键切换焦点以后才会有反应。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;WpfApp1.MainWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span><br><span class="line">        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span><br><span class="line">        xmlns:local=&quot;clr-namespace:WpfApp1&quot;</span><br><span class="line">        mc:Ignorable=&quot;d&quot;</span><br><span class="line">        Title=&quot;MainWindow&quot; Height=&quot;200&quot; Width=&quot;380&quot;</span><br><span class="line">        WindowStartupLocation=&quot;CenterScreen&quot;</span><br><span class="line">        &gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;Grid.RowDefinitions&gt;</span><br><span class="line">            &lt;RowDefinition Height=&quot;50&quot;/&gt;</span><br><span class="line">            &lt;RowDefinition Height=&quot;50*&quot;/&gt;</span><br><span class="line">        &lt;/Grid.RowDefinitions&gt;</span><br><span class="line">        &lt;Slider x:Name=&quot;slider&quot; Grid.Row=&quot;0&quot; Margin=&quot;10&quot;/&gt;</span><br><span class="line">        &lt;TextBox Text=&quot;&#123;Binding ElementName=slider, Path=Value&#125;&quot; Grid.Row=&quot;1&quot; Margin=&quot;10&quot;/&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure><p>看这两行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Slider x:Name=&quot;slider&quot; Grid.Row=&quot;0&quot; Margin=&quot;10&quot;/&gt;</span><br><span class="line">&lt;TextBox Text=&quot;&#123;Binding ElementName=slider, Path=Value&#125;&quot; Grid.Row=&quot;1&quot; Margin=&quot;10&quot;/&gt;</span><br></pre></td></tr></table></figure><p>默认是双向绑定的。</p><hr><div style="font-size:12px">参考：<br><a href="https://www.bilibili.com/video/BV1mJ411F7zG?p=7&amp;t=723" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1mJ411F7zG?p=7&amp;t=723</a><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;元素之间的绑定。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TextBox&lt;/code&gt;和&lt;code&gt;Slider&lt;/code&gt;之间的值绑定，默认是双向绑定的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/201120N01_img01.gif&quot; alt=&quot;▲效果&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;font-size:13px;color:gray;text-align:center&quot;&gt;▲ 效果&lt;/div&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 无法修改返回值，应为它不是变量</title>
    <link href="https://blog.huvjie.com/2020/11/18/201118N01/"/>
    <id>https://blog.huvjie.com/2020/11/18/201118N01/</id>
    <published>2020-11-18T02:22:00.000Z</published>
    <updated>2020-11-18T14:26:42.905Z</updated>
    
    <content type="html"><![CDATA[<p>结构体通过属性访问修改的时候会出现以下编译错误：</p><p><img src="http://image.huvjie.com/201118N01_img01.jpg" alt="▲ 错误提示"></p><div style="font-size:13px;color:gray;text-align:center">▲ 错误提示</div><a id="more"></a><p>结构体不能像类一样去操作，问题肯定是因为：<strong>结构体是值类型</strong>的原因。</p><p><strong>结构体肯定只能整体给他赋值</strong>，像<code>int</code>类型一样。</p><p><img src="http://image.huvjie.com/201118N01_img02.jpg" alt="▲ 结构体整体赋值，不会编译错误。"></p><div style="font-size:13px;color:gray;text-align:center">▲ 结构体整体赋值，不会编译错误。</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结构体通过属性访问修改的时候会出现以下编译错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/201118N01_img01.jpg&quot; alt=&quot;▲ 错误提示&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;font-size:13px;color:gray;text-align:center&quot;&gt;▲ 错误提示&lt;/div&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>还是要学下 WPF</title>
    <link href="https://blog.huvjie.com/2020/11/16/201116N01/"/>
    <id>https://blog.huvjie.com/2020/11/16/201116N01/</id>
    <published>2020-11-16T02:22:00.000Z</published>
    <updated>2020-11-16T12:28:10.344Z</updated>
    
    <content type="html"><![CDATA[<p>其实行业内大部分人都在用 winform，还是想学习一下 WPF。主要考虑一下几点：</p><a id="more"></a><ol><li><p>技术更先进。</p><p> 还是要向前一步。能够很好的实现前后台代码的分离。</p></li><li><p>后面想弄下安卓 <code>Xamarin</code>。</p></li></ol><p>/<strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong>/</p><p>学 WPF 不着急，慢慢学。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实行业内大部分人都在用 winform，还是想学习一下 WPF。主要考虑一下几点：&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 实例构建的执行顺序</title>
    <link href="https://blog.huvjie.com/2020/11/16/201116N03/"/>
    <id>https://blog.huvjie.com/2020/11/16/201116N03/</id>
    <published>2020-11-16T02:22:00.000Z</published>
    <updated>2020-11-16T13:56:34.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先看看一般类的实例化构建顺序"><a href="#先看看一般类的实例化构建顺序" class="headerlink" title="先看看一般类的实例化构建顺序"></a>先看看一般类的实例化构建顺序</h1><h2 id="无继承的情况"><a href="#无继承的情况" class="headerlink" title="无继承的情况"></a>无继承的情况</h2><ol><li>静态字段</li><li>静态构造方法</li><li>实例字段</li><li>实例构造方法</li></ol><h2 id="有继承的情况"><a href="#有继承的情况" class="headerlink" title="有继承的情况"></a>有继承的情况</h2><ol><li>子类(派生类)的静态字段</li><li>子类(派生类)的静态构造方法</li><li>子类(派生类)的实例字段</li><li><span style="color:red">父类(基类)</span>的静态字段</li><li><span style="color:red">父类(基类)</span>的静态构造方法</li><li><span style="color:red">父类(基类)</span>的实例字段</li><li><span style="color:red">父类(基类)</span>的实例构造方法</li><li>子类(派生类)的实例构造方法</li></ol><p>这两种情况还是很好理解的。总体来说<strong>字段是先于构造函数执行的</strong>，不然构造函数拿什么去执行。<strong>派生类的字段，和基类的实例先执行，然后再执行派生类的构造函数。</strong>这里是，<span style="color:red">基类的构造函数先执行，然后再执行派生类的构造函数</span>。下面验证下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            A a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">A</span>: <span class="title">B</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">A</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">B</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">B</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B</span><br><span class="line">A</span><br></pre></td></tr></table></figure><p><strong>基类的构造函数先执行，然后再执行派生类的构造函数</strong>。这里是对的。</p><h2 id="C-的构造函数和析构函数执行顺序"><a href="#C-的构造函数和析构函数执行顺序" class="headerlink" title="C++ 的构造函数和析构函数执行顺序"></a>C++ 的构造函数和析构函数执行顺序</h2><p>先调用父类(基类)的构造函数，再调用派生类的构造函数；</p><p>变量销毁时：先调用派生类的析构函数，再调用父类(基类)的析构函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        A()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt; <span class="string">"基类：AAAAAAAAAAAA"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ~A()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"基类：~AAAAAAAAAAAA"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        B()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt; <span class="string">"派生类：BBBBBBBBB"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ~B()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"派生类：~BBBBBBBBB"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span> <span class="comment">//当函数开始时，调用构造函数，当函数结束时，变量对象被销毁</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B b1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    solution();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基类：AAAAAAAAAAAA</span><br><span class="line">派生类：BBBBBBBBB</span><br><span class="line">派生类：~BBBBBBBBB</span><br><span class="line">基类：~AAAAAAAAAAAA</span><br></pre></td></tr></table></figure><h1 id="看下对象初始化器和构造函数谁先执行"><a href="#看下对象初始化器和构造函数谁先执行" class="headerlink" title="看下对象初始化器和构造函数谁先执行"></a>看下对象初始化器和构造函数谁先执行</h1><p>结论：<strong>构造函数先于对象初始化器执行</strong>，然后，窗体程序的话，<strong>对象初始化器先于<code>Load</code>事件执行</strong>。</p><p><img src="http://image.huvjie.com/201116N03_img01.jpg" alt=""></p><p><strong>Form1.cs:</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            Console.WriteLine(<span class="string">"Fomr1 构造函数!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Form2 form2 = <span class="keyword">new</span> Form2() &#123;</span><br><span class="line">                Msg = <span class="string">"对象初始化器中赋值!!"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            form2.Show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Form2.cs：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form2</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Msg &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"Form2 构造函数!!"</span>);</span><br><span class="line">            <span class="keyword">this</span>.StartPosition = FormStartPosition.CenterScreen;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.Msg = <span class="string">"构造函数后执行于对象初始化器!!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form2_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.Msg == <span class="literal">null</span>)</span><br><span class="line">                Console.WriteLine(<span class="string">"Load 事件先执行!!"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Console.WriteLine(<span class="keyword">this</span>.Msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div style="font-size:12px"><br>&gt; 参考：<br>&gt; 1. <a href="https://www.cnblogs.com/nzbbody/archive/2011/12/29/2306403.html" target="_blank" rel="noopener">https://www.cnblogs.com/nzbbody/archive/2011/12/29/2306403.html</a><br>&gt; 2. <a href="https://www.cnblogs.com/qkqBeer/articles/10726173.html" target="_blank" rel="noopener">https://www.cnblogs.com/qkqBeer/articles/10726173.html</a><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;先看看一般类的实例化构建顺序&quot;&gt;&lt;a href=&quot;#先看看一般类的实例化构建顺序&quot; class=&quot;headerlink&quot; title=&quot;先看看一般类的实例化构建顺序&quot;&gt;&lt;/a&gt;先看看一般类的实例化构建顺序&lt;/h1&gt;&lt;h2 id=&quot;无继承的情况&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 关于引用类型的类外只读属性</title>
    <link href="https://blog.huvjie.com/2020/11/16/201116N02/"/>
    <id>https://blog.huvjie.com/2020/11/16/201116N02/</id>
    <published>2020-11-16T02:22:00.000Z</published>
    <updated>2020-11-16T13:57:00.178Z</updated>
    
    <content type="html"><![CDATA[<p>类内的只读属性不能更改的是他的<code>指向</code>，例如，容器类<code>List</code>，如果是只内部可写，外部可读，只有类内部可以更改 <code>List</code> 字段的指向赋值，外部不能。<strong>而类外<code>get</code>到它的指向值后，是可以对它进行<code>Add</code>等操作的，因为没有更改它的指向。</strong></p><p>有点绕，估计没讲清我想要说什么。~O(∩_∩)O~</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Test test = <span class="keyword">new</span> Test();</span><br><span class="line">            List&lt;<span class="keyword">string</span>&gt; tlist = test.TList;</span><br><span class="line">            tlist.Add(<span class="string">"Lily"</span>); <span class="comment">// 增加两个</span></span><br><span class="line">            tlist.Add(<span class="string">"Lucy"</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> tlist)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            List&lt;<span class="keyword">string</span>&gt; nlist = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();  <span class="comment">// 新实例</span></span><br><span class="line">            <span class="comment">// test.TList = nlist;  // 不能从新指向</span></span><br><span class="line">            tlist = nlist;  <span class="comment">// 这个和test实例不相干，当然可以改指向</span></span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;<span class="keyword">string</span>&gt; TList &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.TList = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">            <span class="keyword">this</span>.TList.Add(<span class="string">"Tom"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tom</span><br><span class="line">Lily  // 后面这两个是可以增加的。</span><br><span class="line">Lucy</span><br></pre></td></tr></table></figure><p>下面这样重新指向一个新实例是不行的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">string</span>&gt; nlist = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();  <span class="comment">// 新实例</span></span><br><span class="line">test.TList = nlist;  <span class="comment">// 不能从新指向</span></span><br></pre></td></tr></table></figure><p><code>test.TList = nlist;  // 不能从新指向</code>，外部只读不能更改指向。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类内的只读属性不能更改的是他的&lt;code&gt;指向&lt;/code&gt;，例如，容器类&lt;code&gt;List&lt;/code&gt;，如果是只内部可写，外部可读，只有类内部可以更改 &lt;code&gt;List&lt;/code&gt; 字段的指向赋值，外部不能。&lt;strong&gt;而类外&lt;code&gt;get&lt;/code&gt;到它的指向值后，是可以对它进行&lt;code&gt;Add&lt;/code&gt;等操作的，因为没有更改它的指向。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有点绕，估计没讲清我想要说什么。~O(∩_∩)O~&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 接口类型</title>
    <link href="https://blog.huvjie.com/2020/11/15/201115N01/"/>
    <id>https://blog.huvjie.com/2020/11/15/201115N01/</id>
    <published>2020-11-15T00:12:05.000Z</published>
    <updated>2020-11-15T01:19:23.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h2><p>个人理解，接口有点像 C 语言的前置申明。<code>I</code>开头命名，<strong>默认为 <code>public</code></strong>, 分号结束，没有实现体。继承它的类必须全部实现接口成员。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IComparable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">CompareT0</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><p>接口放在基类后面，类可以继承多个接口，用<code>,</code>号分开。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span>, <span class="title">ILiveBird</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> ILiveBird.BabyCalled()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Kitten"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口是引用类型"><a href="#接口是引用类型" class="headerlink" title="接口是引用类型"></a>接口是引用类型</h2><p>接口是引用类型。</p><h2 id="接口类型转换建议用as运算符"><a href="#接口类型转换建议用as运算符" class="headerlink" title="接口类型转换建议用as运算符"></a>接口类型转换建议用<code>as</code>运算符</h2><p><code>as</code>运算符的强制转换时，失败返回<code>null</code>，不会引发异常。</p><h2 id="实现具有重复成员的接口"><a href="#实现具有重复成员的接口" class="headerlink" title="实现具有重复成员的接口"></a>实现具有重复成员的接口</h2><p>类内可以实现单个成员即可满足所有重复成员的接口。</p><h2 id="派生类可以作为接口的实现"><a href="#派生类可以作为接口的实现" class="headerlink" title="派生类可以作为接口的实现"></a>派生类可以作为接口的实现</h2><p>从基类派生过来的成员可以作为接口的实现成员。</p><h2 id="显式接口成员"><a href="#显式接口成员" class="headerlink" title="显式接口成员"></a>显式接口成员</h2><p>显式接口成员只能通过转化成接口引用类型才能实现访问，类实例不能够访问。</p><p>可以看之前的这篇笔记：<a href="https://blog.huvjie.com/2020/08/26/200826N02/">https://blog.huvjie.com/2020/08/26/200826N02/</a>。</p><p>实现的显式接口成员前面不能加<code>public</code>等访问修饰符，因为类外根本不能够直接访问。但没有<code>public</code>也是可以被继承的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Test test = <span class="keyword">new</span> Test();</span><br><span class="line">            ILiveBird liveBird = test <span class="keyword">as</span> ILiveBird; <span class="comment">// 需要强制转化</span></span><br><span class="line">            <span class="keyword">if</span> (liveBird != <span class="literal">null</span>)</span><br><span class="line">                Console.WriteLine(liveBird.BabyCalled());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Console.WriteLine(<span class="string">"null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">ILiveBird</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">string</span> <span class="title">BabyCalled</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Animal</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span>, <span class="title">ILiveBird</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> ILiveBird.BabyCalled()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Kitten"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span>:<span class="title">Cat</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kitten  // 需要强制转化成接口类型</span><br></pre></td></tr></table></figure><p><img src="http://image.huvjie.com/201115N01_img01.jpg" alt="▲ 不能加`public`等访问修饰符"></p><div style="font-size:13px;color:gray;text-align:center">▲ 不能加<code>public</code>等访问修饰符</div><h2 id="接口可以继承接口"><a href="#接口可以继承接口" class="headerlink" title="接口可以继承接口"></a>接口可以继承接口</h2><p>当然在类内都要被实现。</p><h2 id="不同类实现一个接口"><a href="#不同类实现一个接口" class="headerlink" title="不同类实现一个接口"></a>不同类实现一个接口</h2><p>可以看之前的这篇笔记：<a href="https://blog.huvjie.com/2020/08/26/200826N02/">https://blog.huvjie.com/2020/08/26/200826N02/</a>。</p><p><hr><br><span style="color:gray;font-size:12px"><br>参考： </span></p><ol><li>详细的内容可以看下《C# 图解教程》 P275 页。<br></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是接口&quot;&gt;&lt;a href=&quot;#什么是接口&quot; class=&quot;headerlink&quot; title=&quot;什么是接口&quot;&gt;&lt;/a&gt;什么是接口&lt;/h2&gt;&lt;p&gt;个人理解，接口有点像 C 语言的前置申明。&lt;code&gt;I&lt;/code&gt;开头命名，&lt;strong&gt;默认为 &lt;code&gt;
      
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 小数位控制</title>
    <link href="https://blog.huvjie.com/2020/11/14/201114N02/"/>
    <id>https://blog.huvjie.com/2020/11/14/201114N02/</id>
    <published>2020-11-14T03:30:45.000Z</published>
    <updated>2020-11-14T04:17:18.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"&#123;0:F2&#125;"</span>, <span class="number">10.2658749</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.26  // 可见其是直接将后面的小数位舍弃了。</span><br></pre></td></tr></table></figure><p>《C# 图解教程》 P19 页对格式化输出有详细的介绍。</p><h2 id="Math-Round函数进行四舍五入"><a href="#Math-Round函数进行四舍五入" class="headerlink" title="Math.Round函数进行四舍五入"></a><code>Math.Round</code>函数进行四舍五入</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">1.223467</span>;</span><br><span class="line">a = Math.Round(a, <span class="number">4</span>);</span><br><span class="line">Console.WriteLine(a);</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.2235</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;控制台输出&quot;&gt;&lt;a href=&quot;#控制台输出&quot; class=&quot;headerlink&quot; title=&quot;控制台输出&quot;&gt;&lt;/a&gt;控制台输出&lt;/h2&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;0:F2&amp;#125;&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10.2658749&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>变与不变</title>
    <link href="https://blog.huvjie.com/2020/11/14/201114N01/"/>
    <id>https://blog.huvjie.com/2020/11/14/201114N01/</id>
    <published>2020-11-14T01:20:29.000Z</published>
    <updated>2020-11-14T03:24:58.450Z</updated>
    
    <content type="html"><![CDATA[<p>一件事物有”活”的方面，有”死”的方面，我们应该将主要精力集中在”活”的方面。而这个”活”和”死”是会随着事物的发展而会产生相应的变化。这需要我们动态的去看问题。</p><a id="more"></a><p>总之，要识别出事情最重要的核心在哪里，然后调整和分配时间和精力和资源。看一件事物要抓住它的核心，也就是万变不离其宗的东西。而在动态的过程中，要时刻定位核心之所在，动态调整。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一件事物有”活”的方面，有”死”的方面，我们应该将主要精力集中在”活”的方面。而这个”活”和”死”是会随着事物的发展而会产生相应的变化。这需要我们动态的去看问题。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://blog.huvjie.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="点滴" scheme="https://blog.huvjie.com/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>C# 自定义鼠标样式</title>
    <link href="https://blog.huvjie.com/2020/11/12/201112N02/"/>
    <id>https://blog.huvjie.com/2020/11/12/201112N02/</id>
    <published>2020-11-12T02:22:00.000Z</published>
    <updated>2020-11-12T13:08:27.873Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇，不调用 API 的方式。</p><p><img src="http://image.huvjie.com/201112N02_img01.gif" alt=""></p><div style="font-size:13px;color:gray;text-align:center">▲ 样式效果</div><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MouseSt</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line">    <span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Bitmap a = (Bitmap)Bitmap.FromFile(<span class="string">"1.gif"</span>);</span><br><span class="line">            SetCursor(a, <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCursor</span>(<span class="params">Bitmap cursor, Point hotPoint</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span> hotX = hotPoint.X;</span><br><span class="line">            <span class="keyword">int</span> hotY = hotPoint.Y;</span><br><span class="line"><span class="comment">// 这里为什么要 * 2</span></span><br><span class="line">            Bitmap myNewCursor = <span class="keyword">new</span> Bitmap(cursor.Width * <span class="number">2</span>  - hotX, cursor.Height * <span class="number">2</span> - hotY);</span><br><span class="line">            Graphics graphics = Graphics.FromImage(myNewCursor);</span><br><span class="line">            graphics.Clear(Color.FromArgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">            graphics.DrawImage(cursor, cursor.Width - hotX, cursor.Height - hotY, cursor.Width, cursor.Height);</span><br><span class="line">            <span class="keyword">this</span>.Cursor = <span class="keyword">new</span> Cursor(myNewCursor.GetHicon());</span><br><span class="line"></span><br><span class="line">            graphics.Dispose();</span><br><span class="line">            myNewCursor.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">"被点击!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:red"><code>Bitmap myNewCursor</code> 为什么要 <code>*2</code>？ 没看明白。</span> <span style="color:blue">因为 Cursor 属性计算定位的是样式图片的中心点位置？</span></p><hr><div style="font-size:12px"><br>参考：<br>C# winForm 自定义鼠标样式的两种方法：<br><a href="https://www.cnblogs.com/tianguook/archive/2010/08/03/1791572.html" target="_blank" rel="noopener">https://www.cnblogs.com/tianguook/archive/2010/08/03/1791572.html</a><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇，不调用 API 的方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/201112N02_img01.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;font-size:13px;color:gray;text-align:center&quot;&gt;▲ 样式效果&lt;/div&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 自定义鼠标样式</title>
    <link href="https://blog.huvjie.com/2020/11/12/201112N01/"/>
    <id>https://blog.huvjie.com/2020/11/12/201112N01/</id>
    <published>2020-11-12T02:22:00.000Z</published>
    <updated>2020-11-14T01:34:24.702Z</updated>
    
    <content type="html"><![CDATA[<p>这里调用系统 API 的方式。</p><p><img src="http://image.huvjie.com/201112N01_img01.gif" alt=""></p><div style="font-size:13px;color:gray;text-align:center">▲ 样式效果</div><a id="more"></a><p>先准备好鼠标样式<code>cur</code>文件。</p><p><img src="http://image.huvjie.com/201112N01_img01.jpg" alt=""></p><div style="font-size:13px;color:gray;text-align:center">▲ 鼠标样式文件</div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MouseSt</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line">    <span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Cursor myCursor = <span class="keyword">new</span> Cursor(Cursor.Current.Handle);</span><br><span class="line">            IntPtr colrCursorHandle = MouseStye.LoadCursorFromFile(<span class="string">"hand.cur"</span>);</span><br><span class="line">            myCursor.GetType().InvokeMember(<span class="string">"handle"</span>, BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance|BindingFlags.SetField, <span class="literal">null</span>, myCursor, <span class="keyword">new</span> <span class="keyword">object</span>[] &#123; colrCursorHandle &#125;);</span><br><span class="line">            <span class="keyword">this</span>.pictureBox1.Cursor = myCursor; <span class="comment">// pictureBox区域</span></span><br><span class="line"></span><br><span class="line">            Cursor myCursor1 = <span class="keyword">new</span> Cursor(Cursor.Current.Handle);</span><br><span class="line">            IntPtr colrCursorHandle1 = MouseStye.LoadCursorFromFile(<span class="string">"pen.cur"</span>);</span><br><span class="line">            myCursor.GetType().InvokeMember(<span class="string">"handle"</span>, BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance|BindingFlags.SetField, <span class="literal">null</span>, myCursor1, <span class="keyword">new</span> <span class="keyword">object</span>[] &#123; colrCursorHandle1 &#125;);</span><br><span class="line">            <span class="keyword">this</span>.pictureBox2.Cursor = myCursor1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">MouseStye</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">LoadCursorFromFile</span>(<span class="params"><span class="keyword">string</span> fileName</span>)</span>;</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">SetCursor</span>(<span class="params">IntPtr cursorHandle</span>)</span>;</span><br><span class="line">        [<span class="meta">DllImport(<span class="meta-string">"user32.dll"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">uint</span> <span class="title">DestroyCursor</span>(<span class="params">IntPtr cursorHandle</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InvokeMember</code> 第二个选项参数具体还没有深究，先照着写吧。</p><hr><div style="font-size:12px"><br>参考：<br>C# winForm 自定义鼠标样式的两种方法：<br><a href="https://www.cnblogs.com/tianguook/archive/2010/08/03/1791572.html" target="_blank" rel="noopener">https://www.cnblogs.com/tianguook/archive/2010/08/03/1791572.html</a><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里调用系统 API 的方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.huvjie.com/201112N01_img01.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;div style=&quot;font-size:13px;color:gray;text-align:center&quot;&gt;▲ 样式效果&lt;/div&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 委托和事件的区别</title>
    <link href="https://blog.huvjie.com/2020/11/08/201108N02/"/>
    <id>https://blog.huvjie.com/2020/11/08/201108N02/</id>
    <published>2020-11-08T02:22:00.000Z</published>
    <updated>2020-11-08T02:07:27.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="委托："><a href="#委托：" class="headerlink" title="委托："></a>委托：</h2><p><strong>委托</strong>是一种各<strong>类型</strong>，像类和结构一样。一般放在<code>namespace</code>里，当然也可以放在类里面，就像类里面也可以放类一样。</p><a id="more"></a><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><strong>事件</strong>是<em>类或结构</em>的成员，像<code>属性</code>和<code>方法</code>一样。事件更像是委托变量。</p><p>有两点注意：</p><ul><li>事件不能放在可执行代码段里面声明。也就是，只能做字段，不能做本地变量；</li><li>必须声明在类或结构中，做类或结构的成员；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;委托：&quot;&gt;&lt;a href=&quot;#委托：&quot; class=&quot;headerlink&quot; title=&quot;委托：&quot;&gt;&lt;/a&gt;委托：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;委托&lt;/strong&gt;是一种各&lt;strong&gt;类型&lt;/strong&gt;，像类和结构一样。一般放在&lt;code&gt;namespace&lt;/code&gt;里，当然也可以放在类里面，就像类里面也可以放类一样。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>简单测试下 goto 语句</title>
    <link href="https://blog.huvjie.com/2020/11/08/201108N01/"/>
    <id>https://blog.huvjie.com/2020/11/08/201108N01/</id>
    <published>2020-11-08T02:22:00.000Z</published>
    <updated>2020-11-08T01:47:19.412Z</updated>
    
    <content type="html"><![CDATA[<p>大家都建议不要用<code>goto</code>语句。我测试下<code>goto</code>语句怎么用。</p><p><strong><code>goto</code>语句执行是，跳转到标签位置后，又开始从标签位置往下执行。</strong></p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     aMark:</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;   </span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        Console.WriteLine(b);</span><br><span class="line">        <span class="keyword">int</span> c = a + b;</span><br><span class="line">        Console.WriteLine(c + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">goto</span> bMark;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">goto</span> aMark;</span><br><span class="line"></span><br><span class="line">    bMark:</span><br><span class="line">        Console.WriteLine(<span class="string">"程序结束!!"</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">20</span><br><span class="line">30</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">30</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">30</span><br><span class="line"></span><br><span class="line">程序结束!!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家都建议不要用&lt;code&gt;goto&lt;/code&gt;语句。我测试下&lt;code&gt;goto&lt;/code&gt;语句怎么用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;goto&lt;/code&gt;语句执行是，跳转到标签位置后，又开始从标签位置往下执行。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>配置 OpenCV 开发环境</title>
    <link href="https://blog.huvjie.com/2020/11/07/201107N01/"/>
    <id>https://blog.huvjie.com/2020/11/07/201107N01/</id>
    <published>2020-11-07T02:22:00.000Z</published>
    <updated>2020-11-10T15:42:18.971Z</updated>
    
    <content type="html"><![CDATA[<p>OpenCV3 + Visual studio 2017 社区版，以及 OpenCV3 + Qt Creator。Windows 7，64bit。</p><a id="more"></a><h1 id="OpenCV-amp-amp-VS"><a href="#OpenCV-amp-amp-VS" class="headerlink" title="OpenCV &amp;&amp; VS"></a>OpenCV &amp;&amp; VS</h1><p>什么下载安装就不说了。主要配置四个地方：</p><ol><li>OpenCV 的<code>path</code>环境变量：<ul><li><code>。。。\opencv\build\x64\vc15\bin</code>;</li></ul></li><li><p><code>视图=》其他窗口=》属性管理器</code>,右键需要配置的配置方案。<code>VC++目录 -&gt; 包含目录</code>，将：</p><ul><li><code>。。。\opencv\build\include</code>；</li><li><code>。。。\opencv\build\include\opencv</code>；</li><li><p><code>。。。\opencv\build\include\opencv2</code>。</p><p>三个目录添加进去；</p></li></ul></li><li><p>继续上面：<code>VC++目录 -&gt; 库目录</code>，将：<code>。。。\opencv\build\x64\vc15\lib</code>目录添加进去；</p></li><li><p>继续上面：<code>连接器 -&gt; 输入 -&gt; 附加依赖项</code>将库文件添加进去(<strong>带上后缀</strong>)：</p><ul><li><code>opencv_world3412.lib</code>  <em>// release版</em></li><li><code>opencv_world3412d.lib</code> <em>// debug版</em></li></ul></li></ol><p>上面基本上就可以了，弄段代码测试一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Mat image = imread(<span class="string">"0.jpg"</span>);<span class="comment">// 一定要放到 cpp 同级目录，F5 调试运行才能加载。</span></span><br><span class="line">                              <span class="comment">// 如果手动直接运行 Debug 下生成的 exe，图片需要拷贝到 exe 的同级目录。</span></span><br><span class="line">  imshow(<span class="string">"测试配置"</span>, image);</span><br><span class="line">  waitKey(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面的图片相对位置的注释说明。不然绝对路径太长了，练习的时候有点麻烦。<strong>如果上面只配置了 x64，编译运行时一定要选好 x64，不要用 x86 编译运行。</strong></p><h1 id="OpenCV-amp-amp-Qt-Creator"><a href="#OpenCV-amp-amp-Qt-Creator" class="headerlink" title="OpenCV &amp;&amp; Qt Creator"></a>OpenCV &amp;&amp; Qt Creator</h1><p>首先，根据 Qt Creator 配置的编译器，选择好对应编译好的 OpenCV 版本，注意是<code>MinGW</code>还是<code>MSVC</code>。</p><p>这里以<code>MinGW</code>版本为例，三大步：</p><ol><li>添加 Qt 的<code>path</code>环境变量：<ul><li><code>。。。\Qt\Qt5.7.0\5.7\mingw530_32\bin</code></li><li><code>。。。\Qt\Qt5.7.0\Tools\mingw530_32\bin</code></li></ul></li><li>添加 OpenCV 的<code>path</code>的环境变量：<ul><li><code>\OpenCV\OpenCV328x64\x64\mingw\bin</code></li></ul></li><li>在 Qt 项目<code>pro</code>文件中添加包含目录和库目录： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH += D:/DiyProgram/OpenCV/OpenCV328x64/include \</span><br><span class="line">           D:/DiyProgram/OpenCV/OpenCV328x64/include/opencv \</span><br><span class="line">           D:/DiyProgram/OpenCV/OpenCV328x64/include/opencv2</span><br><span class="line"></span><br><span class="line">LIBS +=  D:/DiyProgram/OpenCV/OpenCV328x64/x64/mingw/lib/libopencv_*</span><br></pre></td></tr></table></figure></li></ol><p>上面的就算配置完成，可以用测试代码测试一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenCV3 + Visual studio 2017 社区版，以及 OpenCV3 + Qt Creator。Windows 7，64bit。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 读取环境变量，和字符串大小写转换</title>
    <link href="https://blog.huvjie.com/2020/11/03/201103N01/"/>
    <id>https://blog.huvjie.com/2020/11/03/201103N01/</id>
    <published>2020-11-03T02:22:00.000Z</published>
    <updated>2020-11-03T14:59:30.188Z</updated>
    
    <content type="html"><![CDATA[<ol><li><code>string.ToLower()</code> 更改大小写返回的是副本，原来的字符串还是原来的。<code>ToUper()</code>应该也是一样的吧；</li><li><code>ToLower()</code>只改变字母大小写，其他的字符不改变；</li><li>读取(系统)环境变量时，自己新建的环境变量后，需要重启电脑，才能读取到。</li></ol><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> a = <span class="string">"abkj_KKOIHI_1234-_!你好！！！"</span>;</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line">            <span class="keyword">string</span> b = a.ToLower();</span><br><span class="line">            Console.WriteLine(b);</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> str = Environment.GetEnvironmentVariable(<span class="string">"RebSoft"</span>);<span class="comment">// 系统环境变量</span></span><br><span class="line">            <span class="keyword">string</span> s = Environment.GetEnvironmentVariable(<span class="string">"RebSoft"</span>, EnvironmentVariableTarget.User); <span class="comment">// 当前用户环境变量</span></span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="http://image.huvjie.com/201103N01_img01.jpg" alt=""></p><p>这里有一篇读取环境变量的<a href="https://www.cnblogs.com/tianma3798/p/5500279.html" target="_blank" rel="noopener">博文</a>，很全：<code>https://www.cnblogs.com/tianma3798/p/5500279.html</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;code&gt;string.ToLower()&lt;/code&gt; 更改大小写返回的是副本，原来的字符串还是原来的。&lt;code&gt;ToUper()&lt;/code&gt;应该也是一样的吧；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ToLower()&lt;/code&gt;只改变字母大小写，其他的字符不改变；&lt;/li&gt;
&lt;li&gt;读取(系统)环境变量时，自己新建的环境变量后，需要重启电脑，才能读取到。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# Linq Xml 简单测试</title>
    <link href="https://blog.huvjie.com/2020/11/03/201103N02/"/>
    <id>https://blog.huvjie.com/2020/11/03/201103N02/</id>
    <published>2020-11-03T02:22:00.000Z</published>
    <updated>2020-11-03T15:07:27.224Z</updated>
    
    <content type="html"><![CDATA[<p>C# Linq 真的很强大啊!简单的测试下。</p><a id="more"></a><h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">XDocument xDoc = <span class="keyword">new</span> XDocument(</span><br><span class="line">     <span class="keyword">new</span> XDeclaration(<span class="string">"1.0"</span>, <span class="string">"utf-8"</span>, <span class="literal">null</span>),</span><br><span class="line">     <span class="keyword">new</span> XElement(<span class="string">"test"</span>,</span><br><span class="line">         <span class="keyword">new</span> XElement(<span class="string">"person"</span>,</span><br><span class="line">             <span class="keyword">new</span> XElement(<span class="string">"name"</span>, <span class="string">"小明"</span>),</span><br><span class="line">             <span class="keyword">new</span> XElement(<span class="string">"age"</span>, <span class="string">"8"</span>)),</span><br><span class="line">         <span class="keyword">new</span> XElement(<span class="string">"person"</span>,</span><br><span class="line">             <span class="keyword">new</span> XElement(<span class="string">"name"</span>, <span class="string">"小华"</span>),</span><br><span class="line">             <span class="keyword">new</span> XElement(<span class="string">"age"</span>, <span class="string">"9"</span>)),</span><br><span class="line">         <span class="keyword">new</span> XElement(<span class="string">"sum"</span>, <span class="string">"2"</span>)</span><br><span class="line">     )</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line">  xDoc.Save(<span class="string">"Test.xml"</span>);</span><br></pre></td></tr></table></figure><p>通过参数数组，类似结构的缩进，直接创建了xml文档。</p><p>xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>8<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>小华<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>9<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sum</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sum</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XElement file = XElement.Load(<span class="string">"Test.xml"</span>);</span><br><span class="line">XElement xiaoming = file.Descendants(<span class="string">"person"</span>)</span><br><span class="line">    .Where(x =&gt; x.Element(<span class="string">"name"</span>).Value == <span class="string">"小明"</span>).SingleOrDefault();</span><br></pre></td></tr></table></figure><p><code>xiaoming.ToString()</code>直接读出：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>8<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>如果直接读取<code>xioaming</code>的<code>value</code>值会输出多少？</strong></p><p>它会把它下面节点的<code>value</code>值全部读出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小明8</span><br></pre></td></tr></table></figure><p>我猜它应该是个结果集序列。</p><h2 id="First-FirstOrDefault-Single-SingleOrDefault-有什么不一样？"><a href="#First-FirstOrDefault-Single-SingleOrDefault-有什么不一样？" class="headerlink" title="First,FirstOrDefault,Single,SingleOrDefault 有什么不一样？"></a>First,FirstOrDefault,Single,SingleOrDefault 有什么不一样？</h2><p><img src="http://image.huvjie.com/201103N02_img01.png" alt=""></p><p><code>SingleOrDefault</code> 含有多个元素的时候会抛异常。</p><hr><p>下面两片博文可以参考：</p><p><a href="https://www.cnblogs.com/lelehellow/p/6549404.html" target="_blank" rel="noopener">c#操作符 ??和First,FirstOrDefault,Single,SingleOrDefault。</a></p><p><a href="https://www.cnblogs.com/s7ven/articles/3575478.html" target="_blank" rel="noopener">c# XElement XML操作总结。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C# Linq 真的很强大啊!简单的测试下。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#跨线程访问控件需要注意的问题</title>
    <link href="https://blog.huvjie.com/2020/10/25/201025N01/"/>
    <id>https://blog.huvjie.com/2020/10/25/201025N01/</id>
    <published>2020-10-25T02:22:00.000Z</published>
    <updated>2020-10-25T02:16:47.637Z</updated>
    
    <content type="html"><![CDATA[<p>C#跨线程访问控件，我们一般 <code>new</code> 一个线程，多线程来操作。今天本以为是这样操作的，可还是卡死程序了。记录一下碰到的这些疑难杂症。</p><a id="more"></a><h2 id="一、怀疑多界面问题"><a href="#一、怀疑多界面问题" class="headerlink" title="一、怀疑多界面问题"></a>一、怀疑多界面问题</h2><p><strong>其实，与嵌套多少个控件没关系。</strong></p><p><img src="http://image.huvjie.com/201025N01_img01.gif" alt=""></p><p>怀疑是在主窗体嵌入的两个<code>menu</code>，在<code>menu</code>里面这样操作不行。后面这种情况被我排除了。<strong>因为，我把代码复制到主页面，相同功能还是卡死。所以，还是代码有问题。</strong></p><div style="font-size:13px;color:gray;text-align:center">▲ 我是在一个主窗体放了一个panel，然后，在panel里面加载menu1，menu1通过按钮加载menu2；再在么menu2里面new一个线程，跨线程访问textbox。可这样还是被卡死了。</div><h2 id="二、聚焦代码问题"><a href="#二、聚焦代码问题" class="headerlink" title="二、聚焦代码问题"></a>二、聚焦代码问题</h2><p>问题其实是，<code>this.textBox1.Invoke(/*调用代码*/)</code>的<code>调用代码</code><strong>不能太耗时，与控件本身操作无关的代码</strong>。不然就<strong>卡死</strong>。</p><p>开始我是这样写的：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.textBox1.InvokeRequired) &#123;</span><br><span class="line">        <span class="keyword">this</span>.textBox1.Invoke(<span class="keyword">new</span> Action(() =&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = a++.ToString(); </span><br><span class="line">                Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">thread.IsBackground = <span class="literal">true</span>;</span><br><span class="line">thread.Start();</span><br></pre></td></tr></table></figure><h3 id="把循环放到控件Invoke外面去"><a href="#把循环放到控件Invoke外面去" class="headerlink" title="把循环放到控件Invoke外面去"></a>把循环放到控件<code>Invoke</code>外面去</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.textBox1.InvokeRequired) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.textBox1.Invoke(<span class="keyword">new</span> Action(() =&gt; &#123;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = a++.ToString();  </span><br><span class="line">                Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">thread.IsBackground = <span class="literal">true</span>;</span><br><span class="line">thread.Start();</span><br></pre></td></tr></table></figure><p>上面这样还是不行的，<code>Thread.Sleep(1000);</code>耗时，且与跨线程访问的控件无关。经测试即使换成耗时的循环<code>for(int i = 0; i &lt; 1000; i++) for(int j = 0; j &lt; 100000; j++);</code>，这样照样会卡死。</p><h3 id="把Thread-Sleep-1000-放Invoke外面去"><a href="#把Thread-Sleep-1000-放Invoke外面去" class="headerlink" title="把Thread.Sleep(1000);放Invoke外面去"></a>把<code>Thread.Sleep(1000);</code>放<code>Invoke</code>外面去</h3><p>这样能够工作的，不卡。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.textBox1.InvokeRequired) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.textBox1.Invoke(<span class="keyword">new</span> Action(() =&gt; &#123;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = a++.ToString();</span><br><span class="line">            &#125;));</span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">thread.IsBackground = <span class="literal">true</span>;</span><br><span class="line">thread.Start();</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="http://image.huvjie.com/201025N01_img02.gif" alt=""></p><div style="font-size:13px;color:gray;text-align:center">▲ 主页面的textbox计时显示和两层加载的menu中的textbox的计时显示也是没问题的，窗体不冻结卡死。</div><p>其实本质上为什么会这样，我是没有明确搞明白的，都是自己去理解，不确定是不是自己理解的这样。也不想花太多的时间去深究了，能实现效果就好。<strong>如何学会把时间花在最关键的地方？这是一门学问，越早明白越受益。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C#跨线程访问控件，我们一般 &lt;code&gt;new&lt;/code&gt; 一个线程，多线程来操作。今天本以为是这样操作的，可还是卡死程序了。记录一下碰到的这些疑难杂症。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://blog.huvjie.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://blog.huvjie.com/tags/C/"/>
    
  </entry>
  
</feed>
