<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡搅蛮缠</title>
  
  <subtitle>胡文杰的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.andyvj.com/"/>
  <updated>2020-11-08T02:07:27.615Z</updated>
  <id>https://www.andyvj.com/</id>
  
  <author>
    <name>AndyVJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C# 委托和事件的区别</title>
    <link href="https://www.andyvj.com/2020/11/08/201108N02/"/>
    <id>https://www.andyvj.com/2020/11/08/201108N02/</id>
    <published>2020-11-08T02:22:00.000Z</published>
    <updated>2020-11-08T02:07:27.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="委托："><a href="#委托：" class="headerlink" title="委托："></a>委托：</h2><p><strong>委托</strong>是一种各<strong>类型</strong>，像类和结构一样。一般放在<code>namespace</code>里，当然也可以放在类里面，就像类里面也可以放类一样。</p><a id="more"></a><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><strong>事件</strong>是<em>类或结构</em>的成员，像<code>属性</code>和<code>方法</code>一样。事件更像是委托变量。</p><p>有两点注意：</p><ul><li>事件不能放在可执行代码段里面声明。也就是，只能做字段，不能做本地变量；</li><li>必须声明在类或结构中，做类或结构的成员；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;委托：&quot;&gt;&lt;a href=&quot;#委托：&quot; class=&quot;headerlink&quot; title=&quot;委托：&quot;&gt;&lt;/a&gt;委托：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;委托&lt;/strong&gt;是一种各&lt;strong&gt;类型&lt;/strong&gt;，像类和结构一样。一般放在&lt;code&gt;namespace&lt;/code&gt;里，当然也可以放在类里面，就像类里面也可以放类一样。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>简单测试下 goto 语句</title>
    <link href="https://www.andyvj.com/2020/11/08/201108N01/"/>
    <id>https://www.andyvj.com/2020/11/08/201108N01/</id>
    <published>2020-11-08T02:22:00.000Z</published>
    <updated>2020-11-08T01:47:19.412Z</updated>
    
    <content type="html"><![CDATA[<p>大家都建议不要用<code>goto</code>语句。我测试下<code>goto</code>语句怎么用。</p><p><strong><code>goto</code>语句执行是，跳转到标签位置后，又开始从标签位置往下执行。</strong></p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     aMark:</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;   </span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        Console.WriteLine(b);</span><br><span class="line">        <span class="keyword">int</span> c = a + b;</span><br><span class="line">        Console.WriteLine(c + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">goto</span> bMark;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">goto</span> aMark;</span><br><span class="line"></span><br><span class="line">    bMark:</span><br><span class="line">        Console.WriteLine(<span class="string">"程序结束!!"</span>);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">20</span><br><span class="line">30</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">30</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">30</span><br><span class="line"></span><br><span class="line">程序结束!!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家都建议不要用&lt;code&gt;goto&lt;/code&gt;语句。我测试下&lt;code&gt;goto&lt;/code&gt;语句怎么用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;goto&lt;/code&gt;语句执行是，跳转到标签位置后，又开始从标签位置往下执行。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>配置 OpenCV 开发环境</title>
    <link href="https://www.andyvj.com/2020/11/07/201107N01/"/>
    <id>https://www.andyvj.com/2020/11/07/201107N01/</id>
    <published>2020-11-07T02:22:00.000Z</published>
    <updated>2020-11-07T14:25:14.292Z</updated>
    
    <content type="html"><![CDATA[<p>OpenCV3 + Visual studio 2017 社区版，以及 OpenCV3 + Qt Creator。Windows 7，64bit。</p><a id="more"></a><h1 id="OpenCV-amp-amp-VS"><a href="#OpenCV-amp-amp-VS" class="headerlink" title="OpenCV &amp;&amp; VS"></a>OpenCV &amp;&amp; VS</h1><p>什么下载安装就不说了。主要配置四个地方：</p><ol><li>OpenCV 的<code>path</code>环境变量：<ul><li><code>。。。\opencv\build\x64\vc15\bin</code>;</li></ul></li><li><p><code>视图=》其他窗口=》属性管理器</code>,右键需要配置的配置方案。<code>VC++目录 -&gt; 包含目录</code>，将：</p><ul><li><code>。。。\opencv\build\include</code>；</li><li><code>。。。\opencv\build\include\opencv</code>；</li><li><p><code>。。。\opencv\build\include\opencv2</code>。</p><p>三个目录添加进去；</p></li></ul></li><li><p>继续上面：<code>VC++目录 -&gt; 包含目录</code>，将：<code>。。。\opencv\build\x64\vc15\lib</code>目录添加进去；</p></li><li><p>继续上面：<code>连接器 -&gt; 输入 -&gt; 附加依赖项</code>将库文件添加进去(<strong>带上后缀</strong>)：</p><ul><li><code>opencv_world3412.lib</code>  <em>// release版</em></li><li><code>opencv_world3412d.lib</code> <em>// debug版</em></li></ul></li></ol><p>上面基本上就可以了，弄段代码测试一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Mat image = imread(<span class="string">"0.jpg"</span>);<span class="comment">// 一定要放到 cpp 同级目录，F5 调试运行才能加载。</span></span><br><span class="line">                              <span class="comment">// 如果手动直接运行 Debug 下生成的 exe，图片需要拷贝到 exe 的同级目录。</span></span><br><span class="line">  imshow(<span class="string">"测试配置"</span>, image);</span><br><span class="line">  waitKey(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面的图片相对位置的注释说明。不然绝对路径太长了，练习的时候有点麻烦。<strong>如果上面只配置了 x64，编译运行时一定要选好 x64，不要用 x86 编译运行。</strong></p><h1 id="OpenCV-amp-amp-Qt-Creator"><a href="#OpenCV-amp-amp-Qt-Creator" class="headerlink" title="OpenCV &amp;&amp; Qt Creator"></a>OpenCV &amp;&amp; Qt Creator</h1><p>首先，根据 Qt Creator 配置的编译器，选择好对应编译好的 OpenCV 版本，注意是<code>MinGW</code>还是<code>MSVC</code>。</p><p>这里以<code>MinGW</code>版本为例，三大步：</p><ol><li>添加 Qt 的<code>path</code>环境变量：<ul><li><code>。。。\Qt\Qt5.7.0\5.7\mingw530_32\bin</code></li><li><code>。。。\Qt\Qt5.7.0\Tools\mingw530_32\bin</code></li></ul></li><li>添加 OpenCV 的<code>path</code>的环境变量：<ul><li><code>\OpenCV\OpenCV328x64\x64\mingw\bin</code></li></ul></li><li>在 Qt 项目<code>pro</code>文件中添加包含目录和库目录： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH += D:/DiyProgram/OpenCV/OpenCV328x64/include \</span><br><span class="line">           D:/DiyProgram/OpenCV/OpenCV328x64/include/opencv \</span><br><span class="line">           D:/DiyProgram/OpenCV/OpenCV328x64/include/opencv2</span><br><span class="line"></span><br><span class="line">LIBS +=  D:/DiyProgram/OpenCV/OpenCV328x64/x64/mingw/lib/libopencv_*</span><br></pre></td></tr></table></figure></li></ol><p>上面的就算配置完成，可以用测试代码测试一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenCV3 + Visual studio 2017 社区版，以及 OpenCV3 + Qt Creator。Windows 7，64bit。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# Linq Xml 简单测试</title>
    <link href="https://www.andyvj.com/2020/11/03/201103N02/"/>
    <id>https://www.andyvj.com/2020/11/03/201103N02/</id>
    <published>2020-11-03T02:22:00.000Z</published>
    <updated>2020-11-03T15:07:27.224Z</updated>
    
    <content type="html"><![CDATA[<p>C# Linq 真的很强大啊!简单的测试下。</p><a id="more"></a><h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">XDocument xDoc = <span class="keyword">new</span> XDocument(</span><br><span class="line">     <span class="keyword">new</span> XDeclaration(<span class="string">"1.0"</span>, <span class="string">"utf-8"</span>, <span class="literal">null</span>),</span><br><span class="line">     <span class="keyword">new</span> XElement(<span class="string">"test"</span>,</span><br><span class="line">         <span class="keyword">new</span> XElement(<span class="string">"person"</span>,</span><br><span class="line">             <span class="keyword">new</span> XElement(<span class="string">"name"</span>, <span class="string">"小明"</span>),</span><br><span class="line">             <span class="keyword">new</span> XElement(<span class="string">"age"</span>, <span class="string">"8"</span>)),</span><br><span class="line">         <span class="keyword">new</span> XElement(<span class="string">"person"</span>,</span><br><span class="line">             <span class="keyword">new</span> XElement(<span class="string">"name"</span>, <span class="string">"小华"</span>),</span><br><span class="line">             <span class="keyword">new</span> XElement(<span class="string">"age"</span>, <span class="string">"9"</span>)),</span><br><span class="line">         <span class="keyword">new</span> XElement(<span class="string">"sum"</span>, <span class="string">"2"</span>)</span><br><span class="line">     )</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line">  xDoc.Save(<span class="string">"Test.xml"</span>);</span><br></pre></td></tr></table></figure><p>通过参数数组，类似结构的缩进，直接创建了xml文档。</p><p>xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>8<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>小华<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>9<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sum</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sum</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XElement file = XElement.Load(<span class="string">"Test.xml"</span>);</span><br><span class="line">XElement xiaoming = file.Descendants(<span class="string">"person"</span>)</span><br><span class="line">    .Where(x =&gt; x.Element(<span class="string">"name"</span>).Value == <span class="string">"小明"</span>).SingleOrDefault();</span><br></pre></td></tr></table></figure><p><code>xiaoming.ToString()</code>直接读出：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>8<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>如果直接读取<code>xioaming</code>的<code>value</code>值会输出多少？</strong></p><p>它会把它下面节点的<code>value</code>值全部读出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小明8</span><br></pre></td></tr></table></figure><p>我猜它应该是个结果集序列。</p><h2 id="First-FirstOrDefault-Single-SingleOrDefault-有什么不一样？"><a href="#First-FirstOrDefault-Single-SingleOrDefault-有什么不一样？" class="headerlink" title="First,FirstOrDefault,Single,SingleOrDefault 有什么不一样？"></a>First,FirstOrDefault,Single,SingleOrDefault 有什么不一样？</h2><p><img src="http://image.huvjie.com/201103N02_img01.png" alt=""></p><p><code>SingleOrDefault</code> 含有多个元素的时候会抛异常。</p><hr><p>下面两片博文可以参考：</p><p><a href="https://www.cnblogs.com/lelehellow/p/6549404.html" target="_blank" rel="noopener">c#操作符 ??和First,FirstOrDefault,Single,SingleOrDefault。</a></p><p><a href="https://www.cnblogs.com/s7ven/articles/3575478.html" target="_blank" rel="noopener">c# XElement XML操作总结。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C# Linq 真的很强大啊!简单的测试下。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 读取环境变量，和字符串大小写转换</title>
    <link href="https://www.andyvj.com/2020/11/03/201103N01/"/>
    <id>https://www.andyvj.com/2020/11/03/201103N01/</id>
    <published>2020-11-03T02:22:00.000Z</published>
    <updated>2020-11-03T14:59:30.188Z</updated>
    
    <content type="html"><![CDATA[<ol><li><code>string.ToLower()</code> 更改大小写返回的是副本，原来的字符串还是原来的。<code>ToUper()</code>应该也是一样的吧；</li><li><code>ToLower()</code>只改变字母大小写，其他的字符不改变；</li><li>读取(系统)环境变量时，自己新建的环境变量后，需要重启电脑，才能读取到。</li></ol><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> a = <span class="string">"abkj_KKOIHI_1234-_!你好！！！"</span>;</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line">            <span class="keyword">string</span> b = a.ToLower();</span><br><span class="line">            Console.WriteLine(b);</span><br><span class="line">            Console.WriteLine(a);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> str = Environment.GetEnvironmentVariable(<span class="string">"RebSoft"</span>);<span class="comment">// 系统环境变量</span></span><br><span class="line">            <span class="keyword">string</span> s = Environment.GetEnvironmentVariable(<span class="string">"RebSoft"</span>, EnvironmentVariableTarget.User); <span class="comment">// 当前用户环境变量</span></span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="http://image.huvjie.com/201103N01_img01.jpg" alt=""></p><p>这里有一篇读取环境变量的<a href="https://www.cnblogs.com/tianma3798/p/5500279.html" target="_blank" rel="noopener">博文</a>，很全：<code>https://www.cnblogs.com/tianma3798/p/5500279.html</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;code&gt;string.ToLower()&lt;/code&gt; 更改大小写返回的是副本，原来的字符串还是原来的。&lt;code&gt;ToUper()&lt;/code&gt;应该也是一样的吧；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ToLower()&lt;/code&gt;只改变字母大小写，其他的字符不改变；&lt;/li&gt;
&lt;li&gt;读取(系统)环境变量时，自己新建的环境变量后，需要重启电脑，才能读取到。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#跨线程访问控件需要注意的问题</title>
    <link href="https://www.andyvj.com/2020/10/25/201025N01/"/>
    <id>https://www.andyvj.com/2020/10/25/201025N01/</id>
    <published>2020-10-25T02:22:00.000Z</published>
    <updated>2020-10-25T02:16:47.637Z</updated>
    
    <content type="html"><![CDATA[<p>C#跨线程访问控件，我们一般 <code>new</code> 一个线程，多线程来操作。今天本以为是这样操作的，可还是卡死程序了。记录一下碰到的这些疑难杂症。</p><a id="more"></a><h2 id="一、怀疑多界面问题"><a href="#一、怀疑多界面问题" class="headerlink" title="一、怀疑多界面问题"></a>一、怀疑多界面问题</h2><p><strong>其实，与嵌套多少个控件没关系。</strong></p><p><img src="http://image.huvjie.com/201025N01_img01.gif" alt=""></p><p>怀疑是在主窗体嵌入的两个<code>menu</code>，在<code>menu</code>里面这样操作不行。后面这种情况被我排除了。<strong>因为，我把代码复制到主页面，相同功能还是卡死。所以，还是代码有问题。</strong></p><div style="font-size:13px;color:gray;text-align:center">▲ 我是在一个主窗体放了一个panel，然后，在panel里面加载menu1，menu1通过按钮加载menu2；再在么menu2里面new一个线程，跨线程访问textbox。可这样还是被卡死了。</div><h2 id="二、聚焦代码问题"><a href="#二、聚焦代码问题" class="headerlink" title="二、聚焦代码问题"></a>二、聚焦代码问题</h2><p>问题其实是，<code>this.textBox1.Invoke(/*调用代码*/)</code>的<code>调用代码</code><strong>不能太耗时，与控件本身操作无关的代码</strong>。不然就<strong>卡死</strong>。</p><p>开始我是这样写的：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.textBox1.InvokeRequired) &#123;</span><br><span class="line">        <span class="keyword">this</span>.textBox1.Invoke(<span class="keyword">new</span> Action(() =&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = a++.ToString(); </span><br><span class="line">                Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">thread.IsBackground = <span class="literal">true</span>;</span><br><span class="line">thread.Start();</span><br></pre></td></tr></table></figure><h3 id="把循环放到控件Invoke外面去"><a href="#把循环放到控件Invoke外面去" class="headerlink" title="把循环放到控件Invoke外面去"></a>把循环放到控件<code>Invoke</code>外面去</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.textBox1.InvokeRequired) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.textBox1.Invoke(<span class="keyword">new</span> Action(() =&gt; &#123;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = a++.ToString();  </span><br><span class="line">                Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">thread.IsBackground = <span class="literal">true</span>;</span><br><span class="line">thread.Start();</span><br></pre></td></tr></table></figure><p>上面这样还是不行的，<code>Thread.Sleep(1000);</code>耗时，且与跨线程访问的控件无关。经测试即使换成耗时的循环<code>for(int i = 0; i &lt; 1000; i++) for(int j = 0; j &lt; 100000; j++);</code>，这样照样会卡死。</p><h3 id="把Thread-Sleep-1000-放Invoke外面去"><a href="#把Thread-Sleep-1000-放Invoke外面去" class="headerlink" title="把Thread.Sleep(1000);放Invoke外面去"></a>把<code>Thread.Sleep(1000);</code>放<code>Invoke</code>外面去</h3><p>这样能够工作的，不卡。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.textBox1.InvokeRequired) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.textBox1.Invoke(<span class="keyword">new</span> Action(() =&gt; &#123;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = a++.ToString();</span><br><span class="line">            &#125;));</span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">thread.IsBackground = <span class="literal">true</span>;</span><br><span class="line">thread.Start();</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="http://image.huvjie.com/201025N01_img02.gif" alt=""></p><div style="font-size:13px;color:gray;text-align:center">▲ 主页面的textbox计时显示和两层加载的menu中的textbox的计时显示也是没问题的，窗体不冻结卡死。</div><p>其实本质上为什么会这样，我是没有明确搞明白的，都是自己去理解，不确定是不是自己理解的这样。也不想花太多的时间去深究了，能实现效果就好。<strong>如何学会把时间花在最关键的地方？这是一门学问，越早明白越受益。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C#跨线程访问控件，我们一般 &lt;code&gt;new&lt;/code&gt; 一个线程，多线程来操作。今天本以为是这样操作的，可还是卡死程序了。记录一下碰到的这些疑难杂症。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# 引用类型赋值指向的是同一块内存</title>
    <link href="https://www.andyvj.com/2020/10/18/201018N01/"/>
    <id>https://www.andyvj.com/2020/10/18/201018N01/</id>
    <published>2020-10-18T02:22:00.000Z</published>
    <updated>2020-10-18T08:50:39.554Z</updated>
    
    <content type="html"><![CDATA[<p>首先，<code>属性</code>是引用类型。引用类型之间赋值传递后，他们访问的应该是同一块内存区。</p><p>来测试一下：</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>        &#123;  </span><br><span class="line">            A aa = <span class="keyword">new</span> A();  </span><br><span class="line">  </span><br><span class="line">            aa.aaa();  </span><br><span class="line">  </span><br><span class="line">            Console.ReadKey();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> a = <span class="number">100</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">A</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">private</span> Test TestA &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> Test();  </span><br><span class="line">        <span class="keyword">private</span> B b = <span class="keyword">new</span> B();  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aaa</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>        &#123;  </span><br><span class="line">            Console.WriteLine( <span class="string">"之前:"</span> + TestA.a);  </span><br><span class="line">            <span class="keyword">this</span>.b.TestB = <span class="keyword">this</span>.TestA;  </span><br><span class="line">            <span class="keyword">this</span>.b.TestB.a = <span class="number">200</span>;  <span class="comment">// 通过对象b来更改。  </span></span><br><span class="line">            Console.WriteLine(<span class="string">"之后:"</span> + TestA.a);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">B</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">public</span> Test TestB &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">之前:100  </span><br><span class="line">之后:200</span><br></pre></td></tr></table></figure><p>可见，对象<code>b</code>能够访问<code>TestA</code>属性指向的内存<code>Test</code>对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，&lt;code&gt;属性&lt;/code&gt;是引用类型。引用类型之间赋值传递后，他们访问的应该是同一块内存区。&lt;/p&gt;
&lt;p&gt;来测试一下：&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Halcon数组创建及基本运算</title>
    <link href="https://www.andyvj.com/2020/10/11/201011N01/"/>
    <id>https://www.andyvj.com/2020/10/11/201011N01/</id>
    <published>2020-10-11T02:22:00.000Z</published>
    <updated>2020-10-11T14:46:13.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A:=[]            *空数组</span><br><span class="line">A:=[1]           *[1]</span><br><span class="line">A:=[A,1]         *[1,1]</span><br><span class="line">A:=[A,[1,2,3]]   *[1,1,1,2,3]</span><br><span class="line">B:= A + 1        *[2,2,2,3,4] // 每一个数加 1</span><br></pre></td></tr></table></figure><p><span style="color:blue">Halcon 中的变量是不需要声明的，直接用。</span></p><h2 id="数组相加"><a href="#数组相加" class="headerlink" title="数组相加"></a>数组相加</h2><p>数组相加(<span style="color:red">前提是两个数组元素个数要一样</span>)。下面代码的数组 B 是继承上面的：<code>B：=[2,2,2,3,4]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:=[1,2,3,4,5]</span><br><span class="line">D:=B+C</span><br></pre></td></tr></table></figure><p>数组 D 的结果是：<code>[3, 4, 5, 7, 9]</code>。可见结果是每个对应的元素进行相加。</p><h2 id="求数组的长度"><a href="#求数组的长度" class="headerlink" title="求数组的长度"></a>求数组的长度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l := |D|</span><br></pre></td></tr></table></figure><p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple_length (D,len)</span><br></pre></td></tr></table></figure></p><p>上面的结果是：<code>l=5</code>,<code>len=5</code>。</p><h2 id="通过下标获取元素值"><a href="#通过下标获取元素值" class="headerlink" title="通过下标获取元素值"></a>通过下标获取元素值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value := D[2]</span><br></pre></td></tr></table></figure><p>上面的结果是：<code>value=5</code>。<span style="color:red">可见，下标是从<code>0</code>开始的。</span></p><h2 id="其他数学运算"><a href="#其他数学运算" class="headerlink" title="其他数学运算"></a>其他数学运算</h2><p>其他的数学运算可以查看<code>tuple_</code>开头的算子。</p><p><img src="http://image.huvjie.com/201011N01_img01.jpg" alt="▲提供了很多的数学计算函数"></p><div style="font-size:13px;color:gray;text-align:center">▲ 提供了很多的数学计算函数</div><p>数组在图像处理中应该是很重要的，像素不就是数组吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组定义&quot;&gt;&lt;a href=&quot;#数组定义&quot; class=&quot;headerlink&quot; title=&quot;数组定义&quot;&gt;&lt;/a&gt;数组定义&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>如何交换两个变量的值而不借助于临时变量</title>
    <link href="https://www.andyvj.com/2020/10/10/201010N01/"/>
    <id>https://www.andyvj.com/2020/10/10/201010N01/</id>
    <published>2020-10-10T12:00:00.000Z</published>
    <updated>2020-10-10T12:28:25.775Z</updated>
    
    <content type="html"><![CDATA[<p>如何交换两个变量的值？一般我们是这样做的：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a = 10;  </span><br><span class="line">int b = 20;  </span><br><span class="line">  </span><br><span class="line">int temp = a;  </span><br><span class="line">a = b;  </span><br><span class="line">b = temp;</span><br></pre></td></tr></table></figure><p>这样借助于第三个临时变量，清晰易懂。如何不借助于第三个临时变量来实现两个数值的交换？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line">  </span><br><span class="line">int main()  </span><br><span class="line">&#123;  </span><br><span class="line">    int a = 10;  </span><br><span class="line">    int b = 20;  </span><br><span class="line">    printf(&quot;交换前：a = %d, b = %d\n&quot;, a, b);  </span><br><span class="line">    // 关键代码  </span><br><span class="line">    a = a + b;  </span><br><span class="line">    b = a - b;  </span><br><span class="line">    a = a - b;  </span><br><span class="line">  </span><br><span class="line">    printf(&quot;交换后：a = %d, b = %d\n&quot;, a, b);  </span><br><span class="line">  </span><br><span class="line">    return 0;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">交换前：a = 10, b = 20  </span><br><span class="line">交换后：a = 20, b = 10</span><br></pre></td></tr></table></figure><p>关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a + b;  </span><br><span class="line">b = a - b;  </span><br><span class="line">a = a - b;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何交换两个变量的值？一般我们是这样做的：&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# Winform 跨多级窗体/控件传值</title>
    <link href="https://www.andyvj.com/2020/10/02/201002N02/"/>
    <id>https://www.andyvj.com/2020/10/02/201002N02/</id>
    <published>2020-10-02T02:06:14.000Z</published>
    <updated>2020-10-02T02:11:42.846Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道 C# winform 跨窗体传值，子父窗体交互一般用委托来实现。之前都是<code>子窗体</code>和<code>父窗体</code>两级交互，如果<code>子窗体</code>再生一个<code>子子窗体</code>，然后<code>子子窗体</code>调用<code>父窗体</code>函数，这样该如何操作？我想到的实现方式还是用<code>委托变量</code>一级一级的往下传。下面是实现的效果：</p><a id="more"></a><p><img src="http://image.huvjie.com/201002N02_img01.gif" alt=""></p><div style="font-size:13px;color:gray;text-align:center">▲ Form1 加载 Uc1，在 Uc1 下加载 Uc2，Uc2 下返回 Uc1</div><h3 id="Form1-cs"><a href="#Form1-cs" class="headerlink" title="Form1.cs"></a>Form1.cs</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;  </span><br><span class="line"><span class="keyword">using</span> System.Data;  </span><br><span class="line"><span class="keyword">using</span> System.Drawing;  </span><br><span class="line"><span class="keyword">using</span> System.Linq;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>        &#123;  </span><br><span class="line">            InitializeComponent();  </span><br><span class="line">            <span class="keyword">this</span>.userControl1.LoadUserF2 = <span class="keyword">this</span>.LoadFrm;  </span><br><span class="line">            <span class="keyword">this</span>.userControl1.action = () =&gt; <span class="keyword">this</span>.button1_Click(<span class="literal">null</span>, <span class="literal">null</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">private</span> UserControl1 userControl1 = <span class="keyword">new</span> UserControl1() &#123; Dock = DockStyle.Fill&#125;;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)  </span></span><br><span class="line"><span class="function"></span>        &#123;  </span><br><span class="line">            <span class="keyword">this</span>.LoadFrm(<span class="keyword">this</span>.userControl1);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadFrm</span>(<span class="params">Control control</span>)  </span></span><br><span class="line"><span class="function"></span>        &#123;  </span><br><span class="line">            <span class="keyword">this</span>.panel1.Controls.Clear();  </span><br><span class="line">            <span class="keyword">this</span>.panel1.Controls.Add(control);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserControl1-cs"><a href="#UserControl1-cs" class="headerlink" title="UserControl1.cs"></a>UserControl1.cs</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;  </span><br><span class="line"><span class="keyword">using</span> System.Drawing;  </span><br><span class="line"><span class="keyword">using</span> System.Data;  </span><br><span class="line"><span class="keyword">using</span> System.Linq;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">UserControl1</span> : <span class="title">UserControl</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UserControl1</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>        &#123;  </span><br><span class="line">            InitializeComponent();  </span><br><span class="line">            <span class="comment">// this.userControl2.backUc1 = this.action; // 放这里，结果都是 null  </span></span><br><span class="line">            <span class="comment">// 这个绑定不能放构造函数。因为构造函数执行的时候 action = null。  </span></span><br><span class="line">            <span class="comment">// 主窗体先构造好子窗体，然后再给子窗体 action 赋值。  </span></span><br><span class="line">            <span class="comment">// 所以，绑定要放在子窗体构造完毕之后。  </span></span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">private</span> UserControl2 userControl2 = <span class="keyword">new</span> UserControl2() &#123; Dock = DockStyle.Fill &#125;;  </span><br><span class="line">        <span class="keyword">public</span> Action&lt;Control&gt; LoadUserF2;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> Action action;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)  </span></span><br><span class="line"><span class="function"></span>        &#123;  </span><br><span class="line">            <span class="keyword">this</span>.LoadUserF2?.Invoke(<span class="keyword">this</span>.userControl2);  </span><br><span class="line">            <span class="keyword">this</span>.userControl2.backUc1 = <span class="keyword">this</span>.action; <span class="comment">// 在这绑定  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserControl2-cs"><a href="#UserControl2-cs" class="headerlink" title="UserControl2.cs"></a>UserControl2.cs</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;  </span><br><span class="line"><span class="keyword">using</span> System.Drawing;  </span><br><span class="line"><span class="keyword">using</span> System.Data;  </span><br><span class="line"><span class="keyword">using</span> System.Linq;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">UserControl2</span> : <span class="title">UserControl</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UserControl2</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>        &#123;  </span><br><span class="line">            InitializeComponent();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> Action backUc1;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)  </span></span><br><span class="line"><span class="function"></span>        &#123;  </span><br><span class="line">            backUc1?.Invoke();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>要注意的地方：</strong></p><p>在 <code>UserControl1.cs</code> 中的注释中说明。这里的委托绑定不能放在构造函数下，因为构造函数执行的时候 <code>action = null</code>。主窗体先构造好子窗体，然后再给子窗体 <code>action</code> 赋值。所以，这里的绑定要放在子窗体构造完毕之后。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道 C# winform 跨窗体传值，子父窗体交互一般用委托来实现。之前都是&lt;code&gt;子窗体&lt;/code&gt;和&lt;code&gt;父窗体&lt;/code&gt;两级交互，如果&lt;code&gt;子窗体&lt;/code&gt;再生一个&lt;code&gt;子子窗体&lt;/code&gt;，然后&lt;code&gt;子子窗体&lt;/code&gt;调用&lt;code&gt;父窗体&lt;/code&gt;函数，这样该如何操作？我想到的实现方式还是用&lt;code&gt;委托变量&lt;/code&gt;一级一级的往下传。下面是实现的效果：&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# == 和 Equals 的比较</title>
    <link href="https://www.andyvj.com/2020/10/02/201002N01/"/>
    <id>https://www.andyvj.com/2020/10/02/201002N01/</id>
    <published>2020-10-02T01:55:53.000Z</published>
    <updated>2020-10-02T01:59:10.957Z</updated>
    
    <content type="html"><![CDATA[<p>C# <code>==</code> 和 <code>Equals</code>的比较。<code>==</code>比较的是引用，<code>Equals</code>比较的是内容。所以对<code>值类型</code>两者是一样的，对于引用类型就不一样了。但对于<code>string</code>类型的比较，内部重写了<code>==</code>操作符，内部调用的还是<code>Equals</code>。<code>Equals</code>是<code>Object</code>中的一个虚方法，必要的时候可以进行重写。</p><a id="more"></a><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.cnblogs.com/changbaishan/p/10579021.html" target="_blank" rel="noopener">link-01</a><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C# &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;Equals&lt;/code&gt;的比较。&lt;code&gt;==&lt;/code&gt;比较的是引用，&lt;code&gt;Equals&lt;/code&gt;比较的是内容。所以对&lt;code&gt;值类型&lt;/code&gt;两者是一样的，对于引用类型就不一样了。但对于&lt;code&gt;string&lt;/code&gt;类型的比较，内部重写了&lt;code&gt;==&lt;/code&gt;操作符，内部调用的还是&lt;code&gt;Equals&lt;/code&gt;。&lt;code&gt;Equals&lt;/code&gt;是&lt;code&gt;Object&lt;/code&gt;中的一个虚方法，必要的时候可以进行重写。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#.NET不同类实现一个接口的事例</title>
    <link href="https://www.andyvj.com/2020/08/26/200826N02/"/>
    <id>https://www.andyvj.com/2020/08/26/200826N02/</id>
    <published>2020-08-26T13:13:47.000Z</published>
    <updated>2020-09-15T14:27:25.475Z</updated>
    
    <content type="html"><![CDATA[<p>不同类实现一个接口的事例。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">ILiveBird</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">BabyCalled</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Animal</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span>, <span class="title">ILiveBird</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> ILiveBird.BabyCalled()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Kitten"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Dog</span>:<span class="title">Animal</span>, <span class="title">ILiveBird</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> ILiveBird.BabyCalled()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Puppy"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Bird</span>: <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Animal[] animalArray = <span class="keyword">new</span> Animal[<span class="number">3</span>];</span><br><span class="line">        animalArray[<span class="number">0</span>] = <span class="keyword">new</span> Cat();</span><br><span class="line">        animalArray[<span class="number">1</span>] = <span class="keyword">new</span> Dog();</span><br><span class="line">        animalArray[<span class="number">2</span>] = <span class="keyword">new</span> Bird();        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (Animal a <span class="keyword">in</span> animalArray) &#123;</span><br><span class="line">            ILiveBird b = a <span class="keyword">as</span> ILiveBird; <span class="comment">// 关键代码</span></span><br><span class="line">            <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"昵称是：&#123;0&#125;"</span>, b.BabyCalled());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">昵称是：Kitten</span><br><span class="line">昵称是：Puppy</span><br></pre></td></tr></table></figure><p><code>ILiveBird b = a as ILiveBird; // 关键代码</code>，<code>as</code>转换，失败不会报异常，而是返回<code>null</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不同类实现一个接口的事例。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C 语言用数字替代true和false</title>
    <link href="https://www.andyvj.com/2020/08/26/200826N01/"/>
    <id>https://www.andyvj.com/2020/08/26/200826N01/</id>
    <published>2020-08-26T13:10:08.000Z</published>
    <updated>2020-08-26T13:16:01.106Z</updated>
    
    <content type="html"><![CDATA[<p>C 语言用数字替代true和false。<br><a id="more"></a><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS  // VS 中, C 语言警告</span></span><br><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"><span class="keyword">void</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">-10</span>, <span class="number">-2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">102</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> *p = a;</span><br><span class="line">    <span class="keyword">int</span> max; <span class="comment">// 用来存最大偶数</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>; <span class="comment">// 标志位      </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; p &lt; a + <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(*a); p++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; *p % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            max = *p; <span class="comment">// 取到第一个偶数，这个判断语句就不再执行</span></span><br><span class="line">            flag = <span class="number">0</span>; <span class="comment">// 标志位置 false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*p % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; *p &gt; max) &#123;</span><br><span class="line">                max = *p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">"最大的偶数是：%d\n"</span>, max);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最大的偶数是：<span class="number">102</span></span><br></pre></td></tr></table></figure></p><p>这个标志位是一段经典代码，它只执行一次，找到第一个偶数的时候，<code>flag</code> 置 <code>0 (false)</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag &amp;&amp; *p % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    max = *p; <span class="comment">// 取到第一个偶数，这个判断语句就不再执行</span></span><br><span class="line">    flag = <span class="number">0</span>; <span class="comment">// 标志位置 false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>加强点 C 语言以后，准备看数据结构。今天周末，去哪里逛逛呢？</p><p>——2020.08.22</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C 语言用数字替代true和false。&lt;br&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C/C++" scheme="https://www.andyvj.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C# enum 枚举类的问题</title>
    <link href="https://www.andyvj.com/2020/08/22/200822N02/"/>
    <id>https://www.andyvj.com/2020/08/22/200822N02/</id>
    <published>2020-08-22T12:00:01.000Z</published>
    <updated>2020-08-26T12:50:34.392Z</updated>
    
    <content type="html"><![CDATA[<p>C# enum 枚举类的问题。<br><a id="more"></a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> TrafficLight</span><br><span class="line">&#123;</span><br><span class="line">    Green = <span class="number">10</span>,</span><br><span class="line">    Yellow = <span class="number">15</span>,</span><br><span class="line">    Red = <span class="number">15</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        TrafficLight t1 = TrafficLight.Red;</span><br><span class="line">        Console.WriteLine((TrafficLight)<span class="number">15</span>); <span class="comment">// 输出的是第一个能匹配的值</span></span><br><span class="line">        Console.WriteLine(t1);  <span class="comment">// 输出的是第一个能匹配的值，尽管前面赋值的是 Red，但输出的还是 Yellow。</span></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yellow</span><br><span class="line">Yellow</span><br></pre></td></tr></table></figure><p>可见，枚举类虽然不能有重复的名称，但可以有重复的值（上例中赋值了两个15）。</p><p>上面的测试可知：<strong>输出的是第一个能匹配的值，尽管前面赋值的是<code>Red</code>，但输出的还是 <code>Yellow</code>。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C# enum 枚举类的问题。&lt;br&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#.Net 的扩展类的基本使用</title>
    <link href="https://www.andyvj.com/2020/08/22/200822N01/"/>
    <id>https://www.andyvj.com/2020/08/22/200822N01/</id>
    <published>2020-08-22T12:00:00.000Z</published>
    <updated>2020-08-22T00:38:28.521Z</updated>
    
    <content type="html"><![CDATA[<p>C#.Net 的扩展类的基本使用。可以用来扩展<code>密封类</code>或者外部导入的<code>dll</code>。</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        MyData md = <span class="keyword">new</span> MyData(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"总合：&#123;0&#125;"</span>, md.Sum());</span><br><span class="line">        Console.WriteLine(<span class="string">"平均值:&#123;0&#125;"</span>, md.Average());  <span class="comment">//直接像实例一样的调用</span></span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 【1】.必须是一个静态类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtendMyData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// [2] 必须是一个共有的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Average</span>(<span class="params"><span class="keyword">this</span> MyData md</span>) <span class="comment">// [3] this 关键字 和 类型</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> md.Sum() / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MyData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyData</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Sum</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">总合：<span class="number">3</span></span><br><span class="line">平均值:<span class="number">1.5</span></span><br></pre></td></tr></table></figure><p>扩展类的使用主要有 3 个步骤，见代码内的注释说明。</p><p>可见，扩展的是基类，使用的时候也是实例化基类，然后进行直接的实例化形式的调用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C#.Net 的扩展类的基本使用。可以用来扩展&lt;code&gt;密封类&lt;/code&gt;或者外部导入的&lt;code&gt;dll&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C# .NET 索引器的基本使用</title>
    <link href="https://www.andyvj.com/2020/08/18/200818N01/"/>
    <id>https://www.andyvj.com/2020/08/18/200818N01/</id>
    <published>2020-08-18T13:03:00.000Z</published>
    <updated>2020-08-18T13:03:14.448Z</updated>
    
    <content type="html"><![CDATA[<p>索引器和属性差不多，属性是一对一，而索引器是一对多而已。<br><a id="more"></a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        MyClass mc = <span class="keyword">new</span> MyClass();</span><br><span class="line">        mc[<span class="number">0</span>] = <span class="string">"胡文杰"</span>;</span><br><span class="line">        mc[<span class="number">1</span>] = <span class="string">"杨佳"</span>;</span><br><span class="line">        Console.WriteLine(mc[<span class="number">0</span>]);</span><br><span class="line">        Console.WriteLine(mc[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span>[] name = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 关键：用 this 代替，类型也可以用 string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> <span class="keyword">this</span>[<span class="keyword">int</span> index] &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; name.Length) &#123;</span><br><span class="line">                <span class="keyword">return</span> name[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> name[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt;=<span class="number">0</span> &amp;&amp; index &lt; name.Length) &#123;</span><br><span class="line">                name[index] = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">胡文杰</span><br><span class="line">杨佳</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;索引器和属性差不多，属性是一对一，而索引器是一对多而已。&lt;br&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Json.NET 简单的序列化和反序列化</title>
    <link href="https://www.andyvj.com/2020/08/17/200817N01/"/>
    <id>https://www.andyvj.com/2020/08/17/200817N01/</id>
    <published>2020-08-17T09:14:00.000Z</published>
    <updated>2020-08-17T13:09:27.089Z</updated>
    
    <content type="html"><![CDATA[<p>先弄个实体类：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Gender &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>用<code>JsonConvert.SerializeObject</code>来进行序列化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Student stu = <span class="keyword">new</span> Student &#123;</span><br><span class="line">    Name = <span class="string">"Andy"</span>,</span><br><span class="line">    Gender = <span class="string">"Three"</span>,</span><br><span class="line">    Age = <span class="number">50</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="keyword">string</span> jsonStr = JsonConvert.SerializeObject(stu, Formatting.Indented);</span><br><span class="line">Console.WriteLine(jsonStr);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"Name"</span>: <span class="string">"Andy"</span>,</span><br><span class="line">  <span class="string">"Gender"</span>: <span class="string">"Three"</span>,</span><br><span class="line">  <span class="string">"Age"</span>: <span class="number">50</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以把序列化的字符串保存到<code>json</code>文件中：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line">FileStream fs = <span class="keyword">new</span> FileStream(<span class="string">@"./stu.json"</span>, FileMode.Create);</span><br><span class="line">StreamWriter sw = <span class="keyword">new</span> StreamWriter(fs);</span><br><span class="line">sw.Write(jsonStr);</span><br><span class="line">sw.Close();</span><br><span class="line">fs.Close();</span><br></pre></td></tr></table></figure><p><img src="http://image.huvjie.com/200817N01_img01.jpg" alt="▲保存到json文件"></p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>反序列化用<code>JsonConvert.DeserializeObject&lt;Student&gt;</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student stu1 = JsonConvert.DeserializeObject&lt;Student&gt;(jsonStr);</span><br><span class="line">Console.WriteLine(stu1.Name);</span><br><span class="line">Console.WriteLine(stu1.Gender);</span><br><span class="line">Console.WriteLine(stu1.Age);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Andy</span><br><span class="line">Three</span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><p>更详细的运用可以看看这篇<a href="https://www.lagou.com/lgeduarticle/54110.html" target="_blank" rel="noopener">文章</a>。</p><hr><p>天上的白云漂浮，时而聚，时而散，多么自由。我要是有这样的状态就好了；这是不是文艺范挂在嘴边的“闲看云卷云舒”？</p><p>每个人都在给你提要求，而鲜有人给你帮助。生活太累，太难，太无望。那些文艺范挂在嘴边的“未来可期”，到我这也成“未来不可期”了。</p><p>“天下熙熙皆为利来，天下攘攘皆为利往”，人在世就图碎银几两，此说真没错也。这个世界不计其数的矛盾围绕着“钱”,“利”而生，谁能逃脱，谁能潇洒独善其身？“人活着开心最重要啦”，港剧中反复出现的台词；如果吃碗面就能开心，我愿意每天都吃面。</p><p>愿你我都能做感兴趣的事，都能让开心占大部分生活就好。</p><hr><p><strong>参考：</strong></p><div style="font-size:12px">Json.NET常用方法汇总:<a href="https://www.lagou.com/lgeduarticle/54110.html" target="_blank" rel="noopener">https://www.lagou.com/lgeduarticle/54110.html</a><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先弄个实体类：&lt;br&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
      
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言指针常见的错误</title>
    <link href="https://www.andyvj.com/2020/08/15/200815N02/"/>
    <id>https://www.andyvj.com/2020/08/15/200815N02/</id>
    <published>2020-08-15T12:22:44.000Z</published>
    <updated>2020-08-15T12:24:00.534Z</updated>
    
    <content type="html"><![CDATA[<p>C语言指针常见错误，主要有两种情况：  </p><p>1).指针未初始化;<br>2).避免使用<code>scanf</code>给指针赋值;<br>3).赋值指针为<code>NULL</code>。</p><a id="more"></a><h1 id="指针未初始化"><a href="#指针未初始化" class="headerlink" title="指针未初始化"></a>指针未初始化</h1><p>这种情况：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>, *p;</span><br><span class="line"></span><br><span class="line">*p = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*i=%d\n"</span>, *p);</span><br></pre></td></tr></table></figure></p><p>指针变量<code>p</code>是没有初始化的，就是你还没有给他里面赋值地址进去。这种为初始化的情况在高版本的 VS 中是直接编译不过去的;会报错：<code>C4700    使用了未初始化的局部变量“p”</code>。</p><h1 id="避免-scanf赋值指针"><a href="#避免-scanf赋值指针" class="headerlink" title="避免 scanf赋值指针"></a>避免 <code>scanf</code>赋值指针</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>, *p;</span><br><span class="line">p = &amp;i;  <span class="comment">// 初始化 p，指向 i</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, p);</span><br></pre></td></tr></table></figure><p>这种情况会很容易把原来的<code>i</code>值，或者指向其他内存位置的值改掉导致软件崩溃，需要谨慎。</p><h1 id="赋值指针为NULL"><a href="#赋值指针为NULL" class="headerlink" title="赋值指针为NULL"></a>赋值指针为<code>NULL</code></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>, *p = <span class="literal">NULL</span>;</span><br><span class="line">*p = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, *p);</span><br></pre></td></tr></table></figure><p>这种情况能编译通过，运行时会报<strong>段错误</strong>：<code>引发了异常: 写入访问权限冲突。p 是 nullptr</code>。需要特别注意。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言指针常见错误，主要有两种情况：  &lt;/p&gt;
&lt;p&gt;1).指针未初始化;&lt;br&gt;2).避免使用&lt;code&gt;scanf&lt;/code&gt;给指针赋值;&lt;br&gt;3).赋值指针为&lt;code&gt;NULL&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C/C++" scheme="https://www.andyvj.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C#调用C/C++非托管程序</title>
    <link href="https://www.andyvj.com/2020/08/14/200814N01/"/>
    <id>https://www.andyvj.com/2020/08/14/200814N01/</id>
    <published>2020-08-14T12:44:04.000Z</published>
    <updated>2020-08-14T12:45:14.995Z</updated>
    
    <content type="html"><![CDATA[<p>尝试用 C# 和 C/C++ 混合编程玩下，主要看看如何传参。</p><a id="more"></a><h1 id="传基本的数据类型"><a href="#传基本的数据类型" class="headerlink" title="传基本的数据类型"></a>传基本的数据类型</h1><p>像<code>int</code>，<code>double</code>这类的基本类型直接传参好像问题不大。</p><p>C++：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> __declspec(dllexport)  <span class="function"><span class="keyword">double</span> <span class="title">cppFun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C#：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">CppFunction</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DllImport(@<span class="meta-string">"E:\CPP\lian_xi\CS\61_CsCpp混合编程\Cpp代码\CppCode\Debug\CppCode.dll"</span>,</span></span><br><span class="line"><span class="meta">        CharSet = CharSet.Unicode,</span></span><br><span class="line"><span class="meta">        CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">extern</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">cppFun</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">double</span> b</span>)</span>;<span class="comment">//好像必须要静态 static</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">double</span> result = CppFunction.cppFun(<span class="number">10</span>, <span class="number">0.15</span>);</span><br><span class="line">        Console.WriteLine(result);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.15  // 输出基本问题</span><br></pre></td></tr></table></figure><h1 id="传带指针的数据类型"><a href="#传带指针的数据类型" class="headerlink" title="传带指针的数据类型"></a>传带指针的数据类型</h1><p><img src="http://image.huvjie.com/200814N01_img01.jpg" alt="▲ 先打开不安全代码权限"></p><div style="font-size:13px;color:gray;text-align:center">▲ 先打开不安全代码权限 </div><h2 id="交换两个数值"><a href="#交换两个数值" class="headerlink" title="交换两个数值"></a>交换两个数值</h2><p>C++：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> __declspec(dllexport)  <span class="function"><span class="keyword">void</span>  <span class="title">cppFun</span><span class="params">(<span class="keyword">int</span> *p1, <span class="keyword">int</span>  *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = *p1;</span><br><span class="line">    *p1 = *p2;</span><br><span class="line">    *p2 = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C#：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">CppFunction</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DllImport(@<span class="meta-string">"E:\CPP\lian_xi\CS\61_CsCpp混合编程\Cpp代码\CppCode\Debug\CppCode.dll"</span>,</span></span><br><span class="line"><span class="meta">        CharSet = CharSet.Unicode,</span></span><br><span class="line"><span class="meta">        CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">cppFun</span>(<span class="params"><span class="keyword">int</span>* a, <span class="keyword">int</span>* b</span>)</span>;<span class="comment">//好像必须要静态 static</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">unsafe</span> &#123; CppFunction.cppFun(&amp;a, &amp;b); &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">"&#123;0&#125; &#123;1&#125;"</span>, a, b);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span> <span class="number">10</span>  <span class="comment">//可见交换是成功的</span></span><br></pre></td></tr></table></figure></p><p>可以在不打开<code>不安全代码</code>是用 <code>ref</code> 参数来实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">cppFun</span>(<span class="params"><span class="keyword">ref</span> <span class="keyword">int</span> a, <span class="keyword">ref</span> <span class="keyword">int</span> b</span>)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CppFunction.cppFun(<span class="keyword">ref</span> a, <span class="keyword">ref</span> b);</span><br></pre></td></tr></table></figure><p>这样也是能够实现。</p><h2 id="传递字符串参数"><a href="#传递字符串参数" class="headerlink" title="传递字符串参数"></a>传递字符串参数</h2><p>传个<code>char *</code>试一下：</p><p>C++：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> __declspec(dllexport)  <span class="function"><span class="keyword">void</span>  <span class="title">cppFun</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C#：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">CppFunction</span></span><br><span class="line">   &#123;   <span class="comment">// CharSet = CharSet.Ansi  字符编码要用 ASCII</span></span><br><span class="line">       [<span class="meta">DllImport(@<span class="meta-string">"E:\CPP\lian_xi\CS\61_CsCpp混合编程\Cpp代码\CppCode\Debug\CppCode.dll"</span>,</span></span><br><span class="line"><span class="meta">           CharSet = CharSet.Ansi,</span></span><br><span class="line"><span class="meta">           CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">cppFun</span>(<span class="params"><span class="keyword">string</span> s</span>)</span>;<span class="comment">//好像必须要静态 static</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">string</span> s = <span class="string">"哎哟，不错哦!"</span>;</span><br><span class="line">           CppFunction.cppFun(s);</span><br><span class="line"></span><br><span class="line">           Console.ReadKey();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>注意字符编码<code>CharSet = CharSet.Ansi</code>，要<code>用 ANSI 修饰</code>。</p><p>输出：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">哎哟，不错哦!  <span class="comment">// 输出正确</span></span><br></pre></td></tr></table></figure></p><p>各种数据类型是如何<a href="https://docs.microsoft.com/en-us/dotnet/framework/interop/marshaling-data-with-platform-invoke" target="_blank" rel="noopener">对应</a>的：</p><p><img src="http://image.huvjie.com/200814N01_img02.jpg" alt="▲ MSDN上对应的数据类型表"></p><div style="font-size:13px;color:gray;text-align:center">▲ MSDN上对应的数据类型表</div><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/interop/marshaling-data-with-platform-invoke" title="MSDN" target="_blank" rel="noopener">MSDN</a> 数据类型对应。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尝试用 C# 和 C/C++ 混合编程玩下，主要看看如何传参。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#.Net判断窗体是否创建并激活</title>
    <link href="https://www.andyvj.com/2020/08/12/200812N01/"/>
    <id>https://www.andyvj.com/2020/08/12/200812N01/</id>
    <published>2020-08-12T12:00:04.000Z</published>
    <updated>2020-08-12T12:03:14.681Z</updated>
    
    <content type="html"><![CDATA[<p>C#.Net 判断窗体是否创建，如果已创建，激活窗体。</p><a id="more"></a><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Form2 frm2;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (frm2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        frm2 = <span class="keyword">new</span> Form2();</span><br><span class="line">        frm2.StartPosition = FormStartPosition.CenterScreen;</span><br><span class="line">        frm2.Show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (frm2.IsDisposed) &#123; <span class="comment">// 判断窗体是否关闭 关键代码</span></span><br><span class="line">            frm2 = <span class="keyword">new</span> Form2();</span><br><span class="line">            frm2.StartPosition = FormStartPosition.CenterScreen;</span><br><span class="line">            frm2.Show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            frm2.WindowState = FormWindowState.Normal; <span class="comment">// 窗体默认大小</span></span><br><span class="line">            frm2.Activate();  <span class="comment">// 激活窗体</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> isFormOpen = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>( Form frm <span class="keyword">in</span> Application.OpenForms) &#123; <span class="comment">// 关键代码</span></span><br><span class="line">        <span class="keyword">if</span> (frm <span class="keyword">is</span> Form2) &#123;</span><br><span class="line">            <span class="comment">// 如果此窗口已打开，则激活；</span></span><br><span class="line">            frm.Activate();</span><br><span class="line">            frm.WindowState = FormWindowState.Normal;</span><br><span class="line">            isFormOpen = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isFormOpen) &#123;</span><br><span class="line">        Form2 frm2 = <span class="keyword">new</span> Form2();</span><br><span class="line">        frm2.Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><hr><br><span style="color:gray;font-size:12px"><br>参考：<br>1.<a href="https://www.cnblogs.com/zhzhx/p/3392762.html" target="_blank" rel="noopener">link-01</a>。<br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C#.Net 判断窗体是否创建，如果已创建，激活窗体。&lt;/p&gt;
    
    </summary>
    
      <category term="编程爱好" scheme="https://www.andyvj.com/categories/%E7%BC%96%E7%A8%8B%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="C#" scheme="https://www.andyvj.com/tags/C/"/>
    
  </entry>
  
</feed>
